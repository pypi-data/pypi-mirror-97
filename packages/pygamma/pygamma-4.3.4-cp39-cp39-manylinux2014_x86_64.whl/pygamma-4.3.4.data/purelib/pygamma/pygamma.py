# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import numpy


import numpy
import math


import numpy
import pygamma


import numpy


import numpy



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pygamma
else:
    import _pygamma

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pygamma.delete_SwigPyIterator

    def value(self):
        return _pygamma.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pygamma.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pygamma.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pygamma.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pygamma.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pygamma.SwigPyIterator_copy(self)

    def next(self):
        return _pygamma.SwigPyIterator_next(self)

    def __next__(self):
        return _pygamma.SwigPyIterator___next__(self)

    def previous(self):
        return _pygamma.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pygamma.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pygamma.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pygamma.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pygamma.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pygamma.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pygamma.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pygamma.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pygamma:
_pygamma.SwigPyIterator_swigregister(SwigPyIterator)

class stdlistSP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pygamma.stdlistSP_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pygamma.stdlistSP___nonzero__(self)

    def __bool__(self):
        return _pygamma.stdlistSP___bool__(self)

    def __len__(self):
        return _pygamma.stdlistSP___len__(self)

    def __getslice__(self, i, j):
        return _pygamma.stdlistSP___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pygamma.stdlistSP___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pygamma.stdlistSP___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pygamma.stdlistSP___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pygamma.stdlistSP___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pygamma.stdlistSP___setitem__(self, *args)

    def pop(self):
        return _pygamma.stdlistSP_pop(self)

    def append(self, x):
        return _pygamma.stdlistSP_append(self, x)

    def empty(self):
        return _pygamma.stdlistSP_empty(self)

    def size(self):
        return _pygamma.stdlistSP_size(self)

    def swap(self, v):
        return _pygamma.stdlistSP_swap(self, v)

    def begin(self):
        return _pygamma.stdlistSP_begin(self)

    def end(self):
        return _pygamma.stdlistSP_end(self)

    def rbegin(self):
        return _pygamma.stdlistSP_rbegin(self)

    def rend(self):
        return _pygamma.stdlistSP_rend(self)

    def clear(self):
        return _pygamma.stdlistSP_clear(self)

    def get_allocator(self):
        return _pygamma.stdlistSP_get_allocator(self)

    def pop_back(self):
        return _pygamma.stdlistSP_pop_back(self)

    def erase(self, *args):
        return _pygamma.stdlistSP_erase(self, *args)

    def __init__(self, *args):
        _pygamma.stdlistSP_swiginit(self, _pygamma.new_stdlistSP(*args))

    def push_back(self, x):
        return _pygamma.stdlistSP_push_back(self, x)

    def front(self):
        return _pygamma.stdlistSP_front(self)

    def back(self):
        return _pygamma.stdlistSP_back(self)

    def assign(self, n, x):
        return _pygamma.stdlistSP_assign(self, n, x)

    def resize(self, *args):
        return _pygamma.stdlistSP_resize(self, *args)

    def insert(self, *args):
        return _pygamma.stdlistSP_insert(self, *args)

    def pop_front(self):
        return _pygamma.stdlistSP_pop_front(self)

    def push_front(self, x):
        return _pygamma.stdlistSP_push_front(self, x)

    def reverse(self):
        return _pygamma.stdlistSP_reverse(self)
    __swig_destroy__ = _pygamma.delete_stdlistSP

# Register stdlistSP in _pygamma:
_pygamma.stdlistSP_swigregister(stdlistSP)

class ParameterSet(stdlistSP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ParameterSet self) -> ParameterSet"""
        _pygamma.ParameterSet_swiginit(self, _pygamma.new_ParameterSet())
    __swig_destroy__ = _pygamma.delete_ParameterSet

# Register ParameterSet in _pygamma:
_pygamma.ParameterSet_swigregister(ParameterSet)
cvar = _pygamma.cvar
GamSParInit = cvar.GamSParInit
GamIntVecInit = cvar.GamIntVecInit

class SinglePar(object):
    r"""Proxy of C++ SinglePar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SinglePar self) -> SinglePar
        __init__(SinglePar self, SinglePar par) -> SinglePar
        __init__(SinglePar self, std::string const & pname, int pdata, std::string const & pstate) -> SinglePar
        __init__(SinglePar self, std::string const & pname, double pdata, std::string const & pstate) -> SinglePar
        __init__(SinglePar self, std::string const & pname, std::string const & pdata, std::string const & pstate) -> SinglePar
        __init__(SinglePar self, std::string const & pname, int ptype, std::string const & pdata, std::string const & pstate) -> SinglePar
        __init__(SinglePar self, std::string const & pname) -> SinglePar
        """
        _pygamma.SinglePar_swiginit(self, _pygamma.new_SinglePar(*args))
    __swig_destroy__ = _pygamma.delete_SinglePar

    def __assign__(self, par):
        r"""__assign__(SinglePar self, SinglePar par) -> SinglePar"""
        return _pygamma.SinglePar___assign__(self, par)

    def SPerror(self, eidx, noret=0):
        r"""SPerror(SinglePar self, int eidx, int noret=0)"""
        return _pygamma.SinglePar_SPerror(self, eidx, noret)

    def SPfatality(self, eidx):
        r"""SPfatality(SinglePar self, int eidx) -> void volatile"""
        return _pygamma.SinglePar_SPfatality(self, eidx)

    def setCoord(self, input):
        r"""setCoord(SinglePar self, std::string & input) -> int"""
        return _pygamma.SinglePar_setCoord(self, input)

    def data(self, *args):
        r"""
        data(SinglePar self, std::string Data)
        data(SinglePar self) -> std::string const &
        """
        return _pygamma.SinglePar_data(self, *args)

    def type(self, *args):
        r"""
        type(SinglePar self, int Type)
        type(SinglePar self) -> int
        """
        return _pygamma.SinglePar_type(self, *args)

    def name(self, *args):
        r"""
        name(SinglePar self) -> std::string const
        name(SinglePar self, std::string const & Name)
        """
        return _pygamma.SinglePar_name(self, *args)

    def state(self, *args):
        r"""
        state(SinglePar self) -> std::string const
        state(SinglePar self, std::string const & State)
        """
        return _pygamma.SinglePar_state(self, *args)

    def GetNS(self, name, state):
        r"""GetNS(SinglePar self, std::string & name, std::string & state)"""
        return _pygamma.SinglePar_GetNS(self, name, state)

    def parse(self, *args):
        r"""
        parse(SinglePar self, std::string & name, int & val, std::string & state, int warn=0) -> bool
        parse(SinglePar self, std::string & name, double & val, std::string & state, int warn=0) -> bool
        parse(SinglePar self, std::string & name, std::string & val, std::string & state, int warn=0) -> bool
        parse(SinglePar self, std::string & name, double & dx, double & dy, double & dz, std::string & state, int warn=0) -> bool
        parse(SinglePar self, std::string & name, int & rank, double & diso, double & delz, double & deta, double & alpha, double & beta, double & gamma, std::string & state, int warn=0) -> bool
        """
        return _pygamma.SinglePar_parse(self, *args)

    def printStrings(self):
        r"""printStrings(SinglePar self) -> StringVector"""
        return _pygamma.SinglePar_printStrings(self)

    def __eq__(self, par):
        r"""__eq__(SinglePar self, SinglePar par) -> bool"""
        return _pygamma.SinglePar___eq__(self, par)

    def __ne__(self, par):
        r"""__ne__(SinglePar self, SinglePar par) -> bool"""
        return _pygamma.SinglePar___ne__(self, par)

    def __lt__(self, par):
        r"""__lt__(SinglePar self, SinglePar par) -> bool"""
        return _pygamma.SinglePar___lt__(self, par)

    def __gt__(self, par):
        r"""__gt__(SinglePar self, SinglePar par) -> bool"""
        return _pygamma.SinglePar___gt__(self, par)

# Register SinglePar in _pygamma:
_pygamma.SinglePar_swigregister(SinglePar)

class Isotope(object):
    r"""Proxy of C++ Isotope class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Isotope self) -> Isotope
        __init__(Isotope self, Isotope I) -> Isotope
        __init__(Isotope self, std::string const & I) -> Isotope
        """
        _pygamma.Isotope_swiginit(self, _pygamma.new_Isotope(*args))
    __swig_destroy__ = _pygamma.delete_Isotope

    def qn(self):
        r"""qn(Isotope self) -> double"""
        return _pygamma.Isotope_qn(self)

    def HS(self):
        r"""HS(Isotope self) -> int"""
        return _pygamma.Isotope_HS(self)

    def momentum(self):
        r"""momentum(Isotope self) -> std::string"""
        return _pygamma.Isotope_momentum(self)

    def symbol(self):
        r"""symbol(Isotope self) -> std::string const &"""
        return _pygamma.Isotope_symbol(self)

    def name(self):
        r"""name(Isotope self) -> std::string const &"""
        return _pygamma.Isotope_name(self)

    def element(self):
        r"""element(Isotope self) -> std::string const &"""
        return _pygamma.Isotope_element(self)

    def number(self):
        r"""number(Isotope self) -> int"""
        return _pygamma.Isotope_number(self)

    def mass(self):
        r"""mass(Isotope self) -> int"""
        return _pygamma.Isotope_mass(self)

    def weight(self):
        r"""weight(Isotope self) -> double"""
        return _pygamma.Isotope_weight(self)

    def gamma(self):
        r"""gamma(Isotope self) -> double"""
        return _pygamma.Isotope_gamma(self)

    def receptivity(self):
        r"""receptivity(Isotope self) -> double"""
        return _pygamma.Isotope_receptivity(self)

    def relative_frequency(self):
        r"""relative_frequency(Isotope self) -> double"""
        return _pygamma.Isotope_relative_frequency(self)

    def electron(self):
        r"""electron(Isotope self) -> bool"""
        return _pygamma.Isotope_electron(self)

    def read(self, *args):
        r"""
        read(Isotope self, std::string const & filename, int idx=-1, int warn=2) -> bool
        read(Isotope self, ParameterSet pset, int idx=-1, int warn=2) -> bool
        """
        return _pygamma.Isotope_read(self, *args)

    def printStrings(self, hdr=True):
        r"""printStrings(Isotope self, bool hdr=True) -> StringVector"""
        return _pygamma.Isotope_printStrings(self, hdr)

    def seek(self, ID):
        r"""seek(Isotope self, IsotopeData ID) -> int"""
        return _pygamma.Isotope_seek(self, ID)

    def exists(self, symbol):
        r"""exists(Isotope self, std::string const & symbol) -> bool"""
        return _pygamma.Isotope_exists(self, symbol)

    @staticmethod
    def known(symbol):
        r"""known(std::string const & symbol) -> bool"""
        return _pygamma.Isotope_known(symbol)

    @staticmethod
    def size():
        r"""size() -> int"""
        return _pygamma.Isotope_size()

    @staticmethod
    def PrintListStrings():
        r"""PrintListStrings() -> StringVector"""
        return _pygamma.Isotope_PrintListStrings()

    @staticmethod
    def AddIsotope(ID, warn=2):
        r"""AddIsotope(IsotopeData ID, int warn=2) -> bool"""
        return _pygamma.Isotope_AddIsotope(ID, warn)

    def __eq__(self, I):
        r"""__eq__(Isotope self, Isotope I) -> bool"""
        return _pygamma.Isotope___eq__(self, I)

    def __ne__(self, I):
        r"""__ne__(Isotope self, Isotope I) -> bool"""
        return _pygamma.Isotope___ne__(self, I)

    def __lt__(self, I):
        r"""__lt__(Isotope self, Isotope I) -> bool"""
        return _pygamma.Isotope___lt__(self, I)

    def __gt__(self, I):
        r"""__gt__(Isotope self, Isotope I) -> bool"""
        return _pygamma.Isotope___gt__(self, I)

    def nepair(self, S):
        r"""nepair(Isotope self, Isotope S) -> bool"""
        return _pygamma.Isotope_nepair(self, S)

    def enpair(self, S):
        r"""enpair(Isotope self, Isotope S) -> bool"""
        return _pygamma.Isotope_enpair(self, S)

    def eepair(self, S):
        r"""eepair(Isotope self, Isotope S) -> bool"""
        return _pygamma.Isotope_eepair(self, S)

    def nnpair(self, S):
        r"""nnpair(Isotope self, Isotope S) -> bool"""
        return _pygamma.Isotope_nnpair(self, S)


    def __str__(self):
        """Prints out Isotope"""

        sss = ""
        for v in self.printStrings():
            sss += str(v) + '\n'

        return (sss)



# Register Isotope in _pygamma:
_pygamma.Isotope_swigregister(Isotope)

def Isotope_known(symbol):
    r"""Isotope_known(std::string const & symbol) -> bool"""
    return _pygamma.Isotope_known(symbol)

def Isotope_size():
    r"""Isotope_size() -> int"""
    return _pygamma.Isotope_size()

def Isotope_PrintListStrings():
    r"""Isotope_PrintListStrings() -> StringVector"""
    return _pygamma.Isotope_PrintListStrings()

def Isotope_AddIsotope(ID, warn=2):
    r"""Isotope_AddIsotope(IsotopeData ID, int warn=2) -> bool"""
    return _pygamma.Isotope_AddIsotope(ID, warn)

PI = _pygamma.PI

PI2 = _pygamma.PI2


def query_parameter(*args):
    r"""
    query_parameter(int argc, char *[] argv, int par, std::string const & Q, std::string & V)
    query_parameter(int argc, char *[] argv, int par, std::string const & Q, double & V)
    query_parameter(int argc, char *[] argv, int par, std::string const & Q, int & V)
    """
    return _pygamma.query_parameter(*args)

def ask_set(*args):
    r"""
    ask_set(int argc, char *[] argv, int par, std::string const & Q, std::string & V) -> bool
    ask_set(int argc, char *[] argv, int par, std::string const & Q, double & V) -> bool
    ask_set(int argc, char *[] argv, int par, std::string const & Q, int & V) -> bool
    """
    return _pygamma.ask_set(*args)

def GAMMAerror(*args):
    r"""
    GAMMAerror(std::string const & hdr, std::string const & msg, int noret=0)
    GAMMAerror(std::string const & hdr, int eidx, int noret=0)
    GAMMAerror(std::string const & hdr, int eidx, std::string const & pname, int noret=0)
    """
    return _pygamma.GAMMAerror(*args)

def GAMMAfatal():
    r"""GAMMAfatal() -> void volatile"""
    return _pygamma.GAMMAfatal()
class IsotopeData(object):
    r"""Proxy of C++ IsotopeData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IsotopeData self) -> IsotopeData
        __init__(IsotopeData self, IsotopeData data) -> IsotopeData
        __init__(IsotopeData self, int HS_, std::string const & symb_, std::string const & name_, std::string element_, int number_, int mass_, double weight_, double recept_, double rel_freq_, bool is_electron_=False) -> IsotopeData
        __init__(IsotopeData self, std::string const & symbol_) -> IsotopeData
        """
        _pygamma.IsotopeData_swiginit(self, _pygamma.new_IsotopeData(*args))

    def __assign__(self, ID1):
        r"""__assign__(IsotopeData self, IsotopeData ID1) -> IsotopeData"""
        return _pygamma.IsotopeData___assign__(self, ID1)
    __swig_destroy__ = _pygamma.delete_IsotopeData

    def qn(self):
        r"""qn(IsotopeData self) -> double"""
        return _pygamma.IsotopeData_qn(self)

    def HS(self):
        r"""HS(IsotopeData self) -> int"""
        return _pygamma.IsotopeData_HS(self)

    def momentum(self):
        r"""momentum(IsotopeData self) -> std::string"""
        return _pygamma.IsotopeData_momentum(self)

    def symbol(self):
        r"""symbol(IsotopeData self) -> std::string const &"""
        return _pygamma.IsotopeData_symbol(self)

    def name(self):
        r"""name(IsotopeData self) -> std::string const &"""
        return _pygamma.IsotopeData_name(self)

    def element(self):
        r"""element(IsotopeData self) -> std::string const &"""
        return _pygamma.IsotopeData_element(self)

    def number(self):
        r"""number(IsotopeData self) -> int"""
        return _pygamma.IsotopeData_number(self)

    def mass(self):
        r"""mass(IsotopeData self) -> int"""
        return _pygamma.IsotopeData_mass(self)

    def weight(self):
        r"""weight(IsotopeData self) -> double"""
        return _pygamma.IsotopeData_weight(self)

    def recept(self):
        r"""recept(IsotopeData self) -> double"""
        return _pygamma.IsotopeData_recept(self)

    def electron(self):
        r"""electron(IsotopeData self) -> bool"""
        return _pygamma.IsotopeData_electron(self)

    def rel_freq(self):
        r"""rel_freq(IsotopeData self) -> double"""
        return _pygamma.IsotopeData_rel_freq(self)

    def printStrings(self, hdr=True):
        r"""printStrings(IsotopeData self, bool hdr=True) -> StringVector"""
        return _pygamma.IsotopeData_printStrings(self, hdr)


    def __str__(self):
        """Prints out isotope data"""

        sss = ""
        sss += "qn: "          + str(self.qn()) + "\n"
        sss += "HS: "          + str(self.HS()) + "\n"
        sss += "momentum: "    + str(self.momentum()) + "\n"
        sss += "symbol: "      + str(self.symbol()) + "\n"
        sss += "name: "        + str(self.name()) + "\n"
        sss += "element: "     + str(self.element()) + "\n"
        sss += "number: "      + str(self.number()) + "\n"
        sss += "mass: "        + str(self.mass()) + "\n"
        sss += "weight: "      + str(self.weight()) + "\n"
        sss += "receptivity: " + str(self.recept()) + "\n"
        sss += "electron: "    + str(self.electron()) + "\n"
        sss += "rel freq: "    + str(self.rel_freq()) + "\n"

        return (sss)




# Register IsotopeData in _pygamma:
_pygamma.IsotopeData_swigregister(IsotopeData)
PIx2 = cvar.PIx2
DEG2RAD = cvar.DEG2RAD
RAD2DEG = cvar.RAD2DEG
HZ2RAD = cvar.HZ2RAD
RAD2HZ = cvar.RAD2HZ
HZ2GAUSS = cvar.HZ2GAUSS
GAUSS2HZ = cvar.GAUSS2HZ
GHZ2GAUSS = cvar.GHZ2GAUSS
GAUSS2GHZ = cvar.GAUSS2GHZ
MU_E = cvar.MU_E
BOHRMAG = cvar.BOHRMAG
GFREE = cvar.GFREE
GAMMAe = cvar.GAMMAe
GAMMA1H = cvar.GAMMA1H
DEFISO = cvar.DEFISO
PLANCK = cvar.PLANCK
HBAR = cvar.HBAR


def cutWhite(Sinp):
    r"""cutWhite(std::string & Sinp) -> std::string"""
    return _pygamma.cutWhite(Sinp)

def cutString(Sinp, xwhite=True):
    r"""cutString(std::string & Sinp, bool xwhite=True) -> std::string"""
    return _pygamma.cutString(Sinp, xwhite)

def cutParBlks(Sinp):
    r"""cutParBlks(std::string & Sinp) -> std::string"""
    return _pygamma.cutParBlks(Sinp)

def cutBlksXBlks(Sinp, X, xwhite=True):
    r"""cutBlksXBlks(std::string & Sinp, std::string const & X, bool xwhite=True) -> std::string"""
    return _pygamma.cutBlksXBlks(Sinp, X, xwhite)

def cutDouble(Sinp, xwhite=True):
    r"""cutDouble(std::string & Sinp, bool xwhite=True) -> std::string"""
    return _pygamma.cutDouble(Sinp, xwhite)

def cutInt(Sinp, xwhite=True):
    r"""cutInt(std::string & Sinp, bool xwhite=True) -> std::string"""
    return _pygamma.cutInt(Sinp, xwhite)

def Gitoa(i):
    r"""Gitoa(int i) -> std::string"""
    return _pygamma.Gitoa(i)

def Gdec2(li):
    r"""Gdec2(long li) -> std::string"""
    return _pygamma.Gdec2(li)

def Gdec(*args):
    r"""
    Gdec(int i) -> std::string
    Gdec(std::string const & fmt, int i) -> std::string
    Gdec(int i, int digs) -> std::string
    """
    return _pygamma.Gdec(*args)

def Gform(*args):
    r"""
    Gform(std::string const & fmt, double d) -> std::string
    Gform(std::string const & fmt, int i) -> std::string
    """
    return _pygamma.Gform(*args)

def CenterString(str, width=80):
    r"""CenterString(std::string const & str, int width=80) -> std::string"""
    return _pygamma.CenterString(str, width)

def enable_blockdiag():
    r"""enable_blockdiag()"""
    return _pygamma.enable_blockdiag()

def disable_blockdiag():
    r"""disable_blockdiag()"""
    return _pygamma.disable_blockdiag()
class matrix(object):
    r"""Proxy of C++ matrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(matrix self) -> matrix
        __init__(matrix self, int i) -> matrix
        __init__(matrix self, int i, int j) -> matrix
        __init__(matrix self, int i, int j, matrix_type t) -> matrix
        __init__(matrix self, int i, int j, matrix_type t, hermitian_type h) -> matrix
        __init__(matrix self, int i, int j, complex z) -> matrix
        __init__(matrix self, int i, int j, complex z, matrix_type t) -> matrix
        __init__(matrix self, int i, int j, complex z, matrix_type t, hermitian_type h) -> matrix
        __init__(matrix self, int i, int j, double d) -> matrix
        __init__(matrix self, int i, int j, double d, matrix_type t) -> matrix
        __init__(matrix self, int i, int j, double d, matrix_type t, hermitian_type h) -> matrix
        __init__(matrix self, matrix mx) -> matrix
        """
        _pygamma.matrix_swiginit(self, _pygamma.new_matrix(*args))
    __swig_destroy__ = _pygamma.delete_matrix

    def __call__(self, i, j):
        r"""__call__(matrix self, int i, int j) -> complex"""
        return _pygamma.matrix___call__(self, i, j)

    def elem(self, i, j):
        r"""elem(matrix self, int i, int j) -> complex"""
        return _pygamma.matrix_elem(self, i, j)

    def get(self, i, j):
        r"""get(matrix self, int i, int j) -> complex"""
        return _pygamma.matrix_get(self, i, j)

    def getRe(self, i, j):
        r"""getRe(matrix self, int i, int j) -> double"""
        return _pygamma.matrix_getRe(self, i, j)

    def getIm(self, i, j):
        r"""getIm(matrix self, int i, int j) -> double"""
        return _pygamma.matrix_getIm(self, i, j)

    def put(self, z, i, j):
        r"""put(matrix self, complex z, int i, int j)"""
        return _pygamma.matrix_put(self, z, i, j)

    def put_h(self, z, i, j):
        r"""put_h(matrix self, complex z, int i, int j)"""
        return _pygamma.matrix_put_h(self, z, i, j)

    def get_block(self, row, col, nrows, ncols):
        r"""get_block(matrix self, int row, int col, int nrows, int ncols) -> matrix"""
        return _pygamma.matrix_get_block(self, row, col, nrows, ncols)

    def put_block(self, row, col, mx):
        r"""put_block(matrix self, int row, int col, matrix mx)"""
        return _pygamma.matrix_put_block(self, row, col, mx)

    def stored_hermitian(self):
        r"""stored_hermitian(matrix self) -> hermitian_type"""
        return _pygamma.matrix_stored_hermitian(self)

    def check_hermitian(self, *args):
        r"""check_hermitian(matrix self, double d=GMxCut) -> hermitian_type"""
        return _pygamma.matrix_check_hermitian(self, *args)

    def set_hermitian(self, *args):
        r"""set_hermitian(matrix self, hermitian_type h=_hermitian)"""
        return _pygamma.matrix_set_hermitian(self, *args)

    def test_hermitian(self, *args):
        r"""test_hermitian(matrix self, double d=GMxCut) -> hermitian_type"""
        return _pygamma.matrix_test_hermitian(self, *args)

    def stored_type(self):
        r"""stored_type(matrix self) -> matrix_type"""
        return _pygamma.matrix_stored_type(self)

    def test_type(self, *args):
        r"""test_type(matrix self, matrix_type t, double d=GMxCut) -> matrix_type"""
        return _pygamma.matrix_test_type(self, *args)

    def set_type(self, t):
        r"""set_type(matrix self, matrix_type t)"""
        return _pygamma.matrix_set_type(self, t)

    def check_type(self, *args):
        r"""check_type(matrix self, matrix_type const t, double const d=GMxCut) -> matrix_type"""
        return _pygamma.matrix_check_type(self, *args)

    def mxtype(self):
        r"""mxtype(matrix self) -> std::string"""
        return _pygamma.matrix_mxtype(self)

    def cols(self):
        r"""cols(matrix self) -> int"""
        return _pygamma.matrix_cols(self)

    def rows(self):
        r"""rows(matrix self) -> int"""
        return _pygamma.matrix_rows(self)

    def refs(self):
        r"""refs(matrix self) -> int"""
        return _pygamma.matrix_refs(self)

    def pts(self):
        r"""pts(matrix self) -> int"""
        return _pygamma.matrix_pts(self)

    def is_symmetric(self, *args):
        r"""is_symmetric(matrix self, double const d=GMxCut) -> bool"""
        return _pygamma.matrix_is_symmetric(self, *args)

    def is_hermitian(self, *args):
        r"""is_hermitian(matrix self, double const d=GMxCut) -> bool"""
        return _pygamma.matrix_is_hermitian(self, *args)

    def is_unitary(self, *args):
        r"""is_unitary(matrix self, double const d=GMxCut) -> bool"""
        return _pygamma.matrix_is_unitary(self, *args)

    def is_real(self, *args):
        r"""is_real(matrix self, double const d=GMxCut) -> bool"""
        return _pygamma.matrix_is_real(self, *args)

    def is_imaginary(self, *args):
        r"""is_imaginary(matrix self, double const d=GMxCut) -> bool"""
        return _pygamma.matrix_is_imaginary(self, *args)

    def is_complex(self, *args):
        r"""is_complex(matrix self, double const d=GMxCut) -> bool"""
        return _pygamma.matrix_is_complex(self, *args)

    def is_zero(self, *args):
        r"""is_zero(matrix self, double const d=GMxCut) -> bool"""
        return _pygamma.matrix_is_zero(self, *args)

    def is_diagonal(self, *args):
        r"""is_diagonal(matrix self, double const d=GMxCut) -> bool"""
        return _pygamma.matrix_is_diagonal(self, *args)

    def is_square(self):
        r"""is_square(matrix self) -> bool"""
        return _pygamma.matrix_is_square(self)

    def __add__(self, mx):
        r"""__add__(matrix self, matrix mx) -> matrix"""
        return _pygamma.matrix___add__(self, mx)

    def __sub__(self, mx):
        r"""__sub__(matrix self, matrix mx) -> matrix"""
        return _pygamma.matrix___sub__(self, mx)

    def __mul__(self, *args):
        r"""
        __mul__(matrix self, matrix mx) -> matrix
        __mul__(matrix self, complex z) -> matrix
        __mul__(matrix self, double d) -> matrix
        """
        return _pygamma.matrix___mul__(self, *args)

    def __truediv__(self, *args):
        return _pygamma.matrix___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, mx1):
        r"""__iadd__(matrix self, matrix mx1) -> matrix"""
        return _pygamma.matrix___iadd__(self, mx1)

    def __isub__(self, mx1):
        r"""__isub__(matrix self, matrix mx1) -> matrix"""
        return _pygamma.matrix___isub__(self, mx1)

    def __imul__(self, *args):
        r"""
        __imul__(matrix self, matrix mx) -> matrix
        __imul__(matrix self, complex z) -> matrix
        __imul__(matrix self, double d) -> matrix
        """
        return _pygamma.matrix___imul__(self, *args)

    def __itruediv__(self, *args):
        return _pygamma.matrix___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __neg__(self):
        r"""__neg__(matrix self) -> matrix"""
        return _pygamma.matrix___neg__(self)

    def Re(self):
        r"""Re(matrix self) -> matrix"""
        return _pygamma.matrix_Re(self)

    def Im(self):
        r"""Im(matrix self) -> matrix"""
        return _pygamma.matrix_Im(self)

    def conj(self):
        r"""conj(matrix self) -> matrix"""
        return _pygamma.matrix_conj(self)

    def transpose(self):
        r"""transpose(matrix self) -> matrix"""
        return _pygamma.matrix_transpose(self)

    def adjoint(self):
        r"""adjoint(matrix self) -> matrix"""
        return _pygamma.matrix_adjoint(self)

    def exp(self):
        r"""exp(matrix self) -> matrix"""
        return _pygamma.matrix_exp(self)

    def swaprows(self, i, j):
        r"""swaprows(matrix self, int i, int j) -> matrix"""
        return _pygamma.matrix_swaprows(self, i, j)

    def swapcols(self, i, j):
        r"""swapcols(matrix self, int i, int j) -> matrix"""
        return _pygamma.matrix_swapcols(self, i, j)

    def permute(self, i, j):
        r"""permute(matrix self, int i, int j) -> matrix"""
        return _pygamma.matrix_permute(self, i, j)

    def maxRe(self):
        r"""maxRe(matrix self) -> double"""
        return _pygamma.matrix_maxRe(self)

    def maxIm(self):
        r"""maxIm(matrix self) -> double"""
        return _pygamma.matrix_maxIm(self)

    def maxZ(self):
        r"""maxZ(matrix self) -> complex"""
        return _pygamma.matrix_maxZ(self)

    def minRe(self):
        r"""minRe(matrix self) -> double"""
        return _pygamma.matrix_minRe(self)

    def minIm(self):
        r"""minIm(matrix self) -> double"""
        return _pygamma.matrix_minIm(self)

    def minZ(self):
        r"""minZ(matrix self) -> complex"""
        return _pygamma.matrix_minZ(self)

    def trace(self, *args):
        r"""
        trace(matrix self) -> complex
        trace(matrix self, matrix mx2) -> complex
        """
        return _pygamma.matrix_trace(self, *args)

    def det(self):
        r"""det(matrix self) -> complex"""
        return _pygamma.matrix_det(self)

    def FFT(self):
        r"""FFT(matrix self) -> matrix"""
        return _pygamma.matrix_FFT(self)

    def IFFT(self):
        r"""IFFT(matrix self) -> matrix"""
        return _pygamma.matrix_IFFT(self)

    @staticmethod
    def Header(hf):
        r"""Header(bool hf)"""
        return _pygamma.matrix_Header(hf)

    @staticmethod
    def PrintRI(pi):
        r"""PrintRI(bool pi)"""
        return _pygamma.matrix_PrintRI(pi)

    @staticmethod
    def PrintAll(pa):
        r"""PrintAll(bool pa)"""
        return _pygamma.matrix_PrintAll(pa)

    @staticmethod
    def PictDim(pd):
        r"""PictDim(int pd)"""
        return _pygamma.matrix_PictDim(pd)

    @staticmethod
    def PrintVal(pv):
        r"""PrintVal(bool pv)"""
        return _pygamma.matrix_PrintVal(pv)

    @staticmethod
    def PrintCols(cl):
        r"""PrintCols(int cl)"""
        return _pygamma.matrix_PrintCols(cl)

    @staticmethod
    def PrintRows(rl):
        r"""PrintRows(int rl)"""
        return _pygamma.matrix_PrintRows(rl)

    def ask(self, *args):
        r"""ask(matrix self, matrix_type const t=n_matrix_type)"""
        return _pygamma.matrix_ask(self, *args)

    def resize(self, i, j):
        r"""resize(matrix self, int i, int j) -> matrix"""
        return _pygamma.matrix_resize(self, i, j)

    def diagonal_form(self):
        r"""diagonal_form(matrix self) -> matrix"""
        return _pygamma.matrix_diagonal_form(self)

    def same_reference_as(self, mx):
        r"""same_reference_as(matrix self, matrix mx) -> bool"""
        return _pygamma.matrix_same_reference_as(self, mx)

    def status(self, full=0):
        r"""status(matrix self, int full=0)"""
        return _pygamma.matrix_status(self, full)

    def BlockDiag(self, BD, U):
        r"""BlockDiag(matrix self, matrix BD, IntVector U) -> IntVector"""
        return _pygamma.matrix_BlockDiag(self, BD, U)

    def SymTriDiag(self, HTD, U):
        r"""SymTriDiag(matrix self, matrix HTD, matrix U)"""
        return _pygamma.matrix_SymTriDiag(self, HTD, U)

    def HermTriDiag(self, STD, U):
        r"""HermTriDiag(matrix self, matrix STD, matrix U)"""
        return _pygamma.matrix_HermTriDiag(self, STD, U)

    def SymDiag(self, SD, U):
        r"""SymDiag(matrix self, matrix SD, matrix U)"""
        return _pygamma.matrix_SymDiag(self, SD, U)

    def Diagonalize(self, D, U):
        r"""Diagonalize(matrix self, matrix D, matrix U)"""
        return _pygamma.matrix_Diagonalize(self, D, U)

    def TestEigenSystem(self, pf=1):
        r"""TestEigenSystem(matrix self, int pf=1)"""
        return _pygamma.matrix_TestEigenSystem(self, pf)

    def TestTransform(self, T, S, pf=1):
        r"""TestTransform(matrix self, matrix T, matrix S, int pf=1)"""
        return _pygamma.matrix_TestTransform(self, T, S, pf)

    def ColumnNorms(self):
        r"""ColumnNorms(matrix self) -> DoubleVector"""
        return _pygamma.matrix_ColumnNorms(self)

    def TestIdentity(self, TotalDev):
        r"""TestIdentity(matrix self, complex TotalDev) -> DoubleVector"""
        return _pygamma.matrix_TestIdentity(self, TotalDev)

    def TestUnitary(self, ostr):
        r"""TestUnitary(matrix self, std::ostream & ostr) -> matrix"""
        return _pygamma.matrix_TestUnitary(self, ostr)

    def TestUTransform(self, T, U):
        r"""TestUTransform(matrix self, matrix T, matrix U) -> matrix"""
        return _pygamma.matrix_TestUTransform(self, T, U)

    def __eq__(self, mx):
        r"""__eq__(matrix self, matrix mx) -> bool"""
        return _pygamma.matrix___eq__(self, mx)

    def __ne__(self, mx):
        r"""__ne__(matrix self, matrix mx) -> bool"""
        return _pygamma.matrix___ne__(self, mx)

    def __lt__(self, mx):
        r"""__lt__(matrix self, matrix mx) -> bool"""
        return _pygamma.matrix___lt__(self, mx)

    def __gt__(self, mx):
        r"""__gt__(matrix self, matrix mx) -> bool"""
        return _pygamma.matrix___gt__(self, mx)


    def __str__(self):

        mmm = []
        rr = self.rows()
        cc = self.cols()

        if self.is_real():
            for r in range(rr):
                mmm.append([])
                for c in range(cc):
                    ij = self.getRe(r,c)
                    (mmm[r]).append( ij )
        else:
            for r in range(rr):
                mmm.append([])
                for c in range(cc):
                    ij = self.get(r,c)
                    (mmm[r]).append( ij.real()+ij.imag()*1j )

        mmm = numpy.array(mmm)
        mmm_str = mmm.__str__()
        del mmm
        return  mmm_str 


    def toList( self ):

        mmm = []
        rr = self.rows()
        cc = self.cols()

        if self.is_real():    
            for r in range(rr):
                mmm.append([])
                for c in range(cc):
                    ij = self.getRe(r,c)
                    (mmm[r]).append( ij )
        else:   
            for r in range(rr):
                mmm.append([])
                for c in range(cc):
                    ij = self.get(r,c)
                    (mmm[r]).append( ij.real()+ij.imag()*1j )    
        return  mmm 


    def __repr__( self ):

        mmm = []
        rr = self.rows()
        cc = self.cols()

        if self.is_real():
            for r in range(rr):
                mmm.append([])
                for c in range(cc):
                    ij = self.getRe(r,c)
                    (mmm[r]).append( ij )
        else:
            for r in range(rr):
                mmm.append([])
                for c in range(cc):
                    ij = self.get(r,c)
                    (mmm[r]).append( ij.real()+ij.imag()*1j )

        mmm = numpy.array(mmm)

        return mmm.__repr__()


    def toNParray( self ):

        rr = self.rows()
        cc = self.cols()

        if self.is_real():
            mmm = numpy.zeros((rr,cc))
            for r in range(rr):
                for c in range(cc):
                    ij = self.getRe(r,c)
                    mmm[r][c] = ij
        else:
            mmm = numpy.zeros((rr,cc), dtype=numpy.complex128)
            for r in range(rr):
                for c in range(cc):
                    ij = self.get(r,c)
                    mmm[r][c] =  ij.real()+ij.imag()*1j
        return mmm


    def __add__( self, val ):
        if isinstance( val, matrix ):
    #        print "matrix:: add_matrix"
            return( self.add_matrix(val))

        if isinstance(val,gen_op):
    #       print "matrix:: matix + genop"
           return( matrix_plus_genop(self,val))


    def __sub__( self, val ):
        if isinstance( val, matrix ):
    #        print "matrix:: sub_matrix"
            return( self.sub_matrix(val))

        if isinstance(val,gen_op):
    #       print "matrix:: matrix - gen_op"
           return( matrix_minus_genop(self,val))



# Register matrix in _pygamma:
_pygamma.matrix_swigregister(matrix)

def matrix_Header(hf):
    r"""matrix_Header(bool hf)"""
    return _pygamma.matrix_Header(hf)

def matrix_PrintRI(pi):
    r"""matrix_PrintRI(bool pi)"""
    return _pygamma.matrix_PrintRI(pi)

def matrix_PrintAll(pa):
    r"""matrix_PrintAll(bool pa)"""
    return _pygamma.matrix_PrintAll(pa)

def matrix_PictDim(pd):
    r"""matrix_PictDim(int pd)"""
    return _pygamma.matrix_PictDim(pd)

def matrix_PrintVal(pv):
    r"""matrix_PrintVal(bool pv)"""
    return _pygamma.matrix_PrintVal(pv)

def matrix_PrintCols(cl):
    r"""matrix_PrintCols(int cl)"""
    return _pygamma.matrix_PrintCols(cl)

def matrix_PrintRows(rl):
    r"""matrix_PrintRows(int rl)"""
    return _pygamma.matrix_PrintRows(rl)

class row_vector(matrix):
    r"""Proxy of C++ row_vector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> row_vector
        __init__(self, i) -> row_vector

        Parameters
        ----------
        i: int

        __init__(self, i, z) -> row_vector

        Parameters
        ----------
        i: int
        z: complex const &

        __init__(self, i, d) -> row_vector

        Parameters
        ----------
        i: int
        d: double

        __init__(self, rvec) -> row_vector

        Parameters
        ----------
        rvec: row_vector const &

        """
        _pygamma.row_vector_swiginit(self, _pygamma.new_row_vector(*args))
    __swig_destroy__ = _pygamma.delete_row_vector

    def __call__(self, i):
        r"""
        __call__(self, i) -> complex

        Parameters
        ----------
        i: int

        """
        return _pygamma.row_vector___call__(self, i)

    def get(self, i):
        r"""
        get(self, i) -> complex

        Parameters
        ----------
        i: int

        """
        return _pygamma.row_vector_get(self, i)

    def getRe(self, i):
        r"""
        getRe(self, i) -> double

        Parameters
        ----------
        i: int

        """
        return _pygamma.row_vector_getRe(self, i)

    def getIm(self, i):
        r"""
        getIm(self, i) -> double

        Parameters
        ----------
        i: int

        """
        return _pygamma.row_vector_getIm(self, i)

    def put(self, z, i):
        r"""
        put(self, z, i)

        Parameters
        ----------
        z: complex const &
        i: int

        """
        return _pygamma.row_vector_put(self, z, i)

    def elements(self):
        r"""elements(self) -> int"""
        return _pygamma.row_vector_elements(self)

    def size(self):
        r"""size(self) -> int"""
        return _pygamma.row_vector_size(self)

    def __add__(self, rvec):
        r"""
        __add__(self, rvec) -> row_vector

        Parameters
        ----------
        rvec: row_vector const &

        """
        return _pygamma.row_vector___add__(self, rvec)

    def __sub__(self, rvec):
        r"""
        __sub__(self, rvec) -> row_vector

        Parameters
        ----------
        rvec: row_vector const &

        """
        return _pygamma.row_vector___sub__(self, rvec)

    def __mul__(self, *args):
        r"""
        __mul__(self, cvec) -> complex

        Parameters
        ----------
        cvec: col_vector const &

        __mul__(self, z) -> row_vector

        Parameters
        ----------
        z: complex const &

        __mul__(self, d) -> row_vector

        Parameters
        ----------
        d: double

        """
        return _pygamma.row_vector___mul__(self, *args)

    def __iadd__(self, rvec1):
        r"""
        __iadd__(self, rvec1) -> row_vector

        Parameters
        ----------
        rvec1: row_vector const &

        """
        return _pygamma.row_vector___iadd__(self, rvec1)

    def __isub__(self, rvec1):
        r"""
        __isub__(self, rvec1) -> row_vector

        Parameters
        ----------
        rvec1: row_vector const &

        """
        return _pygamma.row_vector___isub__(self, rvec1)

    def __imul__(self, *args):
        r"""
        __imul__(self, d) -> row_vector

        Parameters
        ----------
        d: double

        __imul__(self, z) -> row_vector

        Parameters
        ----------
        z: complex const &

        """
        return _pygamma.row_vector___imul__(self, *args)

    def __itruediv__(self, *args):
        return _pygamma.row_vector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def differential(self):
        r"""differential(self) -> row_vector"""
        return _pygamma.row_vector_differential(self)

    def norm(self):
        r"""norm(self) -> double"""
        return _pygamma.row_vector_norm(self)

    def maxRe(self):
        r"""maxRe(self) -> double"""
        return _pygamma.row_vector_maxRe(self)

    def maxIm(self):
        r"""maxIm(self) -> double"""
        return _pygamma.row_vector_maxIm(self)

    def maxZ(self):
        r"""maxZ(self) -> complex"""
        return _pygamma.row_vector_maxZ(self)

    def minRe(self):
        r"""minRe(self) -> double"""
        return _pygamma.row_vector_minRe(self)

    def minIm(self):
        r"""minIm(self) -> double"""
        return _pygamma.row_vector_minIm(self)

    def minZ(self):
        r"""minZ(self) -> complex"""
        return _pygamma.row_vector_minZ(self)

    def max(self, type=0):
        r"""
        max(self, type=0) -> int

        Parameters
        ----------
        type: int

        """
        return _pygamma.row_vector_max(self, type)

    def min(self, type=0):
        r"""
        min(self, type=0) -> int

        Parameters
        ----------
        type: int

        """
        return _pygamma.row_vector_min(self, type)

    def flip(self):
        r"""flip(self)"""
        return _pygamma.row_vector_flip(self)

    def sum(self, *args):
        r"""
        sum(self) -> complex
        sum(self, st, ne) -> complex

        Parameters
        ----------
        st: int
        ne: int

        """
        return _pygamma.row_vector_sum(self, *args)

    def zero(self):
        r"""zero(self)"""
        return _pygamma.row_vector_zero(self)

    def sort(self, type=0):
        r"""
        sort(self, type=0) -> IntVector

        Parameters
        ----------
        type: int

        """
        return _pygamma.row_vector_sort(self, type)

    def product(self, *args):
        r"""
        product(self) -> row_vector
        product(self, cvec2) -> row_vector

        Parameters
        ----------
        cvec2: row_vector const &

        product(self, rvec) -> row_vector

        Parameters
        ----------
        rvec: col_vector const &

        """
        return _pygamma.row_vector_product(self, *args)

    def FFT(self):
        r"""FFT(self) -> row_vector"""
        return _pygamma.row_vector_FFT(self)

    def IFFT(self):
        r"""IFFT(self) -> row_vector"""
        return _pygamma.row_vector_IFFT(self)

    def scalar_product(self, *args):
        r"""
        scalar_product(self) -> double
        scalar_product(self, cvec2) -> complex

        Parameters
        ----------
        cvec2: row_vector const &

        scalar_product(self, rvec) -> complex

        Parameters
        ----------
        rvec: col_vector const &

        """
        return _pygamma.row_vector_scalar_product(self, *args)

    def hdrString(self):
        r"""hdrString(self) -> std::string"""
        return _pygamma.row_vector_hdrString(self)
    SMIS = _pygamma.row_vector_SMIS
    
    SIEMENS = _pygamma.row_vector_SIEMENS
    
    SIEMENS_NOHDR = _pygamma.row_vector_SIEMENS_NOHDR
    
    PLAIN_ASCII = _pygamma.row_vector_PLAIN_ASCII
    
    ASCII_MT_DEG = _pygamma.row_vector_ASCII_MT_DEG
    
    SVS = _pygamma.row_vector_SVS
    

    @staticmethod
    def read_pulse(filename, PulseFmt):
        r"""
        read_pulse(filename, PulseFmt) -> row_vector

        Parameters
        ----------
        filename: std::string const
        PulseFmt: int const

        """
        return _pygamma.row_vector_read_pulse(filename, PulseFmt)

    def ask(self):
        r"""ask(self)"""
        return _pygamma.row_vector_ask(self)


    @classmethod
    def from_list(class_object, row_vector_list ):
        co = class_object(len(row_vector_list))
        for i,v in enumerate(row_vector_list):
            co.put(pygamma.complex(v.real, v.imag),i)
        return co


    def __str__(self):

        ll = self.size()
        if ll == 0:
            rrr = numpy.array([])
        else:
            if not self.is_real():
                rrr = numpy.zeros(ll, dtype = numpy.complex128)
                for i in range(ll):
                    rrr[i] = self.getRe(i)+1j*self.getIm(i)
            else:
                rrr = numpy.zeros(ll );

                for i in range(ll):
                   rrr[i] = self.getRe(i)

        return rrr.__str__()



    def __repr__(self):

        ll = self.size()
        if ll == 0:
            rrr = numpy.array([])
        else:
            if not self.is_real():
                rrr = numpy.zeros(ll, dtype = numpy.complex128)
                for i in range(ll):
                    rrr[i] = self.getRe(i)+1j*self.getIm(i)
            else:
                rrr = numpy.zeros(ll );

                for i in range(ll):
                   rrr[i] = self.getRe(i)

        return rrr.__repr__()


    def toNParray(self):

        ll = self.size()

        if ll == 0:
            rrr = numpy.array([])
        else:
            if not self.is_real():
                rrr = numpy.zeros(ll, dtype = numpy.complex128)
                for i in range(ll):
                    rrr[i] = self.getRe(i)+1j*self.getIm(i)
            else:
                rrr = numpy.zeros(ll);

                for i in range(ll):
                   rrr[i] = self.getRe(i)
        return rrr


    def __getitem__( self, sss ):
        """ Returns a new row_vector using the numpy slice notation
            by creating a temporary numpy array of the row_vector
        """

        if isinstance(sss,slice):
            nnn = self.toNParray()
            nnn = nnn[sss.start:sss.stop:sss.step]

            array_length = len(nnn)
            new_row_vector = row_vector(array_length)

            for i in range(array_length):
                new_row_vector.put( complex(nnn[i].real,nnn[i].imag), i)

            del nnn
            return( new_row_vector )

        elif isinstance( sss, int ):
            valr = self.getRe(sss)
            vali = self.getIm(sss)
            return( complex( valr, vali ))


    def __setitem__( self, i, v ):
        """Sets the pygamma complex value, int or float v at position i in row vector

           rrr = pygamma.row_vector(10)
           rrr[3] = pygamma.complex( 7, 5 )
           rrr[2] = 1
           rrr[1] = 9.0

        """
        if isinstance(v,float) or isinstance(v, int ):
            self.put( complex(v,0), i )
        elif isinstance(v,complex):
            self.put( v, i )


    def __len__(self):
        return( self.size())


    def toList(self):
        mmm = []
        size = self.size()

        if not self.is_real():
            for i in range(size):
                ij = self.get(i)
                mmm.append( ij.real()+ij.imag()*1j )
        else:
            for i in range(size):
                ij = self.getRe(i)
                mmm.append( ij )

        return  mmm 


    def Real(self):
        """Returns numpy array of Real part of pygamma row_vector"""
        size = self.size()
        sss = numpy.zeros( size, dtype=numpy.float32)
        for i in range(size):
            sss[i] = self.getRe(i) 
        return( sss )


    def Imag(self):
        """Returns numpy array of imaginary part of pygamma row_vector"""
        size = self.size()
        sss =  numpy.zeros( size, dtype=numpy.float32)
        for i in range(size):
            sss[i] = self.getIm(i) 
        return( sss )


    def fft_1D(self):
        """FFT of row vector returning a pygamma row_vector"""
        spec = self.FFT()
        size = spec.pts()

        sss = row_vector( size, complex( 0 ))
        for i in range(size):
            sss.put( spec.get(0,i), i )
        return( sss )





    def __rmul__(self, val ):

        if isinstance( val, int ) or isinstance( val, float ):
            return( double_times_rowvector( val, self))

        if isinstance( val, complex ):
            return( complex_times_rowvector( val, self))







# Register row_vector in _pygamma:
_pygamma.row_vector_swigregister(row_vector)

def complex_times_rowvector(z, rvec):
    r"""
    complex_times_rowvector(z, rvec) -> row_vector

    Parameters
    ----------
    z: complex const &
    rvec: row_vector const &

    """
    return _pygamma.complex_times_rowvector(z, rvec)

def double_times_rowvector(d, rvec):
    r"""
    double_times_rowvector(d, rvec) -> row_vector

    Parameters
    ----------
    d: double
    rvec: row_vector const &

    """
    return _pygamma.double_times_rowvector(d, rvec)

def pyG_FFT(rvec):
    r"""
    pyG_FFT(rvec) -> row_vector

    Parameters
    ----------
    rvec: row_vector const &

    """
    return _pygamma.pyG_FFT(rvec)

def pyG_IFFT(rvec):
    r"""
    pyG_IFFT(rvec) -> row_vector

    Parameters
    ----------
    rvec: row_vector const &

    """
    return _pygamma.pyG_IFFT(rvec)

def row_vector_read_pulse(filename, PulseFmt):
    r"""
    row_vector_read_pulse(filename, PulseFmt) -> row_vector

    Parameters
    ----------
    filename: std::string const
    PulseFmt: int const

    """
    return _pygamma.row_vector_read_pulse(filename, PulseFmt)

class col_vector(matrix):
    r"""Proxy of C++ col_vector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(col_vector self) -> col_vector
        __init__(col_vector self, int i) -> col_vector
        __init__(col_vector self, int i, double d) -> col_vector
        __init__(col_vector self, int i, complex z) -> col_vector
        __init__(col_vector self, col_vector cvec) -> col_vector
        """
        _pygamma.col_vector_swiginit(self, _pygamma.new_col_vector(*args))
    __swig_destroy__ = _pygamma.delete_col_vector

    def __call__(self, i):
        r"""__call__(col_vector self, int i) -> complex"""
        return _pygamma.col_vector___call__(self, i)

    def get(self, i):
        r"""get(col_vector self, int i) -> complex"""
        return _pygamma.col_vector_get(self, i)

    def getRe(self, i):
        r"""getRe(col_vector self, int i) -> double"""
        return _pygamma.col_vector_getRe(self, i)

    def getIm(self, i):
        r"""getIm(col_vector self, int i) -> double"""
        return _pygamma.col_vector_getIm(self, i)

    def put(self, z, i):
        r"""put(col_vector self, complex z, int i)"""
        return _pygamma.col_vector_put(self, z, i)

    def elements(self):
        r"""elements(col_vector self) -> int"""
        return _pygamma.col_vector_elements(self)

    def size(self):
        r"""size(col_vector self) -> int"""
        return _pygamma.col_vector_size(self)

    def __add__(self, cvec):
        r"""__add__(col_vector self, col_vector cvec) -> col_vector"""
        return _pygamma.col_vector___add__(self, cvec)

    def __sub__(self, cvec):
        r"""__sub__(col_vector self, col_vector cvec) -> col_vector"""
        return _pygamma.col_vector___sub__(self, cvec)

    def __mul__(self, *args):
        r"""
        __mul__(col_vector self, complex z) -> col_vector
        __mul__(col_vector self, double d) -> col_vector
        """
        return _pygamma.col_vector___mul__(self, *args)

    def __iadd__(self, cvec1):
        r"""__iadd__(col_vector self, col_vector cvec1) -> col_vector"""
        return _pygamma.col_vector___iadd__(self, cvec1)

    def __isub__(self, cvec1):
        r"""__isub__(col_vector self, col_vector cvec1) -> col_vector"""
        return _pygamma.col_vector___isub__(self, cvec1)

    def __imul__(self, *args):
        r"""
        __imul__(col_vector self, complex z) -> col_vector
        __imul__(col_vector self, double d) -> col_vector
        """
        return _pygamma.col_vector___imul__(self, *args)

    def __itruediv__(self, *args):
        return _pygamma.col_vector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def adjoint(self):
        r"""adjoint(col_vector self) -> col_vector"""
        return _pygamma.col_vector_adjoint(self)

    def transpose(self):
        r"""transpose(col_vector self) -> col_vector"""
        return _pygamma.col_vector_transpose(self)

    def trace(self):
        r"""trace(col_vector self) -> complex"""
        return _pygamma.col_vector_trace(self)

    def differential(self):
        r"""differential(col_vector self) -> col_vector"""
        return _pygamma.col_vector_differential(self)

    def norm(self):
        r"""norm(col_vector self) -> double"""
        return _pygamma.col_vector_norm(self)

    def maxRe(self):
        r"""maxRe(col_vector self) -> double"""
        return _pygamma.col_vector_maxRe(self)

    def maxIm(self):
        r"""maxIm(col_vector self) -> double"""
        return _pygamma.col_vector_maxIm(self)

    def maxZ(self):
        r"""maxZ(col_vector self) -> complex"""
        return _pygamma.col_vector_maxZ(self)

    def minRe(self):
        r"""minRe(col_vector self) -> double"""
        return _pygamma.col_vector_minRe(self)

    def minIm(self):
        r"""minIm(col_vector self) -> double"""
        return _pygamma.col_vector_minIm(self)

    def minZ(self):
        r"""minZ(col_vector self) -> complex"""
        return _pygamma.col_vector_minZ(self)

    def max(self, type=0):
        r"""max(col_vector self, int type=0) -> int"""
        return _pygamma.col_vector_max(self, type)

    def min(self, type=0):
        r"""min(col_vector self, int type=0) -> int"""
        return _pygamma.col_vector_min(self, type)

    def flip(self):
        r"""flip(col_vector self)"""
        return _pygamma.col_vector_flip(self)

    def sum(self, *args):
        r"""
        sum(col_vector self) -> complex
        sum(col_vector self, int st, int ne) -> complex
        """
        return _pygamma.col_vector_sum(self, *args)

    def zero(self):
        r"""zero(col_vector self)"""
        return _pygamma.col_vector_zero(self)

    def sort(self, type=0):
        r"""sort(col_vector self, int type=0) -> IntVector"""
        return _pygamma.col_vector_sort(self, type)

    def product(self, *args):
        r"""
        product(col_vector self) -> col_vector
        product(col_vector self, row_vector rvec) -> col_vector
        product(col_vector self, col_vector cvec2) -> col_vector
        """
        return _pygamma.col_vector_product(self, *args)

    def scalar_product(self, *args):
        r"""
        scalar_product(col_vector self) -> double
        scalar_product(col_vector self, col_vector cvec2) -> complex
        scalar_product(col_vector self, row_vector rvec) -> complex
        """
        return _pygamma.col_vector_scalar_product(self, *args)

    def hdrString(self):
        r"""hdrString(col_vector self) -> std::string"""
        return _pygamma.col_vector_hdrString(self)

    def ask(self):
        r"""ask(col_vector self)"""
        return _pygamma.col_vector_ask(self)




    @classmethod
    def from_list(class_object, col_vector_list ):
        co = class_object(len(col_vector_list))
        for i,v in enumerate(col_vector_list):
            co.put(pygamma.complex(v.real, v.imag),i)
        return co




    def __str__(self):
        sss = "["

        if self.size() == 0:
            return( "[]" )


        for i in range( self.size()-1 ):

            rr = self.getRe(i)
            ii = self.getIm(i)

            sss = sss + "" + str(rr)
            if ii >= 0.0:
                sss = sss  + "+" + str(ii) + "j, "
            else:
                sss = sss + str(ii) + "j, "

        i = self.size()-1

        rr = self.getRe(i)
        ii = self.getIm(i)

        sss = sss + " "+str(rr)
        if ii >= 0.0:
            sss = sss  + "+" + str(ii) + "j]"
        else:
            sss = sss + str(ii) + "j]"

        return(sss)




    def __repr__(self):

        ll = self.size()

        if ll == 0:
            rrr = numpy.array([])
        else:

            if self.is_real():
                rrr = numpy.zeros(ll );
                for i in range(ll):
                   rrr[i] = self.getRe(i)
            else:
                rrr = numpy.zeros(ll, dtype = numpy.complex128)
                for i in range(ll):
                    rrr[i] = self.getRe(i)+1j*self.getIm(i)



        return "pygamma.col_vector({})".format(rrr.__repr__())   


    def toNParray(self):

        ll = self.size()

        if ll == 0:
            rrr = numpy.array([])
        else:

            if self.is_real():
                rrr = numpy.zeros(ll);
                for i in range(ll):
                   rrr[i] = self.getRe(i)
            else:
                rrr = numpy.zeros(ll, dtype = numpy.complex128)
                for i in range(ll):
                    rrr[i] = self.getRe(i)+1j*self.getIm(i)

        return rrr


    def __getitem__( self, sss ):
        """ Returns a new col_vector using the numpy slice notation
            by creating a temporary numpy array of the col_vector
        """


        if isinstance(sss,slice):
            nnn = self.toNParray()
            nnn = nnn[sss.start:sss.stop:sss.step]

            array_length = len(nnn)
            new_col_vector = col_vector(array_length)

            for i in range(array_length):
                new_col_vector.put( complex(nnn[i].real,nnn[i].imag), i)

            del nnn
            return( new_col_vector )

        elif isinstance( sss, int ):
            valr = self.getRe(sss)
            vali = self.getIm(sss)
            return( complex( valr, vali ))


    def __setitem__( self, i, v ):
        """Sets the pygamma complex value, int or float v at position i in col vector

           rrr = pygamma.col_vector(10)
           rrr[3] = pygamma.complex( 7, 5 )
           rrr[2] = 1
           rrr[1] = 9.0

        """
        if isinstance(v,float) or isinstance(v, int ):
            self.put( complex(v,0), i )
        elif isinstance(v,complex):
            self.put( v, i )



    def __len__(self):
        return( self.size())



    #def __getslice__( self, i,j ):
    #    """Returns a copy of pygamma col_vector between i and j
    #    
    #       rrr = pygamma.col_vector
    #       sss = rrr[i,j]
    #    """
    #
    #    size = j-i
    #    if size < 0:
    #        size = -1*size
    #
    #    sss = col_vector( size, complex( 0 ))
    #
    #    for k in range(size):
    #        sss.put( self.get(k+i), k )
    #    return( sss )




    def toList(self):
        mmm = []
        size = self.size()





        if self.is_real():    
            for i in range(size):
                ij = self.getRe(i)
                mmm.append( ij )

        else:
            for i in range(size):
                ij = self.get(i)
                mmm.append( ij.real()+ij.imag()*1j )

        return  mmm 


    def Real(self):
        """Returns numpy array of Real part of pygamma col_vector"""
        size = self.size()
        sss = numpy.zeros( size, dtype=numpy.float32)
        for i in range(size):
            sss[i] = self.getRe(i) 
        return( sss )




    def Imag(self):
        """Returns numpy array of imaginary part of pygamma col_vector"""
        size = self.size()
        sss =  numpy.zeros( size, dtype=numpy.float32)
        for i in range(size):
            sss[i] = self.getIm(i) 
        return( sss )





    def fft_1D(self):
        """FFT of col vector returning a pygamma col_vector"""
        spec = self.FFT()
        size = spec.pts()

        sss = col_vector( size, complex( 0 ))
        for i in range(size):
            sss.put( spec.get(0,i), i )
        return( sss )

    def __rmul__( self,other ):

    	return( self * other )





# Register col_vector in _pygamma:
_pygamma.col_vector_swigregister(col_vector)

class complex(object):
    r"""Proxy of C++ complex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(complex self) -> complex
        __init__(complex self, double r, double i=0.0) -> complex
        __init__(complex self, complex z) -> complex
        """
        _pygamma.complex_swiginit(self, _pygamma.new_complex(*args))

    def Relem(self):
        r"""Relem(complex self) -> double &"""
        return _pygamma.complex_Relem(self)

    def Ielem(self):
        r"""Ielem(complex self) -> double &"""
        return _pygamma.complex_Ielem(self)

    def Rec(self):
        r"""Rec(complex self) -> double const &"""
        return _pygamma.complex_Rec(self)

    def Imc(self):
        r"""Imc(complex self) -> double const &"""
        return _pygamma.complex_Imc(self)

    def real(self):
        r"""real(complex self) -> double"""
        return _pygamma.complex_real(self)

    def imag(self):
        r"""imag(complex self) -> double"""
        return _pygamma.complex_imag(self)

    def __add__(self, *args):
        r"""
        __add__(complex self) -> complex
        __add__(complex self, complex z) -> complex
        __add__(complex self, double r) -> complex
        """
        return _pygamma.complex___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(complex self, complex z) -> complex
        __iadd__(complex self, double r) -> complex
        """
        return _pygamma.complex___iadd__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(complex self) -> complex
        __sub__(complex self, double r) -> complex
        __sub__(complex self, complex z) -> complex
        """
        return _pygamma.complex___sub__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(complex self, complex z) -> complex
        __isub__(complex self, double r) -> complex
        """
        return _pygamma.complex___isub__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(complex self, complex z) -> complex
        __mul__(complex self, double r) -> complex
        """
        return _pygamma.complex___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(complex self, complex z) -> complex
        __imul__(complex self, double r) -> complex
        """
        return _pygamma.complex___imul__(self, *args)

    def __truediv__(self, *args):
        return _pygamma.complex___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _pygamma.complex___idiv__(self, *args)
    __idiv__ = __itruediv__



    def conj(self):
        r"""conj(complex self) -> complex"""
        return _pygamma.complex_conj(self)

    def conj_times(self, z):
        r"""conj_times(complex self, complex z) -> complex"""
        return _pygamma.complex_conj_times(self, z)

    def Zexp(self):
        r"""Zexp(complex self) -> complex"""
        return _pygamma.complex_Zexp(self)

    def Zsin(self):
        r"""Zsin(complex self) -> complex"""
        return _pygamma.complex_Zsin(self)

    def Zcos(self):
        r"""Zcos(complex self) -> complex"""
        return _pygamma.complex_Zcos(self)

    def Ztan(self):
        r"""Ztan(complex self) -> complex"""
        return _pygamma.complex_Ztan(self)

    def Zasin(self):
        r"""Zasin(complex self) -> complex"""
        return _pygamma.complex_Zasin(self)

    def Zacos(self):
        r"""Zacos(complex self) -> complex"""
        return _pygamma.complex_Zacos(self)

    def Zatan(self):
        r"""Zatan(complex self) -> complex"""
        return _pygamma.complex_Zatan(self)

    def Zsinh(self):
        r"""Zsinh(complex self) -> complex"""
        return _pygamma.complex_Zsinh(self)

    def Zcosh(self):
        r"""Zcosh(complex self) -> complex"""
        return _pygamma.complex_Zcosh(self)

    def Ztanh(self):
        r"""Ztanh(complex self) -> complex"""
        return _pygamma.complex_Ztanh(self)

    def Zasinh(self):
        r"""Zasinh(complex self) -> complex"""
        return _pygamma.complex_Zasinh(self)

    def Zacosh(self):
        r"""Zacosh(complex self) -> complex"""
        return _pygamma.complex_Zacosh(self)

    def Zatanh(self):
        r"""Zatanh(complex self) -> complex"""
        return _pygamma.complex_Zatanh(self)

    @staticmethod
    def Reiphi(TF):
        r"""Reiphi(bool TF)"""
        return _pygamma.complex_Reiphi(TF)

    @staticmethod
    def delim(TF):
        r"""delim(bool TF)"""
        return _pygamma.complex_delim(TF)

    @staticmethod
    def scinot(TF):
        r"""scinot(bool TF)"""
        return _pygamma.complex_scinot(TF)

    @staticmethod
    def digits(digs):
        r"""digits(int digs)"""
        return _pygamma.complex_digits(digs)

    @staticmethod
    def dadp(adp):
        r"""dadp(int adp)"""
        return _pygamma.complex_dadp(adp)

    @staticmethod
    def dlength():
        r"""dlength() -> int"""
        return _pygamma.complex_dlength()

    @staticmethod
    def dformat():
        r"""dformat() -> std::string"""
        return _pygamma.complex_dformat()

    @staticmethod
    def zlength():
        r"""zlength() -> int"""
        return _pygamma.complex_zlength()

    @staticmethod
    def normphase():
        r"""normphase() -> bool"""
        return _pygamma.complex_normphase()

    @staticmethod
    def complex_getf(phase, math, science, digits, digs_aft_dpoint):
        r"""complex_getf(bool & phase, bool & math, bool & science, int & digits, int & digs_aft_dpoint)"""
        return _pygamma.complex_complex_getf(phase, math, science, digits, digs_aft_dpoint)

    def printString(self):
        r"""printString(complex self) -> std::string"""
        return _pygamma.complex_printString(self)

    def write(self, fn):
        r"""write(complex self, std::string const & fn)"""
        return _pygamma.complex_write(self, fn)

    def read(self, fn):
        r"""read(complex self, std::string const & fn)"""
        return _pygamma.complex_read(self, fn)

    def __eq__(self, z):
        r"""__eq__(complex self, complex z) -> bool"""
        return _pygamma.complex___eq__(self, z)

    def __ne__(self, z):
        r"""__ne__(complex self, complex z) -> bool"""
        return _pygamma.complex___ne__(self, z)

    def __lt__(self, z):
        r"""__lt__(complex self, complex z) -> bool"""
        return _pygamma.complex___lt__(self, z)

    def __gt__(self, z):
        r"""__gt__(complex self, complex z) -> bool"""
        return _pygamma.complex___gt__(self, z)


    def __str__(self):
        sss = "("
        sss = sss + str( self.real() ) + "," + str(self.imag()) + ")\n"
        return( sss )


    def __repr__(self):
        sss =""
        sss = "pygamma.complex( " + str( self.real() ) + "," + str(self.imag()) + ")"
        return sss


    def __rmul__( self,other ):

    	return( self * other )



    __swig_destroy__ = _pygamma.delete_complex

# Register complex in _pygamma:
_pygamma.complex_swigregister(complex)

def Swap(z1, z2):
    r"""Swap(complex z1, complex z2)"""
    return _pygamma.Swap(z1, z2)

def complex_Reiphi(TF):
    r"""complex_Reiphi(bool TF)"""
    return _pygamma.complex_Reiphi(TF)

def complex_delim(TF):
    r"""complex_delim(bool TF)"""
    return _pygamma.complex_delim(TF)

def complex_scinot(TF):
    r"""complex_scinot(bool TF)"""
    return _pygamma.complex_scinot(TF)

def complex_digits(digs):
    r"""complex_digits(int digs)"""
    return _pygamma.complex_digits(digs)

def complex_dadp(adp):
    r"""complex_dadp(int adp)"""
    return _pygamma.complex_dadp(adp)

def complex_dlength():
    r"""complex_dlength() -> int"""
    return _pygamma.complex_dlength()

def complex_dformat():
    r"""complex_dformat() -> std::string"""
    return _pygamma.complex_dformat()

def complex_zlength():
    r"""complex_zlength() -> int"""
    return _pygamma.complex_zlength()

def complex_normphase():
    r"""complex_normphase() -> bool"""
    return _pygamma.complex_normphase()

def complex_complex_getf(phase, math, science, digits, digs_aft_dpoint):
    r"""complex_complex_getf(bool & phase, bool & math, bool & science, int & digits, int & digs_aft_dpoint)"""
    return _pygamma.complex_complex_getf(phase, math, science, digits, digs_aft_dpoint)


def DoubleMag(x):
    r"""DoubleMag(double x) -> int"""
    return _pygamma.DoubleMag(x)

def SecUnits(mag, sf):
    r"""SecUnits(int mag, double & sf) -> std::string"""
    return _pygamma.SecUnits(mag, sf)

def HzUnits(mag, sf):
    r"""HzUnits(int mag, double & sf) -> std::string"""
    return _pygamma.HzUnits(mag, sf)

def Mo_vector(*args):
    r"""
    Mo_vector(double Mox=0, double Moy=0, double Moz=1) -> matrix
    Mo_vector(int argc, char *[] argv, matrix Meq, int & qn) -> matrix
    """
    return _pygamma.Mo_vector(*args)

def analyze(tinc, ntimes, do_ss, qn, T1, gamB1, w):
    r"""analyze(double tinc, int & ntimes, int & do_ss, int & qn, double T1, double gamB1, double w)"""
    return _pygamma.analyze(tinc, ntimes, do_ss, qn, T1, gamB1, w)

def TrajTiming(argc, argv, tinc, N, qn, T1, gamB1, w):
    r"""TrajTiming(int argc, char *[] argv, double & tinc, int & N, int & qn, double T1, double gamB1, double w)"""
    return _pygamma.TrajTiming(argc, argv, tinc, N, qn, T1, gamB1, w)
class BlochSys(object):
    r"""Proxy of C++ BlochSys class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BlochSys self, int spins=0) -> BlochSys
        __init__(BlochSys self, BlochSys sys) -> BlochSys
        __init__(BlochSys self, double w, double R1, double R2) -> BlochSys
        __init__(BlochSys self, DoubleVector SH, DoubleVector R1s, DoubleVector R2s) -> BlochSys
        __init__(BlochSys self, DoubleVector SH, std::vector< Isotope,std::allocator< Isotope > > const & Is, DoubleVector R1s, DoubleVector R2s) -> BlochSys
        __init__(BlochSys self, DoubleVector SH, DoubleVector R1s, DoubleVector R2s, DoubleVector Ks) -> BlochSys
        __init__(BlochSys self, DoubleVector SH, std::vector< Isotope,std::allocator< Isotope > > const & Is, DoubleVector R1s, DoubleVector R2s, DoubleVector Ks) -> BlochSys
        __init__(BlochSys self, spin_system sys, RBasic Rs) -> BlochSys
        __init__(BlochSys self, spin_system sys, matrix Ks) -> BlochSys
        __init__(BlochSys self, spin_system sys, RBasic Rs, matrix Ks) -> BlochSys
        __init__(BlochSys self, TTable1D TT, std::string const & Iso=DEFISO) -> BlochSys
        """
        _pygamma.BlochSys_swiginit(self, _pygamma.new_BlochSys(*args))
    __swig_destroy__ = _pygamma.delete_BlochSys

    def __assign__(self, sys):
        r"""__assign__(BlochSys self, BlochSys sys) -> BlochSys"""
        return _pygamma.BlochSys___assign__(self, sys)

    def NIso(self):
        r"""NIso(BlochSys self) -> int"""
        return _pygamma.BlochSys_NIso(self)

    def IsoMaxLength(self):
        r"""IsoMaxLength(BlochSys self) -> int"""
        return _pygamma.BlochSys_IsoMaxLength(self)

    def NSpins(self):
        r"""NSpins(BlochSys self) -> int"""
        return _pygamma.BlochSys_NSpins(self)

    def R1(self, i):
        r"""R1(BlochSys self, int i) -> double"""
        return _pygamma.BlochSys_R1(self, i)

    def T1(self, i):
        r"""T1(BlochSys self, int i) -> double"""
        return _pygamma.BlochSys_T1(self, i)

    def R2(self, i):
        r"""R2(BlochSys self, int i) -> double"""
        return _pygamma.BlochSys_R2(self, i)

    def T2(self, i):
        r"""T2(BlochSys self, int i) -> double"""
        return _pygamma.BlochSys_T2(self, i)

    def LW(self, i):
        r"""LW(BlochSys self, int i) -> double"""
        return _pygamma.BlochSys_LW(self, i)

    def MaxExchange(self):
        r"""MaxExchange(BlochSys self) -> double"""
        return _pygamma.BlochSys_MaxExchange(self)

    def Norms(self, *args):
        r"""
        Norms(BlochSys self) -> DoubleVector
        Norms(BlochSys self, DoubleVector Ns)
        """
        return _pygamma.BlochSys_Norms(self, *args)

    def Norm(self, *args):
        r"""
        Norm(BlochSys self, int i) -> double
        Norm(BlochSys self, double nv, int i)
        """
        return _pygamma.BlochSys_Norm(self, *args)

    def H(self, *args):
        r"""
        H(BlochSys self) -> matrix
        H(BlochSys self, double gamB1, double w=0, double phi=0) -> matrix
        """
        return _pygamma.BlochSys_H(self, *args)

    def B(self, *args):
        r"""
        B(BlochSys self) -> matrix
        B(BlochSys self, double gamB1, double w=0, double phi=0) -> matrix
        """
        return _pygamma.BlochSys_B(self, *args)

    def R(self):
        r"""R(BlochSys self) -> matrix"""
        return _pygamma.BlochSys_R(self)

    def K(self):
        r"""K(BlochSys self) -> matrix"""
        return _pygamma.BlochSys_K(self)

    def Meq(self):
        r"""Meq(BlochSys self) -> MagVec"""
        return _pygamma.BlochSys_Meq(self)

    def Mo(self):
        r"""Mo(BlochSys self) -> MagVec"""
        return _pygamma.BlochSys_Mo(self)

    def Mx(self):
        r"""Mx(BlochSys self) -> MagVec"""
        return _pygamma.BlochSys_Mx(self)

    def My(self):
        r"""My(BlochSys self) -> MagVec"""
        return _pygamma.BlochSys_My(self)

    def Mz(self):
        r"""Mz(BlochSys self) -> MagVec"""
        return _pygamma.BlochSys_Mz(self)

    def Mss(self, *args):
        r"""
        Mss(BlochSys self, matrix L, matrix R) -> MagVec
        Mss(BlochSys self, matrix L, matrix R, col_vector Meq) -> MagVec
        """
        return _pygamma.BlochSys_Mss(self, *args)

    def DetectMu(self, *args):
        r"""
        DetectMu(BlochSys self, int u) -> row_vector
        DetectMu(BlochSys self, int k, int u) -> row_vector
        DetectMu(BlochSys self, std::string const & I, int u) -> row_vector
        """
        return _pygamma.BlochSys_DetectMu(self, *args)

    def DetectMx(self, *args):
        r"""
        DetectMx(BlochSys self) -> row_vector
        DetectMx(BlochSys self, int i) -> row_vector
        DetectMx(BlochSys self, std::string const & I) -> row_vector
        """
        return _pygamma.BlochSys_DetectMx(self, *args)

    def DetectMy(self, *args):
        r"""
        DetectMy(BlochSys self) -> row_vector
        DetectMy(BlochSys self, int i) -> row_vector
        DetectMy(BlochSys self, std::string const & I) -> row_vector
        """
        return _pygamma.BlochSys_DetectMy(self, *args)

    def DetectMz(self, *args):
        r"""
        DetectMz(BlochSys self) -> row_vector
        DetectMz(BlochSys self, int i) -> row_vector
        DetectMz(BlochSys self, std::string const & I) -> row_vector
        """
        return _pygamma.BlochSys_DetectMz(self, *args)

    def size(self):
        r"""size(BlochSys self) -> int"""
        return _pygamma.BlochSys_size(self)

    def read(self, *args):
        r"""
        read(BlochSys self, std::string const & fn, int idx=-1, int warn=2) -> bool
        read(BlochSys self, ParameterSet pset, int idx=-1, int warn=2) -> bool
        """
        return _pygamma.BlochSys_read(self, *args)

    def ask_read(self, *args):
        r"""
        ask_read(BlochSys self, int argc, char *[] argv, int argn) -> std::string
        ask_read(BlochSys self, int argc, char *[] argv, int argn, std::string const & _def) -> std::string
        """
        return _pygamma.BlochSys_ask_read(self, *args)

# Register BlochSys in _pygamma:
_pygamma.BlochSys_swigregister(BlochSys)
complex0 = cvar.complex0
complex1 = cvar.complex1
complexi = cvar.complexi

class MagVec(col_vector):
    r"""Proxy of C++ MagVec class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MagVec self, int N=0) -> MagVec
        __init__(MagVec self, MagVec MV) -> MagVec
        __init__(MagVec self, col_vector CV) -> MagVec
        __init__(MagVec self, double Mx, double My, double Mz) -> MagVec
        __init__(MagVec self, coord M) -> MagVec
        __init__(MagVec self, double Mx1, double My1, double Mz1, double Mx2, double My2, double Mz2) -> MagVec
        __init__(MagVec self, coord M1, coord M2) -> MagVec
        __init__(MagVec self, std::vector< coord,std::allocator< coord > > const & Ms) -> MagVec
        """
        _pygamma.MagVec_swiginit(self, _pygamma.new_MagVec(*args))

    def __add__(self, M1):
        r"""__add__(MagVec self, MagVec M1) -> MagVec"""
        return _pygamma.MagVec___add__(self, M1)

    def __iadd__(self, M1):
        r"""__iadd__(MagVec self, MagVec M1) -> MagVec"""
        return _pygamma.MagVec___iadd__(self, M1)

    def __sub__(self, M1):
        r"""__sub__(MagVec self, MagVec M1) -> MagVec"""
        return _pygamma.MagVec___sub__(self, M1)

    def __isub__(self, M1):
        r"""__isub__(MagVec self, MagVec M1) -> MagVec"""
        return _pygamma.MagVec___isub__(self, M1)

    def NComps(self):
        r"""NComps(MagVec self) -> int"""
        return _pygamma.MagVec_NComps(self)

    def x(self, cmp=0):
        r"""x(MagVec self, int cmp=0) -> double"""
        return _pygamma.MagVec_x(self, cmp)

    def y(self, cmp=0):
        r"""y(MagVec self, int cmp=0) -> double"""
        return _pygamma.MagVec_y(self, cmp)

    def z(self, cmp=0):
        r"""z(MagVec self, int cmp=0) -> double"""
        return _pygamma.MagVec_z(self, cmp)

    def norm(self, cmp=0):
        r"""norm(MagVec self, int cmp=0) -> double"""
        return _pygamma.MagVec_norm(self, cmp)

    def theta(self, cmp=0):
        r"""theta(MagVec self, int cmp=0) -> double"""
        return _pygamma.MagVec_theta(self, cmp)

    def phi(self, cmp=0):
        r"""phi(MagVec self, int cmp=0) -> double"""
        return _pygamma.MagVec_phi(self, cmp)

    def Norms(self, *args):
        r"""
        Norms(MagVec self) -> DoubleVector
        Norms(MagVec self, DoubleVector Ns)
        """
        return _pygamma.MagVec_Norms(self, *args)

    def Norm(self, *args):
        r"""
        Norm(MagVec self, int i) -> double
        Norm(MagVec self, double nv, int i)
        """
        return _pygamma.MagVec_Norm(self, *args)

    def PSetAdd(self, pset, pfx=-1):
        r"""PSetAdd(MagVec self, ParameterSet pset, int pfx=-1) -> bool"""
        return _pygamma.MagVec_PSetAdd(self, pset, pfx)

    def write(self, *args):
        r"""
        write(MagVec self, std::string const & filename, int pfx=-1, int warn=2) -> bool
        write(MagVec self, std::ofstream & ofstr, int pfx=-1, int warn=2) -> bool
        """
        return _pygamma.MagVec_write(self, *args)

    def read(self, *args):
        r"""
        read(MagVec self, std::string const & fn, int idx=-1, int warn=2) -> bool
        read(MagVec self, ParameterSet pset, int idx=-1, int warn=2) -> bool
        """
        return _pygamma.MagVec_read(self, *args)

    def ask_read(self, *args):
        r"""
        ask_read(MagVec self, int argc, char *[] argv, int argn) -> std::string
        ask_read(MagVec self, int argc, char *[] argv, int argn, std::string const & _def) -> std::string
        """
        return _pygamma.MagVec_ask_read(self, *args)

    def printStrings(self):
        r"""printStrings(MagVec self) -> StringVector"""
        return _pygamma.MagVec_printStrings(self)

    def Mx(self, *args):
        r"""
        Mx(MagVec self, int cmp) -> double
        Mx(MagVec self, int cmp, double mx)
        Mx(MagVec self) -> MagVec
        """
        return _pygamma.MagVec_Mx(self, *args)

    def My(self, *args):
        r"""
        My(MagVec self, int cmp) -> double
        My(MagVec self, int cmp, double my)
        My(MagVec self) -> MagVec
        """
        return _pygamma.MagVec_My(self, *args)

    def Mz(self, *args):
        r"""
        Mz(MagVec self, int cmp) -> double
        Mz(MagVec self, int cmp, double mz)
        Mz(MagVec self) -> MagVec
        """
        return _pygamma.MagVec_Mz(self, *args)

    def MxVec(self, *args):
        r"""
        MxVec(MagVec self, int NC) -> MagVec
        MxVec(MagVec self) -> MagVec
        """
        return _pygamma.MagVec_MxVec(self, *args)

    def MyVec(self, *args):
        r"""
        MyVec(MagVec self, int NC) -> MagVec
        MyVec(MagVec self) -> MagVec
        """
        return _pygamma.MagVec_MyVec(self, *args)

    def MzVec(self, *args):
        r"""
        MzVec(MagVec self, int NC) -> MagVec
        MzVec(MagVec self) -> MagVec
        """
        return _pygamma.MagVec_MzVec(self, *args)
    __swig_destroy__ = _pygamma.delete_MagVec

# Register MagVec in _pygamma:
_pygamma.MagVec_swigregister(MagVec)

class BlochAcq(object):
    r"""Proxy of C++ BlochAcq class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BlochAcq self) -> BlochAcq
        __init__(BlochAcq self, row_vector det, matrix L, col_vector Minf, double cut=1.e-12) -> BlochAcq
        __init__(BlochAcq self, row_vector det, matrix L, double cut=1.e-12) -> BlochAcq
        __init__(BlochAcq self, BlochAcq ACQ1) -> BlochAcq
        """
        _pygamma.BlochAcq_swiginit(self, _pygamma.new_BlochAcq(*args))
    __swig_destroy__ = _pygamma.delete_BlochAcq

    def __assign__(self, ACQ1):
        r"""__assign__(BlochAcq self, BlochAcq ACQ1) -> BlochAcq"""
        return _pygamma.BlochAcq___assign__(self, ACQ1)

    def T(self, *args):
        r"""
        T(BlochAcq self, col_vector M0, int npts, double tinc) -> row_vector
        T(BlochAcq self, col_vector M0, row_vector data, double tinc)
        """
        return _pygamma.BlochAcq_T(self, *args)

    def F(self, *args):
        r"""
        F(BlochAcq self, MagVec M0, int npts, double Fst, double Ffi) -> row_vector
        F(BlochAcq self, MagVec M0, row_vector data, double Fst, double Ffi)
        """
        return _pygamma.BlochAcq_F(self, *args)

    def table(self, *args):
        r"""
        table(BlochAcq self, col_vector M0) -> TTable1D
        table(BlochAcq self) -> TTable1D
        """
        return _pygamma.BlochAcq_table(self, *args)

    def full_size(self):
        r"""full_size(BlochAcq self) -> int"""
        return _pygamma.BlochAcq_full_size(self)

# Register BlochAcq in _pygamma:
_pygamma.BlochAcq_swigregister(BlochAcq)


def T_D(*args):
    r"""
    T_D(spin_sys sys, int spin1, int spin2) -> spin_T
    T_D(spin_sys sys, spin_op Im1, spin_op Iz1, spin_op Ip1, spin_op Im2, spin_op Iz2, spin_op Ip2) -> spin_T
    T_D(spin_sys sys, int spin1, int spin2, int m) -> spin_op
    """
    return _pygamma.T_D(*args)

def T_CSA(sys, spin):
    r"""T_CSA(spin_sys sys, int spin) -> spin_T"""
    return _pygamma.T_CSA(sys, spin)

def T_CS2(*args):
    r"""
    T_CS2(spin_sys sys, int spin) -> spin_T
    T_CS2(spin_sys sys, int spin, coord B) -> spin_T
    T_CS2(spin_sys sys, int spin, coord B, int l, int m) -> spin_op
    """
    return _pygamma.T_CS2(*args)

def T_CS(*args):
    r"""
    T_CS(spin_sys sys, int spin) -> spin_T
    T_CS(spin_sys sys, int spin, int m) -> spin_op
    """
    return _pygamma.T_CS(*args)

def T_RF(*args):
    r"""
    T_RF(spin_sys sys, int spin) -> spin_T
    T_RF(spin_sys sys, int spin, int l, int m) -> spin_op
    """
    return _pygamma.T_RF(*args)

def T_Q(*args):
    r"""
    T_Q(spin_sys sys, int spin) -> spin_T
    T_Q(spin_sys sys, int spin, int l, int m) -> spin_op
    """
    return _pygamma.T_Q(*args)

def T1(*args):
    r"""
    T1(spin_sys sys, int spin) -> spin_T
    T1(spin_sys sys, int spin, int l, int m) -> spin_op
    """
    return _pygamma.T1(*args)

def T10(*args):
    r"""
    T10(spin_sys sys, int spin, int m) -> spin_op
    T10(spin_op Ie, int m) -> spin_op
    """
    return _pygamma.T10(*args)

def T11(*args):
    r"""
    T11(spin_sys sys, int spin) -> spin_T
    T11(spin_sys sys, int spin, int m) -> spin_op
    T11(spin_op Im, spin_op Iz, spin_op Ip, int m) -> spin_op
    """
    return _pygamma.T11(*args)

def T22wh(sys, spin1, spin2):
    r"""T22wh(spin_sys sys, int spin1, int spin2) -> spin_T"""
    return _pygamma.T22wh(sys, spin1, spin2)

def T22SSirr(*args):
    r"""
    T22SSirr(spin_sys sys, int spin, coord vect, int rev=0) -> spin_T
    T22SSirr(spin_sys sys, spin_op Im, spin_op Iz, spin_op Ip, coord vect, int rev=0) -> spin_T
    """
    return _pygamma.T22SSirr(*args)

def T2(*args):
    r"""
    T2(spin_sys sys, int spin1, int spin2) -> spin_T
    T2(spin_sys sys, int spin1, int spin2, int l, int m) -> spin_op
    T2(spin_op Im1, spin_op Iz1, spin_op Ip1, spin_op Im2, spin_op Iz2, spin_op Ip2, int l, int m) -> spin_op
    T2(spin_sys sys, int spin, coord vect) -> spin_T
    T2(spin_sys sys, spin_op Im, spin_op Iz, spin_op Ip, coord vect) -> spin_T
    T2(spin_sys sys, int spin, coord vect, int l, int m) -> spin_op
    T2(spin_op Im, spin_op Iz, spin_op Ip, coord vect, int l, int m) -> spin_op
    """
    return _pygamma.T2(*args)

def T20(*args):
    r"""
    T20(spin_sys sys, int spin1, int spin2, int m) -> spin_op
    T20(spin_op Im1, spin_op Iz1, spin_op Ip1, spin_op Im2, spin_op Iz2, spin_op Ip2, int m) -> spin_op
    T20(spin_sys sys, int spin, coord vect, int m) -> spin_op
    T20(spin_op Im, spin_op Iz, spin_op Ip, coord vect, int m) -> spin_op
    """
    return _pygamma.T20(*args)

def T21(*args):
    r"""
    T21(spin_sys sys, int spin1, int spin2, int m) -> spin_op
    T21(spin_op Im1, spin_op Iz1, spin_op Ip1, spin_op Im2, spin_op Iz2, spin_op Ip2, int m) -> spin_op
    T21(spin_sys sys, int spin, coord vect, int m) -> spin_op
    T21(spin_op Im, spin_op Iz, spin_op Ip, coord vect, int m) -> spin_op
    """
    return _pygamma.T21(*args)

def T22(*args):
    r"""
    T22(spin_sys sys, int spin1, int spin2) -> spin_T
    T22(spin_sys sys, spin_op Im1, spin_op Iz1, spin_op Ip1, spin_op Im2, spin_op Iz2, spin_op Ip2) -> spin_T
    T22(spin_sys sys, int spin1, int spin2, int m) -> spin_op
    T22(spin_op Im1, spin_op Iz1, spin_op Ip1, spin_op Im2, spin_op Iz2, spin_op Ip2, int m) -> spin_op
    T22(spin_sys sys, int spin, coord vect) -> spin_T
    T22(spin_sys sys, spin_op Im, spin_op Iz, spin_op Ip, coord vect) -> spin_T
    T22(spin_sys sys, int spin, coord vect, int m) -> spin_op
    T22(spin_op Im, spin_op Iz, spin_op Ip, coord vect, int m) -> spin_op
    """
    return _pygamma.T22(*args)

def T2SS(*args):
    r"""
    T2SS(spin_sys sys, int spin, coord vect, int rev=0) -> spin_T
    T2SS(spin_sys sys, spin_op Im, spin_op Iz, spin_op Ip, coord vect, int rev=0) -> spin_T
    T2SS(spin_sys sys, int spin, coord vect, int l, int m, int rev=0) -> spin_op
    T2SS(spin_op Im, spin_op Iz, spin_op Ip, coord vect, int l, int m, int rev=0) -> spin_op
    """
    return _pygamma.T2SS(*args)

def T20SS(*args):
    r"""
    T20SS(spin_sys sys, int spin, coord vect, int m, int rev=0) -> spin_op
    T20SS(spin_op Im, spin_op Iz, spin_op Ip, coord vect, int m, int rev=0) -> spin_op
    """
    return _pygamma.T20SS(*args)

def T21SS(*args):
    r"""
    T21SS(spin_sys sys, int spin, coord vect, int m, int rev=0) -> spin_op
    T21SS(spin_op Im, spin_op Iz, spin_op Ip, coord vect, int m, int rev=0) -> spin_op
    """
    return _pygamma.T21SS(*args)

def T22SS(*args):
    r"""
    T22SS(spin_sys sys, int spin, coord vect, int m, int rev=0) -> spin_op
    T22SS(spin_op Im, spin_op Iz, spin_op Ip, coord vect, int m, int rev=0) -> spin_op
    """
    return _pygamma.T22SS(*args)

def T_prod(*args):
    r"""
    T_prod(spin_T SphT, space_T SphA, int l, int m) -> spin_op
    T_prod(space_T SphA, spin_T SphT, int l, int m) -> spin_op
    T_prod(spin_T SphT, space_T SphA, int l) -> spin_op
    T_prod(space_T SphA, spin_T SphT, int l) -> spin_op
    T_prod(spin_T SphT, space_T SphA) -> spin_op
    T_prod(space_T SphA, spin_T SphT) -> spin_op
    """
    return _pygamma.T_prod(*args)

def Clebsch_Gordan(a, b, alpha, beta, c, gamma):
    r"""Clebsch_Gordan(int a, int b, int alpha, int beta, int c, int gamma) -> double"""
    return _pygamma.Clebsch_Gordan(a, b, alpha, beta, c, gamma)

def Wigner_3j(a, b, c, alpha, beta, gamma):
    r"""Wigner_3j(int a, int b, int c, int alpha, int beta, int gamma) -> double"""
    return _pygamma.Wigner_3j(a, b, c, alpha, beta, gamma)
class spin_T(object):
    r"""Proxy of C++ spin_T class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(spin_T self) -> spin_T
        __init__(spin_T self, spin_sys sys) -> spin_T
        __init__(spin_T self, spin_T SphT) -> spin_T
        __init__(spin_T self, spin_T SphT, int l) -> spin_T
        """
        _pygamma.spin_T_swiginit(self, _pygamma.new_spin_T(*args))
    __swig_destroy__ = _pygamma.delete_spin_T

    def __assign__(self, SphT):
        r"""__assign__(spin_T self, spin_T SphT) -> spin_T"""
        return _pygamma.spin_T___assign__(self, SphT)

    def component(self, l, m):
        r"""component(spin_T self, int l, int m) -> spin_op"""
        return _pygamma.spin_T_component(self, l, m)

    def rotate(self, *args):
        r"""
        rotate(spin_T self, double alpha, double beta, double gamma) -> spin_T
        rotate(spin_T self, coord EA) -> spin_T
        rotate(spin_T self, int l, int m, double alpha, double beta, double gamma) -> spin_op
        rotate(spin_T self, int l, int m, coord EA) -> spin_op
        """
        return _pygamma.spin_T_rotate(self, *args)

    def Rank(self):
        r"""Rank(spin_T self) -> int"""
        return _pygamma.spin_T_Rank(self)

# Register spin_T in _pygamma:
_pygamma.spin_T_swigregister(spin_T)


def Rmx(alpha, beta, gamma):
    r"""Rmx(double alpha, double beta, double gamma) -> matrix"""
    return _pygamma.Rmx(alpha, beta, gamma)
class coord(object):
    r"""Proxy of C++ coord class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(coord self) -> coord
        __init__(coord self, double xx, double yy=0, double zz=0) -> coord
        __init__(coord self, coord pt1) -> coord
        __init__(coord self, ParameterSet pset, int idx=-1, int warn=2) -> coord
        __init__(coord self, SinglePar par) -> coord
        """
        _pygamma.coord_swiginit(self, _pygamma.new_coord(*args))
    __swig_destroy__ = _pygamma.delete_coord

    def __assign__(self, pt):
        r"""__assign__(coord self, coord pt) -> coord"""
        return _pygamma.coord___assign__(self, pt)

    def get(self, i):
        r"""get(coord self, int i) -> double"""
        return _pygamma.coord_get(self, i)

    def x(self, *args):
        r"""
        x(coord self) -> double
        x(coord self, double xx)
        """
        return _pygamma.coord_x(self, *args)

    def y(self, *args):
        r"""
        y(coord self) -> double
        y(coord self, double yy)
        """
        return _pygamma.coord_y(self, *args)

    def z(self, *args):
        r"""
        z(coord self) -> double
        z(coord self, double zz)
        """
        return _pygamma.coord_z(self, *args)

    def xyz(self, *args):
        r"""
        xyz(coord self, double xx, double yy, double zz)
        xyz(coord self, coord pt1)
        """
        return _pygamma.coord_xyz(self, *args)

    def norm(self):
        r"""norm(coord self) -> double"""
        return _pygamma.coord_norm(self)

    def Rad(self, *args):
        r"""
        Rad(coord self) -> double
        Rad(coord self, coord pt2) -> double
        """
        return _pygamma.coord_Rad(self, *args)

    def theta(self, *args):
        r"""
        theta(coord self) -> double
        theta(coord self, coord pt2) -> double
        """
        return _pygamma.coord_theta(self, *args)

    def phi(self, *args):
        r"""
        phi(coord self) -> double
        phi(coord self, coord pt2) -> double
        """
        return _pygamma.coord_phi(self, *args)

    def invert(self):
        r"""invert(coord self)"""
        return _pygamma.coord_invert(self)

    @staticmethod
    def Rz(phi, rad=0):
        r"""Rz(double phi, int rad=0) -> matrix"""
        return _pygamma.coord_Rz(phi, rad)

    @staticmethod
    def Rx(theta, rad=0):
        r"""Rx(double theta, int rad=0) -> matrix"""
        return _pygamma.coord_Rx(theta, rad)

    @staticmethod
    def Ry(theta, rad=0):
        r"""Ry(double theta, int rad=0) -> matrix"""
        return _pygamma.coord_Ry(theta, rad)

    def xrotate(self, theta, rad=0):
        r"""xrotate(coord self, double theta, int rad=0) -> coord"""
        return _pygamma.coord_xrotate(self, theta, rad)

    def yrotate(self, theta, rad=0):
        r"""yrotate(coord self, double theta, int rad=0) -> coord"""
        return _pygamma.coord_yrotate(self, theta, rad)

    def zrotate(self, phi, rad=0):
        r"""zrotate(coord self, double phi, int rad=0) -> coord"""
        return _pygamma.coord_zrotate(self, phi, rad)

    def Ralpha(self, alpha, rad):
        r"""Ralpha(coord self, double alpha, int rad) -> matrix"""
        return _pygamma.coord_Ralpha(self, alpha, rad)

    def Rbeta(self, beta, rad):
        r"""Rbeta(coord self, double beta, int rad) -> matrix"""
        return _pygamma.coord_Rbeta(self, beta, rad)

    def Rgamma(self, gamma, rad):
        r"""Rgamma(coord self, double gamma, int rad) -> matrix"""
        return _pygamma.coord_Rgamma(self, gamma, rad)

    def REuler(self, alpha, beta, gamma, rad):
        r"""REuler(coord self, double alpha, double beta, double gamma, int rad) -> matrix"""
        return _pygamma.coord_REuler(self, alpha, beta, gamma, rad)

    def rotate(self, *args):
        r"""
        rotate(coord self, double alpha, double beta, double gamma) -> coord
        rotate(coord self, coord EA) -> coord
        """
        return _pygamma.coord_rotate(self, *args)

    def trans_x(self, delx):
        r"""trans_x(coord self, double delx) -> coord"""
        return _pygamma.coord_trans_x(self, delx)

    def trans_x_ip(self, delx):
        r"""trans_x_ip(coord self, double delx)"""
        return _pygamma.coord_trans_x_ip(self, delx)

    def trans_y(self, dely):
        r"""trans_y(coord self, double dely) -> coord"""
        return _pygamma.coord_trans_y(self, dely)

    def trans_y_ip(self, dely):
        r"""trans_y_ip(coord self, double dely)"""
        return _pygamma.coord_trans_y_ip(self, dely)

    def trans_z(self, delz):
        r"""trans_z(coord self, double delz) -> coord"""
        return _pygamma.coord_trans_z(self, delz)

    def trans_z_ip(self, delz):
        r"""trans_z_ip(coord self, double delz)"""
        return _pygamma.coord_trans_z_ip(self, delz)

    def translate(self, *args):
        r"""
        translate(coord self, double delx, double dely=0, double delz=0) -> coord
        translate(coord self, coord _del) -> coord
        """
        return _pygamma.coord_translate(self, *args)

    def translate_ip(self, *args):
        r"""
        translate_ip(coord self, double delx, double dely=0, double delz=0)
        translate_ip(coord self, coord _del)
        """
        return _pygamma.coord_translate_ip(self, *args)

    def __add__(self, _del):
        r"""__add__(coord self, coord _del) -> coord"""
        return _pygamma.coord___add__(self, _del)

    def __sub__(self, _del):
        r"""__sub__(coord self, coord _del) -> coord"""
        return _pygamma.coord___sub__(self, _del)

    def __iadd__(self, _del):
        r"""__iadd__(coord self, coord _del) -> coord"""
        return _pygamma.coord___iadd__(self, _del)

    def __isub__(self, _del):
        r"""__isub__(coord self, coord _del) -> coord"""
        return _pygamma.coord___isub__(self, _del)

    def __mul__(self, r):
        r"""__mul__(coord self, double r) -> coord"""
        return _pygamma.coord___mul__(self, r)

    def __imul__(self, r):
        r"""__imul__(coord self, double r) -> coord"""
        return _pygamma.coord___imul__(self, r)

    def __truediv__(self, *args):
        return _pygamma.coord___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _pygamma.coord___idiv__(self, *args)
    __idiv__ = __itruediv__



    def __eq__(self, pt):
        r"""__eq__(coord self, coord pt) -> bool"""
        return _pygamma.coord___eq__(self, pt)

    def __ne__(self, pt):
        r"""__ne__(coord self, coord pt) -> bool"""
        return _pygamma.coord___ne__(self, pt)

    def __gt__(self, pt):
        r"""__gt__(coord self, coord pt) -> bool"""
        return _pygamma.coord___gt__(self, pt)

    def __lt__(self, pt):
        r"""__lt__(coord self, coord pt) -> bool"""
        return _pygamma.coord___lt__(self, pt)

    def param(self, *args):
        r"""
        param(coord self, std::string const & pname) -> SinglePar
        param(coord self, std::string const & pname, std::string const & ps) -> SinglePar
        """
        return _pygamma.coord_param(self, *args)

    def read(self, *args):
        r"""
        read(coord self, std::string const & filein, int indx, int warn=1) -> int
        read(coord self, ParameterSet pset, int indx, int warn=1) -> int
        """
        return _pygamma.coord_read(self, *args)

    @staticmethod
    def length():
        r"""length() -> int"""
        return _pygamma.coord_length()

    def Cart2Sph(self, rad=1):
        r"""Cart2Sph(coord self, int rad=1) -> coord"""
        return _pygamma.coord_Cart2Sph(self, rad)

    def Sph2Cart(self, rad=1):
        r"""Sph2Cart(coord self, int rad=1) -> coord"""
        return _pygamma.coord_Sph2Cart(self, rad)

    def Cart2Cyl(self, rad=1):
        r"""Cart2Cyl(coord self, int rad=1) -> coord"""
        return _pygamma.coord_Cart2Cyl(self, rad)

    def Cyl2Cart(self, rad=1):
        r"""Cyl2Cart(coord self, int rad=1) -> coord"""
        return _pygamma.coord_Cyl2Cart(self, rad)

    def Sph2Cyl(self, rad=1):
        r"""Sph2Cyl(coord self, int rad=1) -> coord"""
        return _pygamma.coord_Sph2Cyl(self, rad)

    def Cyl2Sph(self, rad=1):
        r"""Cyl2Sph(coord self, int rad=1) -> coord"""
        return _pygamma.coord_Cyl2Sph(self, rad)

    @staticmethod
    def getDefCoord():
        r"""getDefCoord() -> coord"""
        return _pygamma.coord_getDefCoord()

    @staticmethod
    def setDefCoord(dpt):
        r"""setDefCoord(coord dpt)"""
        return _pygamma.coord_setDefCoord(dpt)

    @staticmethod
    def SetCutoff(co=-1):
        r"""SetCutoff(double co=-1)"""
        return _pygamma.coord_SetCutoff(co)

# Register coord in _pygamma:
_pygamma.coord_swigregister(coord)

def coord_Rz(phi, rad=0):
    r"""coord_Rz(double phi, int rad=0) -> matrix"""
    return _pygamma.coord_Rz(phi, rad)

def coord_Rx(theta, rad=0):
    r"""coord_Rx(double theta, int rad=0) -> matrix"""
    return _pygamma.coord_Rx(theta, rad)

def coord_Ry(theta, rad=0):
    r"""coord_Ry(double theta, int rad=0) -> matrix"""
    return _pygamma.coord_Ry(theta, rad)

def coord_length():
    r"""coord_length() -> int"""
    return _pygamma.coord_length()

def coord_getDefCoord():
    r"""coord_getDefCoord() -> coord"""
    return _pygamma.coord_getDefCoord()

def coord_setDefCoord(dpt):
    r"""coord_setDefCoord(coord dpt)"""
    return _pygamma.coord_setDefCoord(dpt)

def coord_SetCutoff(co=-1):
    r"""coord_SetCutoff(double co=-1)"""
    return _pygamma.coord_SetCutoff(co)

class coord_vec(object):
    r"""Proxy of C++ coord_vec class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(coord_vec self) -> coord_vec
        __init__(coord_vec self, int pts) -> coord_vec
        __init__(coord_vec self, coord_vec cvec1) -> coord_vec
        __init__(coord_vec self, ParameterSet pset, int idx=-1, int warn=2) -> coord_vec
        __init__(coord_vec self, row_vector X, row_vector Y, row_vector Z) -> coord_vec
        """
        if self.__class__ == coord_vec:
            _self = None
        else:
            _self = self
        _pygamma.coord_vec_swiginit(self, _pygamma.new_coord_vec(_self, *args))
    __swig_destroy__ = _pygamma.delete_coord_vec

    def __assign__(self, cvec1):
        r"""__assign__(coord_vec self, coord_vec cvec1) -> coord_vec"""
        return _pygamma.coord_vec___assign__(self, cvec1)

    def xrotate(self, theta, rad=0):
        r"""xrotate(coord_vec self, double theta, int rad=0) -> coord_vec"""
        return _pygamma.coord_vec_xrotate(self, theta, rad)

    def yrotate(self, theta, rad=0):
        r"""yrotate(coord_vec self, double theta, int rad=0) -> coord_vec"""
        return _pygamma.coord_vec_yrotate(self, theta, rad)

    def zrotate(self, phi, rad=0):
        r"""zrotate(coord_vec self, double phi, int rad=0) -> coord_vec"""
        return _pygamma.coord_vec_zrotate(self, phi, rad)

    def rotate(self, *args):
        r"""
        rotate(coord_vec self, matrix Rmx) -> coord_vec
        rotate(coord_vec self, double alpha, double beta, double gamma) -> coord_vec
        rotate(coord_vec self, coord EA) -> coord_vec
        """
        return _pygamma.coord_vec_rotate(self, *args)

    def rotate_ip(self, *args):
        r"""
        rotate_ip(coord_vec self, double alpha, double beta, double gamma)
        rotate_ip(coord_vec self, coord EA)
        """
        return _pygamma.coord_vec_rotate_ip(self, *args)

    def translate(self, *args):
        r"""
        translate(coord_vec self, double delx, double dely=0, double delz=0) -> coord_vec
        translate(coord_vec self, coord delpt) -> coord_vec
        """
        return _pygamma.coord_vec_translate(self, *args)

    def translate_ip(self, *args):
        r"""
        translate_ip(coord_vec self, double delx, double dely=0, double delz=0)
        translate_ip(coord_vec self, coord delpt)
        """
        return _pygamma.coord_vec_translate_ip(self, *args)

    def trans_x(self, delx):
        r"""trans_x(coord_vec self, double delx) -> coord_vec"""
        return _pygamma.coord_vec_trans_x(self, delx)

    def trans_y(self, dely):
        r"""trans_y(coord_vec self, double dely) -> coord_vec"""
        return _pygamma.coord_vec_trans_y(self, dely)

    def trans_z(self, delz):
        r"""trans_z(coord_vec self, double delz) -> coord_vec"""
        return _pygamma.coord_vec_trans_z(self, delz)

    def trans_x_ip(self, delx):
        r"""trans_x_ip(coord_vec self, double delx)"""
        return _pygamma.coord_vec_trans_x_ip(self, delx)

    def trans_y_ip(self, dely):
        r"""trans_y_ip(coord_vec self, double dely)"""
        return _pygamma.coord_vec_trans_y_ip(self, dely)

    def trans_z_ip(self, delz):
        r"""trans_z_ip(coord_vec self, double delz)"""
        return _pygamma.coord_vec_trans_z_ip(self, delz)

    def project(self, projx, projy):
        r"""project(coord_vec self, int projx, int projy) -> row_vector"""
        return _pygamma.coord_vec_project(self, projx, projy)

    def __mul__(self, r):
        r"""__mul__(coord_vec self, double r) -> coord_vec"""
        return _pygamma.coord_vec___mul__(self, r)

    def __imul__(self, r):
        r"""__imul__(coord_vec self, double r) -> coord_vec"""
        return _pygamma.coord_vec___imul__(self, r)

    def __truediv__(self, *args):
        return _pygamma.coord_vec___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _pygamma.coord_vec___idiv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, cv):
        r"""__add__(coord_vec self, coord_vec cv) -> coord_vec"""
        return _pygamma.coord_vec___add__(self, cv)

    def __iadd__(self, cv):
        r"""__iadd__(coord_vec self, coord_vec cv) -> coord_vec"""
        return _pygamma.coord_vec___iadd__(self, cv)

    def __sub__(self, cv):
        r"""__sub__(coord_vec self, coord_vec cv) -> coord_vec"""
        return _pygamma.coord_vec___sub__(self, cv)

    def __isub__(self, cv):
        r"""__isub__(coord_vec self, coord_vec cv) -> coord_vec"""
        return _pygamma.coord_vec___isub__(self, cv)

    def size(self):
        r"""size(coord_vec self) -> int"""
        return _pygamma.coord_vec_size(self)

    def max_x(self):
        r"""max_x(coord_vec self) -> double"""
        return _pygamma.coord_vec_max_x(self)

    def max_y(self):
        r"""max_y(coord_vec self) -> double"""
        return _pygamma.coord_vec_max_y(self)

    def max_z(self):
        r"""max_z(coord_vec self) -> double"""
        return _pygamma.coord_vec_max_z(self)

    def maxima(self, *args):
        r"""
        maxima(coord_vec self) -> coord
        maxima(coord_vec self, double & x, double & y, double & z)
        """
        return _pygamma.coord_vec_maxima(self, *args)

    def max_R(self, *args):
        r"""
        max_R(coord_vec self) -> double
        max_R(coord_vec self, int & maxi, double & maxR)
        """
        return _pygamma.coord_vec_max_R(self, *args)

    def vectors(self):
        r"""vectors(coord_vec self) -> coord_vec"""
        return _pygamma.coord_vec_vectors(self)

    def vectors_f(self):
        r"""vectors_f(coord_vec self) -> coord_vec"""
        return _pygamma.coord_vec_vectors_f(self)

    def distance(self, pt1, pt2, Angs=0):
        r"""distance(coord_vec self, int pt1, int pt2, int Angs=0) -> double"""
        return _pygamma.coord_vec_distance(self, pt1, pt2, Angs)

    def distances(self, Angs=0):
        r"""distances(coord_vec self, int Angs=0) -> matrix"""
        return _pygamma.coord_vec_distances(self, Angs)

    def thetas(self, deg=0):
        r"""thetas(coord_vec self, int deg=0) -> matrix"""
        return _pygamma.coord_vec_thetas(self, deg)

    def phis(self, deg=0):
        r"""phis(coord_vec self, int deg=0) -> matrix"""
        return _pygamma.coord_vec_phis(self, deg)

    def __call__(self, index):
        r"""__call__(coord_vec self, int index) -> coord"""
        return _pygamma.coord_vec___call__(self, index)

    def put(self, *args):
        r"""
        put(coord_vec self, coord pt1, int index)
        put(coord_vec self, double x, double y, double z, int index)
        """
        return _pygamma.coord_vec_put(self, *args)

    def get(self, index):
        r"""get(coord_vec self, int index) -> coord"""
        return _pygamma.coord_vec_get(self, index)

    def x(self, index):
        r"""x(coord_vec self, int index) -> double"""
        return _pygamma.coord_vec_x(self, index)

    def y(self, index):
        r"""y(coord_vec self, int index) -> double"""
        return _pygamma.coord_vec_y(self, index)

    def z(self, index):
        r"""z(coord_vec self, int index) -> double"""
        return _pygamma.coord_vec_z(self, index)

    def get_block(self, index, npts):
        r"""get_block(coord_vec self, int index, int npts) -> coord_vec"""
        return _pygamma.coord_vec_get_block(self, index, npts)

    def put_block(self, index, cv):
        r"""put_block(coord_vec self, int index, coord_vec cv)"""
        return _pygamma.coord_vec_put_block(self, index, cv)

    def PSetAdd(self, pset, idx=-1):
        r"""PSetAdd(coord_vec self, ParameterSet pset, int idx=-1)"""
        return _pygamma.coord_vec_PSetAdd(self, pset, idx)

    def is_zero(self):
        r"""is_zero(coord_vec self) -> bool"""
        return _pygamma.coord_vec_is_zero(self)

    def ask_read(self, argc, argv, argn, idx=-1, warn=2):
        r"""ask_read(coord_vec self, int argc, char *[] argv, int argn, int idx=-1, int warn=2) -> std::string"""
        return _pygamma.coord_vec_ask_read(self, argc, argv, argn, idx, warn)

    def read(self, *args):
        r"""
        read(coord_vec self, std::string const & filename, int idx=-1, int warn=2) -> int
        read(coord_vec self, ParameterSet pset, int idx=-1, int warn=2) -> int
        """
        return _pygamma.coord_vec_read(self, *args)

    def Cart2Sph(self, rad=1):
        r"""Cart2Sph(coord_vec self, int rad=1) -> coord_vec"""
        return _pygamma.coord_vec_Cart2Sph(self, rad)

    def Sph2Cart(self, rad=1):
        r"""Sph2Cart(coord_vec self, int rad=1) -> coord_vec"""
        return _pygamma.coord_vec_Sph2Cart(self, rad)

    def Cart2Cyl(self, rad=1):
        r"""Cart2Cyl(coord_vec self, int rad=1) -> coord_vec"""
        return _pygamma.coord_vec_Cart2Cyl(self, rad)

    def Cyl2Cart(self, rad=1):
        r"""Cyl2Cart(coord_vec self, int rad=1) -> coord_vec"""
        return _pygamma.coord_vec_Cyl2Cart(self, rad)

    def Sph2Cyl(self, rad=1):
        r"""Sph2Cyl(coord_vec self, int rad=1) -> coord_vec"""
        return _pygamma.coord_vec_Sph2Cyl(self, rad)

    def Cyl2Sph(self, rad=1):
        r"""Cyl2Sph(coord_vec self, int rad=1) -> coord_vec"""
        return _pygamma.coord_vec_Cyl2Sph(self, rad)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_coord_vec(self)
        return weakref.proxy(self)

# Register coord_vec in _pygamma:
_pygamma.coord_vec_swigregister(coord_vec)
UnitX = cvar.UnitX
UnitY = cvar.UnitY
UnitZ = cvar.UnitZ
coord0 = cvar.coord0


def Exponential(*args):
    r"""
    Exponential(int npts, double W, double R) -> row_vector
    Exponential(int npts, double time, double w, double RT, int type=0) -> row_vector
    """
    return _pygamma.Exponential(*args)

def DExponential(*args):
    r"""
    DExponential(int npts, double W, double R) -> row_vector
    DExponential(int npts, double time, double w, double RT, int typ=0) -> row_vector
    """
    return _pygamma.DExponential(*args)

def Exponen_cut(*args):
    r"""
    Exponen_cut(int npts, double time, double w, double R, double cutoff=1.e-10) -> int
    Exponen_cut(int * ihi, matrix mx, double tinc, int npts, double cutoff)
    """
    return _pygamma.Exponen_cut(*args)
class ExchProcM(object):
    r"""Proxy of C++ ExchProcM class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KRate = property(_pygamma.ExchProcM_KRate_get, _pygamma.ExchProcM_KRate_set, doc=r"""KRate : double""")
    Spins = property(_pygamma.ExchProcM_Spins_get, _pygamma.ExchProcM_Spins_set, doc=r"""Spins : std::vector<(int,std::allocator<(int)>)>""")

    def XPerror(self, *args):
        r"""
        XPerror(ExchProcM self, int eidx, int noret=0)
        XPerror(ExchProcM self, int eidx, std::string const & pname, int noret=0)
        """
        return _pygamma.ExchProcM_XPerror(self, *args)

    def XPfatal(self, *args):
        r"""
        XPfatal(ExchProcM self, int eidx) -> void volatile
        XPfatal(ExchProcM self, int eidx, std::string const & pname) -> void volatile
        """
        return _pygamma.ExchProcM_XPfatal(self, *args)

    def getExch(self, pset, idx, exch, warn=True):
        r"""getExch(ExchProcM self, ParameterSet pset, int idx, std::string & exch, bool warn=True) -> bool"""
        return _pygamma.ExchProcM_getExch(self, pset, idx, exch, warn)

    def parseExch(self, Exval, sps, warn=True):
        r"""parseExch(ExchProcM self, std::string & Exval, IntVector sps, bool warn=True) -> bool"""
        return _pygamma.ExchProcM_parseExch(self, Exval, sps, warn)

    def getComps(self, pset, idx, sps, warn=True):
        r"""getComps(ExchProcM self, ParameterSet pset, int idx, IntVector sps, bool warn=True) -> bool"""
        return _pygamma.ExchProcM_getComps(self, pset, idx, sps, warn)

    def getRate(self, pset, idx, rate, warn=True):
        r"""getRate(ExchProcM self, ParameterSet pset, int idx, double & rate, bool warn=True) -> bool"""
        return _pygamma.ExchProcM_getRate(self, pset, idx, rate, warn)

    def getXP(self, pset, rate, sps, idx, warn=True):
        r"""getXP(ExchProcM self, ParameterSet pset, double & rate, IntVector sps, int idx, bool warn=True) -> bool"""
        return _pygamma.ExchProcM_getXP(self, pset, rate, sps, idx, warn)

    def setXP(self, pset, idx, warn=True):
        r"""setXP(ExchProcM self, ParameterSet pset, int idx, bool warn=True) -> bool"""
        return _pygamma.ExchProcM_setXP(self, pset, idx, warn)

    def CCheck(self, comp, warn=True):
        r"""CCheck(ExchProcM self, int comp, bool warn=True) -> bool"""
        return _pygamma.ExchProcM_CCheck(self, comp, warn)

    def FCheck(self, warn=True):
        r"""FCheck(ExchProcM self, bool warn=True) -> bool"""
        return _pygamma.ExchProcM_FCheck(self, warn)

    def __init__(self, *args):
        r"""
        __init__(ExchProcM self) -> ExchProcM
        __init__(ExchProcM self, ExchProcM proc) -> ExchProcM
        __init__(ExchProcM self, ParameterSet pset, int ip=-1, int warn=2) -> ExchProcM
        """
        _pygamma.ExchProcM_swiginit(self, _pygamma.new_ExchProcM(*args))

    def __assign__(self, pr):
        r"""__assign__(ExchProcM self, ExchProcM pr) -> ExchProcM"""
        return _pygamma.ExchProcM___assign__(self, pr)
    __swig_destroy__ = _pygamma.delete_ExchProcM

    def Kex(self, *args):
        r"""
        Kex(ExchProcM self) -> double
        Kex(ExchProcM self, double k)
        """
        return _pygamma.ExchProcM_Kex(self, *args)

    def NComps(self):
        r"""NComps(ExchProcM self) -> int"""
        return _pygamma.ExchProcM_NComps(self)

    def NSpins(self):
        r"""NSpins(ExchProcM self) -> int"""
        return _pygamma.ExchProcM_NSpins(self)

    def Comp(self, comp):
        r"""Comp(ExchProcM self, int comp) -> int"""
        return _pygamma.ExchProcM_Comp(self, comp)

    def mixes(self, i, j):
        r"""mixes(ExchProcM self, int i, int j) -> bool"""
        return _pygamma.ExchProcM_mixes(self, i, j)

    def involves(self, i):
        r"""involves(ExchProcM self, int i) -> bool"""
        return _pygamma.ExchProcM_involves(self, i)

    def read(self, *args):
        r"""
        read(ExchProcM self, std::string const & filename, int idx=-1, int warn=2) -> bool
        read(ExchProcM self, ParameterSet pset, int idx=-1, int warn=2) -> bool
        """
        return _pygamma.ExchProcM_read(self, *args)

    def ExchStr(self):
        r"""ExchStr(ExchProcM self) -> std::string"""
        return _pygamma.ExchProcM_ExchStr(self)

# Register ExchProcM in _pygamma:
_pygamma.ExchProcM_swigregister(ExchProcM)


def Lorentz_cut(*args):
    r"""
    Lorentz_cut(int & ilo, int & ihi, double R, double W, double w0, double winc, int npts, double cutoff=1.e-4)
    Lorentz_cut(int * ilo, int * ihi, matrix R, double w0, double winc, int npts, double cutoff=1.e-4)
    """
    return _pygamma.Lorentz_cut(*args)

def Lorentz_int(*args):
    r"""
    Lorentz_int(int & Lint, double R, double winc, int N=5)
    Lorentz_int(int * Lint, matrix R, double winc, int N=5)
    """
    return _pygamma.Lorentz_int(*args)

def ask_Lorentzian(argc, argv, qn, N, wst, wfi, W, R, fact, pplw):
    r"""ask_Lorentzian(int argc, char *[] argv, int & qn, int & N, double & wst, double & wfi, double & W, double & R, double & fact, int & pplw)"""
    return _pygamma.ask_Lorentzian(argc, argv, qn, N, wst, wfi, W, R, fact, pplw)

def read_Lorentzian(filein, N, wst, wfi, W, R, fact, pplw, idx=-1):
    r"""read_Lorentzian(std::string const & filein, int & N, double & wst, double & wfi, double & W, double & R, double & fact, int & pplw, int idx=-1)"""
    return _pygamma.read_Lorentzian(filein, N, wst, wfi, W, R, fact, pplw, idx)

def DLorentzian(*args):
    r"""
    DLorentzian(double Weval, double W, double R) -> complex
    DLorentzian(int npts, double Wi, double Wf, double W, double R) -> row_vector
    DLorentzian(int npts, double offset, double R, int max1=0) -> row_vector
    """
    return _pygamma.DLorentzian(*args)

def A1(*args):
    r"""
    A1(double x, double y, double z) -> space_T
    A1(coord pt) -> space_T
    A1(row_vector vx) -> space_T
    A1(double x, double y, double z, int m, int l=1) -> complex
    A1(coord pt, int m, int l=1) -> complex
    """
    return _pygamma.A1(*args)

def A11(x, y, z, m):
    r"""A11(double x, double y, double z, int m) -> complex"""
    return _pygamma.A11(x, y, z, m)

def SphA1(*args):
    r"""
    SphA1(complex plus, complex zero, complex minus) -> space_T
    SphA1(coord pt) -> space_T
    """
    return _pygamma.SphA1(*args)

def A2(*args):
    r"""
    A2(double Aiso, double delzz, double eta, double alpha, double beta, double gamma) -> space_T
    A2(coord Tcomps) -> space_T
    A2(coord Tcomps, coord Tangles) -> space_T
    A2(matrix mx, double prec) -> space_T
    A2(int l, int m, double Aiso, double delzz, double eta) -> complex
    A2(int l, int m, matrix mx) -> complex
    """
    return _pygamma.A2(*args)

def A20(*args):
    r"""
    A20(int m, double Aiso, double delzz, double eta) -> complex
    A20(int m, matrix mx) -> complex
    """
    return _pygamma.A20(*args)

def A21(*args):
    r"""
    A21(int m, double Aiso, double delzz, double eta) -> complex
    A21(int m, matrix mx) -> complex
    """
    return _pygamma.A21(*args)

def A22(*args):
    r"""
    A22(int m, double Aiso, double delzz, double eta) -> complex
    A22(int m, matrix mx) -> complex
    """
    return _pygamma.A22(*args)

def T_comp(*args):
    r"""
    T_comp(spin_T SphT, int L, int M) -> spin_op
    T_comp(space_T SphT, int L, int M) -> complex
    """
    return _pygamma.T_comp(*args)

def T_mult(*args):
    r"""
    T_mult(spin_T SphT1, spin_T SphT2) -> spin_T
    T_mult(spin_T SphT1, spin_T SphT2, int L, int M) -> spin_op
    T_mult(space_T SphT1, space_T SphT2) -> space_T
    T_mult(space_T SphT1, int l1, space_T SphT2, int l2) -> space_T
    T_mult(space_T SphT1, int l1, space_T SphT2, int l2, int L) -> space_T
    T_mult(space_T SphT1, int l1, space_T SphT2, int l2, int L, int M) -> complex
    """
    return _pygamma.T_mult(*args)

def T_rot(*args):
    r"""
    T_rot(spin_T SphT1, double alpha, double beta, double gamma) -> spin_T
    T_rot(spin_T SphT1, int l, int m, double alpha, double beta, double gamma) -> spin_op
    T_rot(space_T SphT1, double alpha, double beta, double gamma) -> space_T
    T_rot(int num, space_T SphT, space_T SphTrot, double alpha, double beta, double gamma)
    T_rot(int num, space_T SphT, space_T SphTrot, matrix D)
    T_rot(space_T SphT1, int l, int m, double alpha, double beta, double gamma) -> complex
    """
    return _pygamma.T_rot(*args)
class space_T(object):
    r"""Proxy of C++ space_T class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(space_T self) -> space_T
        __init__(space_T self, space_T SphT) -> space_T
        __init__(space_T self, space_T SphT, int l) -> space_T
        __init__(space_T self, SinglePar par) -> space_T
        """
        if self.__class__ == space_T:
            _self = None
        else:
            _self = self
        _pygamma.space_T_swiginit(self, _pygamma.new_space_T(_self, *args))
    __swig_destroy__ = _pygamma.delete_space_T

    def __assign__(self, SphT):
        r"""__assign__(space_T self, space_T SphT) -> space_T"""
        return _pygamma.space_T___assign__(self, SphT)

    def PASys(self):
        r"""PASys(space_T self) -> coord"""
        return _pygamma.space_T_PASys(self)

    def PASys_EA(self):
        r"""PASys_EA(space_T self) -> coord"""
        return _pygamma.space_T_PASys_EA(self)

    def iso(self, *args):
        r"""
        iso(space_T self) -> double
        iso(space_T self, double Aiso)
        """
        return _pygamma.space_T_iso(self, *args)

    def delz(self, *args):
        r"""
        delz(space_T self) -> double
        delz(space_T self, double delzz)
        """
        return _pygamma.space_T_delz(self, *args)

    def eta(self, *args):
        r"""
        eta(space_T self) -> double
        eta(space_T self, double ETA)
        """
        return _pygamma.space_T_eta(self, *args)

    def alpha(self):
        r"""alpha(space_T self) -> double"""
        return _pygamma.space_T_alpha(self)

    def beta(self):
        r"""beta(space_T self) -> double"""
        return _pygamma.space_T_beta(self)

    def gamma(self):
        r"""gamma(space_T self) -> double"""
        return _pygamma.space_T_gamma(self)

    def exists(self, *args):
        r"""
        exists(space_T self) -> int
        exists(space_T self, int l) -> int
        """
        return _pygamma.space_T_exists(self, *args)

    def Rank(self):
        r"""Rank(space_T self) -> int"""
        return _pygamma.space_T_Rank(self)

    def component(self, L, M):
        r"""component(space_T self, int L, int M) -> complex"""
        return _pygamma.space_T_component(self, L, M)

    def Ccomponent(self, r, c=0):
        r"""Ccomponent(space_T self, int r, int c=0) -> double"""
        return _pygamma.space_T_Ccomponent(self, r, c)

    def rotate(self, *args):
        r"""
        rotate(space_T self, double alpha, double beta, double gamma) -> space_T
        rotate(space_T self, coord EA) -> space_T
        rotate(space_T self, int l, int m, double alpha, double beta, double gamma) -> complex
        rotate(space_T self, int l, int m, coord EA) -> complex
        """
        return _pygamma.space_T_rotate(self, *args)

    def param(self, *args):
        r"""
        param(space_T self, std::string const & pname) -> SinglePar
        param(space_T self, std::string const & pname, std::string const & pstate) -> SinglePar
        """
        return _pygamma.space_T_param(self, *args)

    def write(self, filename):
        r"""write(space_T self, std::string const & filename)"""
        return _pygamma.space_T_write(self, filename)

    def read(self, filename):
        r"""read(space_T self, std::string const & filename)"""
        return _pygamma.space_T_read(self, filename)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_space_T(self)
        return weakref.proxy(self)

# Register space_T in _pygamma:
_pygamma.space_T_swigregister(space_T)


def Y_error(*args):
    r"""
    Y_error(int eidx, int noret=0)
    Y_error(int eidx, std::string const & pname, int noret=0)
    """
    return _pygamma.Y_error(*args)

def Y_fatality(error):
    r"""Y_fatality(int error) -> void volatile"""
    return _pygamma.Y_fatality(error)

def Y00rad():
    r"""Y00rad() -> double"""
    return _pygamma.Y00rad()

def Y10rad(theta):
    r"""Y10rad(double theta) -> double"""
    return _pygamma.Y10rad(theta)

def Y11rad(theta, phi):
    r"""Y11rad(double theta, double phi) -> complex"""
    return _pygamma.Y11rad(theta, phi)

def Y1m1rad(theta, phi):
    r"""Y1m1rad(double theta, double phi) -> complex"""
    return _pygamma.Y1m1rad(theta, phi)

def Y20rad(theta):
    r"""Y20rad(double theta) -> double"""
    return _pygamma.Y20rad(theta)

def Y21rad(theta, phi):
    r"""Y21rad(double theta, double phi) -> complex"""
    return _pygamma.Y21rad(theta, phi)

def Y2m1rad(theta, phi):
    r"""Y2m1rad(double theta, double phi) -> complex"""
    return _pygamma.Y2m1rad(theta, phi)

def Y22rad(theta, phi):
    r"""Y22rad(double theta, double phi) -> complex"""
    return _pygamma.Y22rad(theta, phi)

def Y2m2rad(theta, phi):
    r"""Y2m2rad(double theta, double phi) -> complex"""
    return _pygamma.Y2m2rad(theta, phi)

def Y30rad(theta):
    r"""Y30rad(double theta) -> double"""
    return _pygamma.Y30rad(theta)

def Y31rad(theta, phi):
    r"""Y31rad(double theta, double phi) -> complex"""
    return _pygamma.Y31rad(theta, phi)

def Y3m1rad(theta, phi):
    r"""Y3m1rad(double theta, double phi) -> complex"""
    return _pygamma.Y3m1rad(theta, phi)

def Y32rad(theta, phi):
    r"""Y32rad(double theta, double phi) -> complex"""
    return _pygamma.Y32rad(theta, phi)

def Y3m2rad(theta, phi):
    r"""Y3m2rad(double theta, double phi) -> complex"""
    return _pygamma.Y3m2rad(theta, phi)

def Y33rad(theta, phi):
    r"""Y33rad(double theta, double phi) -> complex"""
    return _pygamma.Y33rad(theta, phi)

def Y3m3rad(theta, phi):
    r"""Y3m3rad(double theta, double phi) -> complex"""
    return _pygamma.Y3m3rad(theta, phi)

def Ylmrad(l, m, theta, phi):
    r"""Ylmrad(int l, int m, double theta, double phi) -> complex"""
    return _pygamma.Ylmrad(l, m, theta, phi)

def Y00():
    r"""Y00() -> double"""
    return _pygamma.Y00()

def Y10(theta):
    r"""Y10(double theta) -> double"""
    return _pygamma.Y10(theta)

def Y11(theta, phi):
    r"""Y11(double theta, double phi) -> complex"""
    return _pygamma.Y11(theta, phi)

def Y1m1(theta, phi):
    r"""Y1m1(double theta, double phi) -> complex"""
    return _pygamma.Y1m1(theta, phi)

def Y20(theta):
    r"""Y20(double theta) -> double"""
    return _pygamma.Y20(theta)

def Y21(theta, phi):
    r"""Y21(double theta, double phi) -> complex"""
    return _pygamma.Y21(theta, phi)

def Y2m1(theta, phi):
    r"""Y2m1(double theta, double phi) -> complex"""
    return _pygamma.Y2m1(theta, phi)

def Y22(theta, phi):
    r"""Y22(double theta, double phi) -> complex"""
    return _pygamma.Y22(theta, phi)

def Y2m2(theta, phi):
    r"""Y2m2(double theta, double phi) -> complex"""
    return _pygamma.Y2m2(theta, phi)

def Y30(theta):
    r"""Y30(double theta) -> double"""
    return _pygamma.Y30(theta)

def Y31(theta, phi):
    r"""Y31(double theta, double phi) -> complex"""
    return _pygamma.Y31(theta, phi)

def Y3m1(theta, phi):
    r"""Y3m1(double theta, double phi) -> complex"""
    return _pygamma.Y3m1(theta, phi)

def Y32(theta, phi):
    r"""Y32(double theta, double phi) -> complex"""
    return _pygamma.Y32(theta, phi)

def Y3m2(theta, phi):
    r"""Y3m2(double theta, double phi) -> complex"""
    return _pygamma.Y3m2(theta, phi)

def Y33(theta, phi):
    r"""Y33(double theta, double phi) -> complex"""
    return _pygamma.Y33(theta, phi)

def Y3m3(theta, phi):
    r"""Y3m3(double theta, double phi) -> complex"""
    return _pygamma.Y3m3(theta, phi)

def Ylm(l, m, theta, phi):
    r"""Ylm(int l, int m, double theta, double phi) -> complex"""
    return _pygamma.Ylm(l, m, theta, phi)

def Wigner_error(error):
    r"""Wigner_error(int error)"""
    return _pygamma.Wigner_error(error)

def Wigner_fatality(error):
    r"""Wigner_fatality(int error) -> void volatile"""
    return _pygamma.Wigner_fatality(error)

def d0():
    r"""d0() -> double"""
    return _pygamma.d0()

def dm1half(n, beta):
    r"""dm1half(int n, double beta) -> double"""
    return _pygamma.dm1half(n, beta)

def d1half(*args):
    r"""
    d1half(int n, double beta) -> double
    d1half(int m, int n, double beta) -> double
    """
    return _pygamma.d1half(*args)

def d11(n, beta):
    r"""d11(int n, double beta) -> double"""
    return _pygamma.d11(n, beta)

def d10(n, beta):
    r"""d10(int n, double beta) -> double"""
    return _pygamma.d10(n, beta)

def d1m1(n, beta):
    r"""d1m1(int n, double beta) -> double"""
    return _pygamma.d1m1(n, beta)

def d1(m, n, beta):
    r"""d1(int m, int n, double beta) -> double"""
    return _pygamma.d1(m, n, beta)

def d22(n, beta):
    r"""d22(int n, double beta) -> double"""
    return _pygamma.d22(n, beta)

def d21(n, beta):
    r"""d21(int n, double beta) -> double"""
    return _pygamma.d21(n, beta)

def d20(n, beta):
    r"""d20(int n, double beta) -> double"""
    return _pygamma.d20(n, beta)

def d2m1(n, beta):
    r"""d2m1(int n, double beta) -> double"""
    return _pygamma.d2m1(n, beta)

def d2m2(n, beta):
    r"""d2m2(int n, double beta) -> double"""
    return _pygamma.d2m2(n, beta)

def d2(m, n, beta):
    r"""d2(int m, int n, double beta) -> double"""
    return _pygamma.d2(m, n, beta)

def fact(a):
    r"""fact(int a) -> double"""
    return _pygamma.fact(a)

def dJ_int(J, m, n, beta):
    r"""dJ_int(int J, int m, int n, double beta) -> double"""
    return _pygamma.dJ_int(J, m, n, beta)

def dJ_half_int(J, m, n, beta):
    r"""dJ_half_int(int J, int m, int n, double beta) -> double"""
    return _pygamma.dJ_half_int(J, m, n, beta)

def dJ(*args):
    r"""
    dJ(int J, int m, int n, double beta) -> double
    dJ(int J, double beta) -> matrix
    """
    return _pygamma.dJ(*args)

def D0():
    r"""D0() -> double"""
    return _pygamma.D0()

def D1half(m, n, alpha, beta, gamma):
    r"""D1half(int m, int n, double alpha, double beta, double gamma) -> complex"""
    return _pygamma.D1half(m, n, alpha, beta, gamma)

def D1(m, n, alpha, beta, gamma):
    r"""D1(int m, int n, double alpha, double beta, double gamma) -> complex"""
    return _pygamma.D1(m, n, alpha, beta, gamma)

def D2(m, n, alpha, beta, gamma):
    r"""D2(int m, int n, double alpha, double beta, double gamma) -> complex"""
    return _pygamma.D2(m, n, alpha, beta, gamma)

def DJ(*args):
    r"""
    DJ(int J, int m, int n, double alpha, double beta, double gamma) -> complex
    DJ(int J, double alpha, double beta, double gamma) -> matrix
    DJ(matrix dJbeta, int J, double alpha) -> matrix
    """
    return _pygamma.DJ(*args)

def exponential_multiply(*args):
    r"""
    exponential_multiply(col_vector db, double em=-4, int offset=0)
    exponential_multiply(row_vector db, double em=-4, int offset=0)
    """
    return _pygamma.exponential_multiply(*args)

def exponential(size, offset=0, alpha=0):
    r"""exponential(int size, int offset=0, double alpha=0) -> row_vector"""
    return _pygamma.exponential(size, offset, alpha)

def Gaussian(size, offset=0, sigma=42.0):
    r"""Gaussian(int size, int offset=0, double sigma=42.0) -> row_vector"""
    return _pygamma.Gaussian(size, offset, sigma)

def Hamming(size, offset=0):
    r"""Hamming(int size, int offset=0) -> row_vector"""
    return _pygamma.Hamming(size, offset)

def Hanning(size, offset=0):
    r"""Hanning(int size, int offset=0) -> row_vector"""
    return _pygamma.Hanning(size, offset)

def hyperbol_sec(size, offset=0, alpha=38.0):
    r"""hyperbol_sec(int size, int offset=0, double alpha=38.0) -> row_vector"""
    return _pygamma.hyperbol_sec(size, offset, alpha)

def Kaiser(size, theta=3.14159265358979323846, offset=0):
    r"""Kaiser(int size, double theta=3.14159265358979323846, int offset=0) -> row_vector"""
    return _pygamma.Kaiser(size, theta, offset)

def Lorentzian(*args):
    r"""
    Lorentzian(double Weval, double W, double R) -> complex
    Lorentzian(int npts, double Wi, double Wf, double W, double R) -> row_vector
    Lorentzian(int npts, double W, double R, int max1=0) -> row_vector
    Lorentzian(double R, double W, double wst, double wfi, int N, complex I, double Lcut, int Lint) -> row_vector
    Lorentzian(row_vector data, double R, double W, double wst, double wfi, complex I, double Lcut=1.e-4, int Lint=5)
    Lorentzian(int * Lint, matrix mx, double winc, int N=5)
    Lorentzian(int size, int offset=0, double alpha=1.0) -> row_vector
    """
    return _pygamma.Lorentzian(*args)

def sin_square(size, offset=0):
    r"""sin_square(int size, int offset=0) -> row_vector"""
    return _pygamma.sin_square(size, offset)

def sinc(size, offset, inc):
    r"""sinc(int size, int offset, int inc) -> row_vector"""
    return _pygamma.sinc(size, offset, inc)

def square_wave(size, start, finish):
    r"""square_wave(int size, int start, int finish) -> row_vector"""
    return _pygamma.square_wave(size, start, finish)

def Noise(*args):
    r"""
    Noise(int npts, double maxN) -> row_vector
    Noise(row_vector data, double maxN)
    """
    return _pygamma.Noise(*args)
class spin_sys(object):
    r"""Proxy of C++ spin_sys class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def check_spin(self, spin, die=1):
        r"""check_spin(spin_sys self, int spin, int die=1) -> int"""
        return _pygamma.spin_sys_check_spin(self, spin, die)

    def check_spins(self, spin1, spin2, die=1):
        r"""check_spins(spin_sys self, int spin1, int spin2, int die=1) -> int"""
        return _pygamma.spin_sys_check_spins(self, spin1, spin2, die)

    def __init__(self, *args):
        r"""
        __init__(spin_sys self) -> spin_sys
        __init__(spin_sys self, int spins) -> spin_sys
        __init__(spin_sys self, spin_sys sys) -> spin_sys
        """
        if self.__class__ == spin_sys:
            _self = None
        else:
            _self = self
        _pygamma.spin_sys_swiginit(self, _pygamma.new_spin_sys(_self, *args))
    __swig_destroy__ = _pygamma.delete_spin_sys

    def __assign__(self, sys):
        r"""__assign__(spin_sys self, spin_sys sys) -> spin_sys"""
        return _pygamma.spin_sys___assign__(self, sys)

    def spins(self):
        r"""spins(spin_sys self) -> int"""
        return _pygamma.spin_sys_spins(self)

    def spinpairs(self):
        r"""spinpairs(spin_sys self) -> int"""
        return _pygamma.spin_sys_spinpairs(self)

    def HS(self, *args):
        r"""
        HS(spin_sys self) -> int
        HS(spin_sys self, int spin) -> int
        """
        return _pygamma.spin_sys_HS(self, *args)

    def isotope(self, arg0, arg1):
        r"""isotope(spin_sys self, int arg0, std::string const & arg1)"""
        return _pygamma.spin_sys_isotope(self, arg0, arg1)

    def weight(self, arg2):
        r"""weight(spin_sys self, int arg2) -> double"""
        return _pygamma.spin_sys_weight(self, arg2)

    def symbol(self, spin):
        r"""symbol(spin_sys self, int spin) -> std::string"""
        return _pygamma.spin_sys_symbol(self, spin)

    def qn(self, *args):
        r"""
        qn(spin_sys self, int spin) -> double
        qn(spin_sys self) -> double
        """
        return _pygamma.spin_sys_qn(self, *args)

    def element(self, spin):
        r"""element(spin_sys self, int spin) -> std::string"""
        return _pygamma.spin_sys_element(self, spin)

    def momentum(self, *args):
        r"""
        momentum(spin_sys self, int spin) -> std::string
        momentum(spin_sys self) -> std::string
        """
        return _pygamma.spin_sys_momentum(self, *args)

    def gamma(self, *args):
        r"""
        gamma(spin_sys self, int spin) -> double
        gamma(spin_sys self, std::string const & iso) -> double
        """
        return _pygamma.spin_sys_gamma(self, *args)

    def HSvect(self):
        r"""HSvect(spin_sys self) -> IntVector"""
        return _pygamma.spin_sys_HSvect(self)

    def qState(self, state):
        r"""qState(spin_sys self, int state) -> row_vector"""
        return _pygamma.spin_sys_qState(self, state)

    def qnState(self, state):
        r"""qnState(spin_sys self, int state) -> double"""
        return _pygamma.spin_sys_qnState(self, state)

    def qnStates(self):
        r"""qnStates(spin_sys self) -> col_vector"""
        return _pygamma.spin_sys_qnStates(self)

    def qnDist(self):
        r"""qnDist(spin_sys self) -> row_vector"""
        return _pygamma.spin_sys_qnDist(self)

    def CoherDist(self):
        r"""CoherDist(spin_sys self) -> row_vector"""
        return _pygamma.spin_sys_CoherDist(self)

    def homonuclear(self):
        r"""homonuclear(spin_sys self) -> bool"""
        return _pygamma.spin_sys_homonuclear(self)

    def heteronuclear(self):
        r"""heteronuclear(spin_sys self) -> bool"""
        return _pygamma.spin_sys_heteronuclear(self)

    def electron(self, i):
        r"""electron(spin_sys self, int i) -> bool"""
        return _pygamma.spin_sys_electron(self, i)

    def nucleon(self, i):
        r"""nucleon(spin_sys self, int i) -> bool"""
        return _pygamma.spin_sys_nucleon(self, i)

    def spinhalf(self):
        r"""spinhalf(spin_sys self) -> bool"""
        return _pygamma.spin_sys_spinhalf(self)

    def electrons(self):
        r"""electrons(spin_sys self) -> int"""
        return _pygamma.spin_sys_electrons(self)

    def nucleons(self):
        r"""nucleons(spin_sys self) -> int"""
        return _pygamma.spin_sys_nucleons(self)

    def nepair(self, i, j):
        r"""nepair(spin_sys self, int i, int j) -> bool"""
        return _pygamma.spin_sys_nepair(self, i, j)

    def enpair(self, i, j):
        r"""enpair(spin_sys self, int i, int j) -> bool"""
        return _pygamma.spin_sys_enpair(self, i, j)

    def eepair(self, i, j):
        r"""eepair(spin_sys self, int i, int j) -> bool"""
        return _pygamma.spin_sys_eepair(self, i, j)

    def nnpair(self, i, j):
        r"""nnpair(spin_sys self, int i, int j) -> bool"""
        return _pygamma.spin_sys_nnpair(self, i, j)

    def pairidx(self, i, j):
        r"""pairidx(spin_sys self, int i, int j) -> int"""
        return _pygamma.spin_sys_pairidx(self, i, j)

    def isotopes(self, *args):
        r"""
        isotopes(spin_sys self) -> int
        isotopes(spin_sys self, int idx) -> std::string
        isotopes(spin_sys self, std::string const & I) -> bool
        """
        return _pygamma.spin_sys_isotopes(self, *args)

    def SetFlag(self, spin, TF):
        r"""SetFlag(spin_sys self, int spin, bool TF)"""
        return _pygamma.spin_sys_SetFlag(self, spin, TF)

    def SetFlags(self, *args):
        r"""
        SetFlags(spin_sys self, bool TF)
        SetFlags(spin_sys self, std::string const & isoin, bool TF)
        """
        return _pygamma.spin_sys_SetFlags(self, *args)

    def GetFlag(self, i):
        r"""GetFlag(spin_sys self, int i) -> bool"""
        return _pygamma.spin_sys_GetFlag(self, i)

    def name(self, *args):
        r"""
        name(spin_sys self, std::string const & name)
        name(spin_sys self, int i=-1) -> std::string const
        """
        return _pygamma.spin_sys_name(self, *args)

    def warnings(self, *args):
        r"""
        warnings(spin_sys self, int warnf)
        warnings(spin_sys self) -> int
        """
        return _pygamma.spin_sys_warnings(self, *args)

    def IsoDefault(self, *args):
        r"""
        IsoDefault(spin_sys self) -> std::string
        IsoDefault(spin_sys self, std::string const & DI)
        """
        return _pygamma.spin_sys_IsoDefault(self, *args)

    def PSetAdd(self, pset, idx=-1):
        r"""PSetAdd(spin_sys self, ParameterSet pset, int idx=-1)"""
        return _pygamma.spin_sys_PSetAdd(self, pset, idx)

    def getSpins(self, pset, warn=0):
        r"""getSpins(spin_sys self, ParameterSet pset, int warn=0) -> int"""
        return _pygamma.spin_sys_getSpins(self, pset, warn)

    def setName(self, pset):
        r"""setName(spin_sys self, ParameterSet pset)"""
        return _pygamma.spin_sys_setName(self, pset)

    def setIs(self, pset):
        r"""setIs(spin_sys self, ParameterSet pset)"""
        return _pygamma.spin_sys_setIs(self, pset)

    def ask_read(self, *args):
        r"""
        ask_read(spin_sys self, int argc, char *[] argv, int argn) -> std::string
        ask_read(spin_sys self, int argc, char *[] argv, int argn, std::string const & _def) -> std::string
        """
        return _pygamma.spin_sys_ask_read(self, *args)

    def get_basis(self):
        r"""get_basis(spin_sys self) -> basis"""
        return _pygamma.spin_sys_get_basis(self)

    def printstrings(self):
        r"""printstrings(spin_sys self) -> StringVector"""
        return _pygamma.spin_sys_printstrings(self)

    def SYSStrings(self, w1=10, w2=5, w3=1):
        r"""SYSStrings(spin_sys self, int w1=10, int w2=5, int w3=1) -> StringVector"""
        return _pygamma.spin_sys_SYSStrings(self, w1, w2, w3)

    def SIStrings(self, colwd=10):
        r"""SIStrings(spin_sys self, int colwd=10) -> StringVector"""
        return _pygamma.spin_sys_SIStrings(self, colwd)

    def SYMStrings(self, colwd=10):
        r"""SYMStrings(spin_sys self, int colwd=10) -> StringVector"""
        return _pygamma.spin_sys_SYMStrings(self, colwd)

    def SAMStrings(self, colwd=10):
        r"""SAMStrings(spin_sys self, int colwd=10) -> StringVector"""
        return _pygamma.spin_sys_SAMStrings(self, colwd)


    def __str__(self):
        """Prints out spin sys"""

        sss = ""
        for v in self.printstrings():
            sss += str(v) + '\n'

        return (sss)


    def __repr__(self):
        return self.__str__()



    def __disown__(self):
        self.this.disown()
        _pygamma.disown_spin_sys(self)
        return weakref.proxy(self)

# Register spin_sys in _pygamma:
_pygamma.spin_sys_swigregister(spin_sys)

class spin_system(spin_sys):
    r"""Proxy of C++ spin_system class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(spin_system self, int spins=0) -> spin_system
        __init__(spin_system self, spin_system sys) -> spin_system
        """
        if self.__class__ == spin_system:
            _self = None
        else:
            _self = self
        _pygamma.spin_system_swiginit(self, _pygamma.new_spin_system(_self, *args))
    __swig_destroy__ = _pygamma.delete_spin_system

    def __assign__(self, sys):
        r"""__assign__(spin_system self, spin_system sys) -> spin_system"""
        return _pygamma.spin_system___assign__(self, sys)

    def shifts(self, shift=0):
        r"""shifts(spin_system self, double shift=0)"""
        return _pygamma.spin_system_shifts(self, shift)

    def shift(self, *args):
        r"""
        shift(spin_system self, int arg0, double arg1)
        shift(spin_system self, int arg0) -> double
        """
        return _pygamma.spin_system_shift(self, *args)

    def maxShift(self, *args):
        r"""
        maxShift(spin_system self) -> double
        maxShift(spin_system self, std::string const & Iso) -> double
        """
        return _pygamma.spin_system_maxShift(self, *args)

    def minShift(self, *args):
        r"""
        minShift(spin_system self) -> double
        minShift(spin_system self, std::string const & Iso) -> double
        """
        return _pygamma.spin_system_minShift(self, *args)

    def medianShift(self):
        r"""medianShift(spin_system self) -> double"""
        return _pygamma.spin_system_medianShift(self)

    def lab_shift(self, arg2):
        r"""lab_shift(spin_system self, int arg2) -> double"""
        return _pygamma.spin_system_lab_shift(self, arg2)

    def offsetShifts(self, *args):
        r"""
        offsetShifts(spin_system self, double OF, int i=0)
        offsetShifts(spin_system self, double OF, std::string const & Iso)
        """
        return _pygamma.spin_system_offsetShifts(self, *args)

    def PPM(self, *args):
        r"""
        PPM(spin_system self, int arg0, double arg1)
        PPM(spin_system self, int arg2) -> double
        """
        return _pygamma.spin_system_PPM(self, *args)

    def gfactor(self, *args):
        r"""
        gfactor(spin_system self, int spin) -> double
        gfactor(spin_system self, int spin, double g)
        """
        return _pygamma.spin_system_gfactor(self, *args)

    def eshift(self, spin):
        r"""eshift(spin_system self, int spin) -> double"""
        return _pygamma.spin_system_eshift(self, spin)

    def lab_eshift(self, spin):
        r"""lab_eshift(spin_system self, int spin) -> double"""
        return _pygamma.spin_system_lab_eshift(self, spin)

    def efield(self, spin):
        r"""efield(spin_system self, int spin) -> double"""
        return _pygamma.spin_system_efield(self, spin)

    def efield_lab(self, spin):
        r"""efield_lab(spin_system self, int spin) -> double"""
        return _pygamma.spin_system_efield_lab(self, spin)

    def Js(self, Jval=0):
        r"""Js(spin_system self, double Jval=0)"""
        return _pygamma.spin_system_Js(self, Jval)

    def J(self, *args):
        r"""
        J(spin_system self, int arg0, int arg1, double arg2)
        J(spin_system self, double arg0, int arg1, int arg2)
        J(spin_system self, int arg2, int arg3) -> double
        """
        return _pygamma.spin_system_J(self, *args)

    def As(self, Aval=0):
        r"""As(spin_system self, double Aval=0)"""
        return _pygamma.spin_system_As(self, Aval)

    def A(self, *args):
        r"""
        A(spin_system self, int arg0, int arg1, double arg2)
        A(spin_system self, double arg0, int arg1, int arg2)
        A(spin_system self, int arg2, int arg3) -> double
        """
        return _pygamma.spin_system_A(self, *args)

    def AHz(self, arg2, arg3):
        r"""AHz(spin_system self, int arg2, int arg3) -> double"""
        return _pygamma.spin_system_AHz(self, arg2, arg3)

    def Omega(self, *args):
        r"""
        Omega(spin_system self, double Om)
        Omega(spin_system self, double Om, std::string const & iso)
        Omega(spin_system self, int spin=-1) -> double
        Omega(spin_system self, std::string const & iso) -> double
        """
        return _pygamma.spin_system_Omega(self, *args)

    def Bo(self):
        r"""Bo(spin_system self) -> double"""
        return _pygamma.spin_system_Bo(self)

    def OmegaAdjust(self, Om):
        r"""OmegaAdjust(spin_system self, double Om)"""
        return _pygamma.spin_system_OmegaAdjust(self, Om)

    def FieldAdjust(self, B):
        r"""FieldAdjust(spin_system self, double B)"""
        return _pygamma.spin_system_FieldAdjust(self, B)

    def spectrometer_frequency(self, *args):
        r"""
        spectrometer_frequency(spin_system self, double freq)
        spectrometer_frequency(spin_system self) -> double
        """
        return _pygamma.spin_system_spectrometer_frequency(self, *args)

    def spflags(self, TF):
        r"""spflags(spin_system self, int TF)"""
        return _pygamma.spin_system_spflags(self, TF)

    def spflag(self, *args):
        r"""
        spflag(spin_system self, int spin1, int spin2, int TF)
        spflag(spin_system self, int spin1, int spin2) -> int
        """
        return _pygamma.spin_system_spflag(self, *args)

    def center(self, spin=0):
        r"""center(spin_system self, int spin=0) -> double"""
        return _pygamma.spin_system_center(self, spin)

    def Nyquist(self, *args):
        r"""
        Nyquist(spin_system self, int spin, double fact, double lwhh) -> double
        Nyquist(spin_system self, std::string const & iso, double fact, double lwhh) -> double
        Nyquist(spin_system self, Isotope iso, double fact, double lwhh) -> double
        """
        return _pygamma.spin_system_Nyquist(self, *args)

    def PSetAdd(self, pset, idx=-1):
        r"""PSetAdd(spin_system self, ParameterSet pset, int idx=-1)"""
        return _pygamma.spin_system_PSetAdd(self, pset, idx)

    def setJs(self, pset):
        r"""setJs(spin_system self, ParameterSet pset)"""
        return _pygamma.spin_system_setJs(self, pset)

    def setAs(self, pset):
        r"""setAs(spin_system self, ParameterSet pset)"""
        return _pygamma.spin_system_setAs(self, pset)

    def setShifts(self, pset):
        r"""setShifts(spin_system self, ParameterSet pset)"""
        return _pygamma.spin_system_setShifts(self, pset)

    def setGs(self, pset):
        r"""setGs(spin_system self, ParameterSet pset)"""
        return _pygamma.spin_system_setGs(self, pset)

    def write(self, filename, idx=-1, warn=2):
        r"""write(spin_system self, std::string const & filename, int idx=-1, int warn=2) -> int"""
        return _pygamma.spin_system_write(self, filename, idx, warn)

    def read(self, *args):
        r"""
        read(spin_system self, std::string const & fn, int idx=-1, int warn=2) -> int
        read(spin_system self, ParameterSet pset, int idx=-1, int warn=2) -> int
        """
        return _pygamma.spin_system_read(self, *args)

    def ask_read(self, *args):
        r"""
        ask_read(spin_system self, int argc, char *[] argv, int argn) -> std::string
        ask_read(spin_system self, int argc, char *[] argv, int argn, std::string const & _def) -> std::string
        """
        return _pygamma.spin_system_ask_read(self, *args)

    def SYSStrings(self, w1=10, w2=12, w3=1):
        r"""SYSStrings(spin_system self, int w1=10, int w2=12, int w3=1) -> StringVector"""
        return _pygamma.spin_system_SYSStrings(self, w1, w2, w3)

    def VStrings(self, colwd=12, digs=2):
        r"""VStrings(spin_system self, int colwd=12, int digs=2) -> StringVector"""
        return _pygamma.spin_system_VStrings(self, colwd, digs)

    def PPMStrings(self, colwd=12, digs=2):
        r"""PPMStrings(spin_system self, int colwd=12, int digs=2) -> StringVector"""
        return _pygamma.spin_system_PPMStrings(self, colwd, digs)

    def GFStrings(self, colwd=12, digs=2):
        r"""GFStrings(spin_system self, int colwd=12, int digs=2) -> StringVector"""
        return _pygamma.spin_system_GFStrings(self, colwd, digs)

    def BeStrings(self, colwd=12, digs=2):
        r"""BeStrings(spin_system self, int colwd=12, int digs=2) -> StringVector"""
        return _pygamma.spin_system_BeStrings(self, colwd, digs)

    def JStrings(self, colwd=12, digs=2):
        r"""JStrings(spin_system self, int colwd=12, int digs=2) -> StringVector"""
        return _pygamma.spin_system_JStrings(self, colwd, digs)

    def AStrings(self, colwd=12, digs=2):
        r"""AStrings(spin_system self, int colwd=12, int digs=2) -> StringVector"""
        return _pygamma.spin_system_AStrings(self, colwd, digs)

    def OmStrings(self, colwd=12, digs=2):
        r"""OmStrings(spin_system self, int colwd=12, int digs=2) -> StringVector"""
        return _pygamma.spin_system_OmStrings(self, colwd, digs)


    def __str__(self):
        """Prints out spin system"""

        sss = ""
        for v in self.SYSStrings():
            sss += str(v) + '\n'

        return (sss)


    def __repr__(self):
        return self.__str__()    



    def __disown__(self):
        self.this.disown()
        _pygamma.disown_spin_system(self)
        return weakref.proxy(self)

# Register spin_system in _pygamma:
_pygamma.spin_system_swigregister(spin_system)

class genoprep_vec(object):
    r"""Proxy of C++ std::vector< genoprep > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(genoprep_vec self) -> SwigPyIterator"""
        return _pygamma.genoprep_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(genoprep_vec self) -> bool"""
        return _pygamma.genoprep_vec___nonzero__(self)

    def __bool__(self):
        r"""__bool__(genoprep_vec self) -> bool"""
        return _pygamma.genoprep_vec___bool__(self)

    def __len__(self):
        r"""__len__(genoprep_vec self) -> std::vector< genoprep >::size_type"""
        return _pygamma.genoprep_vec___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(genoprep_vec self, std::vector< genoprep >::difference_type i, std::vector< genoprep >::difference_type j) -> genoprep_vec"""
        return _pygamma.genoprep_vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(genoprep_vec self, std::vector< genoprep >::difference_type i, std::vector< genoprep >::difference_type j)
        __setslice__(genoprep_vec self, std::vector< genoprep >::difference_type i, std::vector< genoprep >::difference_type j, genoprep_vec v)
        """
        return _pygamma.genoprep_vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(genoprep_vec self, std::vector< genoprep >::difference_type i, std::vector< genoprep >::difference_type j)"""
        return _pygamma.genoprep_vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(genoprep_vec self, std::vector< genoprep >::difference_type i)
        __delitem__(genoprep_vec self, PySliceObject * slice)
        """
        return _pygamma.genoprep_vec___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(genoprep_vec self, PySliceObject * slice) -> genoprep_vec
        __getitem__(genoprep_vec self, std::vector< genoprep >::difference_type i) -> genoprep
        """
        return _pygamma.genoprep_vec___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(genoprep_vec self, PySliceObject * slice, genoprep_vec v)
        __setitem__(genoprep_vec self, PySliceObject * slice)
        __setitem__(genoprep_vec self, std::vector< genoprep >::difference_type i, genoprep x)
        """
        return _pygamma.genoprep_vec___setitem__(self, *args)

    def pop(self):
        r"""pop(genoprep_vec self) -> genoprep"""
        return _pygamma.genoprep_vec_pop(self)

    def append(self, x):
        r"""append(genoprep_vec self, genoprep x)"""
        return _pygamma.genoprep_vec_append(self, x)

    def empty(self):
        r"""empty(genoprep_vec self) -> bool"""
        return _pygamma.genoprep_vec_empty(self)

    def size(self):
        r"""size(genoprep_vec self) -> std::vector< genoprep >::size_type"""
        return _pygamma.genoprep_vec_size(self)

    def swap(self, v):
        r"""swap(genoprep_vec self, genoprep_vec v)"""
        return _pygamma.genoprep_vec_swap(self, v)

    def begin(self):
        r"""begin(genoprep_vec self) -> std::vector< genoprep >::iterator"""
        return _pygamma.genoprep_vec_begin(self)

    def end(self):
        r"""end(genoprep_vec self) -> std::vector< genoprep >::iterator"""
        return _pygamma.genoprep_vec_end(self)

    def rbegin(self):
        r"""rbegin(genoprep_vec self) -> std::vector< genoprep >::reverse_iterator"""
        return _pygamma.genoprep_vec_rbegin(self)

    def rend(self):
        r"""rend(genoprep_vec self) -> std::vector< genoprep >::reverse_iterator"""
        return _pygamma.genoprep_vec_rend(self)

    def clear(self):
        r"""clear(genoprep_vec self)"""
        return _pygamma.genoprep_vec_clear(self)

    def get_allocator(self):
        r"""get_allocator(genoprep_vec self) -> std::vector< genoprep >::allocator_type"""
        return _pygamma.genoprep_vec_get_allocator(self)

    def pop_back(self):
        r"""pop_back(genoprep_vec self)"""
        return _pygamma.genoprep_vec_pop_back(self)

    def erase(self, *args):
        r"""
        erase(genoprep_vec self, std::vector< genoprep >::iterator pos) -> std::vector< genoprep >::iterator
        erase(genoprep_vec self, std::vector< genoprep >::iterator first, std::vector< genoprep >::iterator last) -> std::vector< genoprep >::iterator
        """
        return _pygamma.genoprep_vec_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(genoprep_vec self) -> genoprep_vec
        __init__(genoprep_vec self, genoprep_vec other) -> genoprep_vec
        __init__(genoprep_vec self, std::vector< genoprep >::size_type size) -> genoprep_vec
        __init__(genoprep_vec self, std::vector< genoprep >::size_type size, genoprep value) -> genoprep_vec
        """
        _pygamma.genoprep_vec_swiginit(self, _pygamma.new_genoprep_vec(*args))

    def push_back(self, x):
        r"""push_back(genoprep_vec self, genoprep x)"""
        return _pygamma.genoprep_vec_push_back(self, x)

    def front(self):
        r"""front(genoprep_vec self) -> genoprep"""
        return _pygamma.genoprep_vec_front(self)

    def back(self):
        r"""back(genoprep_vec self) -> genoprep"""
        return _pygamma.genoprep_vec_back(self)

    def assign(self, n, x):
        r"""assign(genoprep_vec self, std::vector< genoprep >::size_type n, genoprep x)"""
        return _pygamma.genoprep_vec_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(genoprep_vec self, std::vector< genoprep >::size_type new_size)
        resize(genoprep_vec self, std::vector< genoprep >::size_type new_size, genoprep x)
        """
        return _pygamma.genoprep_vec_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(genoprep_vec self, std::vector< genoprep >::iterator pos, genoprep x) -> std::vector< genoprep >::iterator
        insert(genoprep_vec self, std::vector< genoprep >::iterator pos, std::vector< genoprep >::size_type n, genoprep x)
        """
        return _pygamma.genoprep_vec_insert(self, *args)

    def reserve(self, n):
        r"""reserve(genoprep_vec self, std::vector< genoprep >::size_type n)"""
        return _pygamma.genoprep_vec_reserve(self, n)

    def capacity(self):
        r"""capacity(genoprep_vec self) -> std::vector< genoprep >::size_type"""
        return _pygamma.genoprep_vec_capacity(self)
    __swig_destroy__ = _pygamma.delete_genoprep_vec

# Register genoprep_vec in _pygamma:
_pygamma.genoprep_vec_swigregister(genoprep_vec)

class gen_op(genoprep_vec):
    r"""Proxy of C++ gen_op class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(gen_op self) -> gen_op
        __init__(gen_op self, matrix mx) -> gen_op
        __init__(gen_op self, spin_op SOp) -> gen_op
        __init__(gen_op self, matrix mx1, matrix mx2) -> gen_op
        __init__(gen_op self, matrix mx, basis bs) -> gen_op
        __init__(gen_op self, gen_op Op1) -> gen_op
        """
        if self.__class__ == gen_op:
            _self = None
        else:
            _self = self
        _pygamma.gen_op_swiginit(self, _pygamma.new_gen_op(_self, *args))
    __swig_destroy__ = _pygamma.delete_gen_op

    def add_genop(self, Op):
        r"""add_genop(gen_op self, gen_op Op) -> gen_op"""
        return _pygamma.gen_op_add_genop(self, Op)

    def sub_genop(self, Op):
        r"""sub_genop(gen_op self, gen_op Op) -> gen_op"""
        return _pygamma.gen_op_sub_genop(self, Op)

    def __neg__(self):
        r"""__neg__(gen_op self) -> gen_op"""
        return _pygamma.gen_op___neg__(self)

    def times_genop(self, Op):
        r"""times_genop(gen_op self, gen_op Op) -> gen_op"""
        return _pygamma.gen_op_times_genop(self, Op)

    def __iand__(self, Op):
        r"""__iand__(gen_op self, gen_op Op) -> gen_op"""
        return _pygamma.gen_op___iand__(self, Op)

    def __iadd__(self, *args):
        r"""
        __iadd__(gen_op self, gen_op Op) -> gen_op
        __iadd__(gen_op self, spin_op SOp) -> gen_op
        """
        return _pygamma.gen_op___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(gen_op self, gen_op Op) -> gen_op
        __isub__(gen_op self, spin_op SOp) -> gen_op
        """
        return _pygamma.gen_op___isub__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(gen_op self, gen_op Op) -> gen_op
        __imul__(gen_op self, complex z) -> gen_op
        __imul__(gen_op self, double r) -> gen_op
        """
        return _pygamma.gen_op___imul__(self, *args)

    def __itruediv__(self, *args):
        return _pygamma.gen_op___idiv__(self, *args)
    __idiv__ = __itruediv__



    def det(self):
        r"""det(gen_op self) -> complex"""
        return _pygamma.gen_op_det(self)

    def trace(self, *args):
        r"""
        trace(gen_op self) -> complex
        trace(gen_op self, gen_op Op2) -> complex
        """
        return _pygamma.gen_op_trace(self, *args)

    def proj(self, Op2, norm=0):
        r"""proj(gen_op self, gen_op Op2, int norm=0) -> complex"""
        return _pygamma.gen_op_proj(self, Op2, norm)

    def dim(self):
        r"""dim(gen_op self) -> int"""
        return _pygamma.gen_op_dim(self)

    def HS(self):
        r"""HS(gen_op self) -> int"""
        return _pygamma.gen_op_HS(self)

    def LS(self):
        r"""LS(gen_op self) -> int"""
        return _pygamma.gen_op_LS(self)

    def dim_LS(self):
        r"""dim_LS(gen_op self) -> int"""
        return _pygamma.gen_op_dim_LS(self)

    def exp(self, *args):
        r"""
        exp(gen_op self) -> gen_op
        exp(gen_op self, complex t, double cutoff=1.e-12) -> gen_op
        """
        return _pygamma.gen_op_exp(self, *args)

    def Pow(self, power):
        r"""Pow(gen_op self, int power) -> gen_op"""
        return _pygamma.gen_op_Pow(self, power)

    def sim_trans(self, Op2):
        r"""sim_trans(gen_op self, gen_op Op2) -> gen_op"""
        return _pygamma.gen_op_sim_trans(self, Op2)

    def sim_trans_ip(self, Op1):
        r"""sim_trans_ip(gen_op self, gen_op Op1)"""
        return _pygamma.gen_op_sim_trans_ip(self, Op1)

    def eigvals(self, *args):
        r"""
        eigvals(gen_op self) -> row_vector
        eigvals(gen_op self, double * vx, int sort=0)
        """
        return _pygamma.gen_op_eigvals(self, *args)

    def get_bs(self):
        r"""get_bs(gen_op self) -> basis"""
        return _pygamma.gen_op_get_bs(self)

    def get_basis(self):
        r"""get_basis(gen_op self) -> basis"""
        return _pygamma.gen_op_get_basis(self)

    def put_bs(self, bs):
        r"""put_bs(gen_op self, basis bs)"""
        return _pygamma.gen_op_put_bs(self, bs)

    def put_basis(self, bs):
        r"""put_basis(gen_op self, basis bs)"""
        return _pygamma.gen_op_put_basis(self, bs)

    def __call__(self, row, col):
        r"""__call__(gen_op self, int row, int col) -> complex"""
        return _pygamma.gen_op___call__(self, row, col)

    def get(self, row, col):
        r"""get(gen_op self, int row, int col) -> complex"""
        return _pygamma.gen_op_get(self, row, col)

    def put(self, z, row, col):
        r"""put(gen_op self, complex z, int row, int col)"""
        return _pygamma.gen_op_put(self, z, row, col)

    def name(self, *args):
        r"""
        name(gen_op self) -> std::string
        name(gen_op self, std::string const & n)
        """
        return _pygamma.gen_op_name(self, *args)

    def bsname(self, bn):
        r"""bsname(gen_op self, std::string const & bn)"""
        return _pygamma.gen_op_bsname(self, bn)

    def exists(self):
        r"""exists(gen_op self) -> int"""
        return _pygamma.gen_op_exists(self)

    def superket(self):
        r"""superket(gen_op self) -> col_vector"""
        return _pygamma.gen_op_superket(self)

    def desuperket(self, mS):
        r"""desuperket(gen_op self, col_vector mS)"""
        return _pygamma.gen_op_desuperket(self, mS)

    def project_sub(self, ic):
        r"""project_sub(gen_op self, int ic) -> gen_op"""
        return _pygamma.gen_op_project_sub(self, ic)

    def test_EBR(self):
        r"""test_EBR(gen_op self) -> int"""
        return _pygamma.gen_op_test_EBR(self)

    def test_DBR(self):
        r"""test_DBR(gen_op self) -> int"""
        return _pygamma.gen_op_test_DBR(self)

    def in_EBR(self):
        r"""in_EBR(gen_op self) -> int"""
        return _pygamma.gen_op_in_EBR(self)

    def in_DBR(self):
        r"""in_DBR(gen_op self) -> int"""
        return _pygamma.gen_op_in_DBR(self)

    def set_DBR(self):
        r"""set_DBR(gen_op self)"""
        return _pygamma.gen_op_set_DBR(self)

    def set_EBR(self):
        r"""set_EBR(gen_op self)"""
        return _pygamma.gen_op_set_EBR(self)

    def Op_base(self, *args):
        r"""
        Op_base(gen_op self, gen_op Op1, double cutoff=1.e-12)
        Op_base(gen_op self, basis bs)
        """
        return _pygamma.gen_op_Op_base(self, *args)

    def status(self, pf=0):
        r"""status(gen_op self, int pf=0)"""
        return _pygamma.gen_op_status(self, pf)

    def setOnlyWBR(self):
        r"""setOnlyWBR(gen_op self)"""
        return _pygamma.gen_op_setOnlyWBR(self)

    def Op_priority(self, pty):
        r"""Op_priority(gen_op self, int pty)"""
        return _pygamma.gen_op_Op_priority(self, pty)

    def SetLimits(self, limit):
        r"""SetLimits(gen_op self, int limit)"""
        return _pygamma.gen_op_SetLimits(self, limit)

    def OpCheck(self, *args):
        r"""
        OpCheck(gen_op self, gen_op Op1, int warn=2) -> int
        OpCheck(gen_op self, basis bs, int warn=2) -> int
        OpCheck(gen_op self, int row, int col, int warn=2) -> int
        """
        return _pygamma.gen_op_OpCheck(self, *args)

    def LimCheck(self, limit, warn=1):
        r"""LimCheck(gen_op self, int limit, int warn=1) -> int"""
        return _pygamma.gen_op_LimCheck(self, limit, warn)

    def write(self, fn):
        r"""write(gen_op self, std::string const & fn)"""
        return _pygamma.gen_op_write(self, fn)

    def read(self, *args):
        r"""
        read(gen_op self, std::string const & fn, basis bs)
        read(gen_op self, std::string const & fn)
        """
        return _pygamma.gen_op_read(self, *args)

    def TestEigenSystem(self, pf=0):
        r"""TestEigenSystem(gen_op self, int pf=0) -> double"""
        return _pygamma.gen_op_TestEigenSystem(self, pf)

    def is_symmetric(self, *args):
        r"""is_symmetric(gen_op self, double const d=GMxCut) -> bool"""
        return _pygamma.gen_op_is_symmetric(self, *args)

    def is_hermitian(self, *args):
        r"""is_hermitian(gen_op self, double const d=GMxCut) -> bool"""
        return _pygamma.gen_op_is_hermitian(self, *args)

    def is_unitary(self, *args):
        r"""is_unitary(gen_op self, double const d=GMxCut) -> bool"""
        return _pygamma.gen_op_is_unitary(self, *args)

    def is_real(self, *args):
        r"""is_real(gen_op self, double const d=GMxCut) -> bool"""
        return _pygamma.gen_op_is_real(self, *args)

    def is_imaginary(self, *args):
        r"""is_imaginary(gen_op self, double const d=GMxCut) -> bool"""
        return _pygamma.gen_op_is_imaginary(self, *args)

    def is_complex(self, *args):
        r"""is_complex(gen_op self, double const d=GMxCut) -> bool"""
        return _pygamma.gen_op_is_complex(self, *args)

    def is_zero(self, *args):
        r"""is_zero(gen_op self, double const d=GMxCut) -> bool"""
        return _pygamma.gen_op_is_zero(self, *args)

    def is_diagonal(self, *args):
        r"""is_diagonal(gen_op self, double const d=GMxCut) -> bool"""
        return _pygamma.gen_op_is_diagonal(self, *args)

    def is_square(self):
        r"""is_square(gen_op self) -> bool"""
        return _pygamma.gen_op_is_square(self)

    def __eq__(self, Op):
        r"""__eq__(gen_op self, gen_op Op) -> bool"""
        return _pygamma.gen_op___eq__(self, Op)

    def __ne__(self, Op):
        r"""__ne__(gen_op self, gen_op Op) -> bool"""
        return _pygamma.gen_op___ne__(self, Op)

    def __lt__(self, Op):
        r"""__lt__(gen_op self, gen_op Op) -> bool"""
        return _pygamma.gen_op___lt__(self, Op)

    def __gt__(self, Op):
        r"""__gt__(gen_op self, gen_op Op) -> bool"""
        return _pygamma.gen_op___gt__(self, Op)


    def __str__(self):


        rr = self.dim()
        cc = self.dim()

        if not self.is_real():
            mmm = numpy.zeros((rr,cc), dtype=numpy.complex128)
            for r in range(rr):
                for c in range(cc):
                    ij = self.get(r,c)
                    mmm[r][c] =  ij.real()+ij.imag()*1j
        else:
            mmm = numpy.zeros((rr,cc))
            for r in range(rr):
                for c in range(cc):
                    ij = self.get(r,c)
                    mmm[r][c] = ij.real()

        return mmm.__str__()


    def assign( self, mmm ):
        pass


    def toList( self ):
        mmm = []
        rr = self.dim()
        cc = self.dim()

        if not self.is_real():
            for r in range(rr):
                mmm.append([])
                for c in range(cc):
                    ij = self.get(r,c)
                    (mmm[r]).append( ij.real()+ij.imag()*1j )
        else:
            for r in range(rr):
                mmm.append([])
                for c in range(cc):
                    ij = self.get(r,c)
                    (mmm[r]).append( ij.real() )

        return  mmm


    def __repr__( self ):

        mmm = []
        rr = self.dim()
        cc = self.dim()

        if not self.is_real():
            mmm = numpy.zeros((rr,cc), dtype=numpy.complex128)
            for r in range(rr):
                for c in range(cc):
                    ij = self.get(r,c)
                    mmm[r][c] =  ij.real()+ij.imag()*1j
        else:
            mmm = numpy.zeros((rr,cc))
            for r in range(rr):
                for c in range(cc):
                    ij = self.get(r,c)
                    mmm[r][c] = ij.real()

        return mmm.__repr__()


    def toNParray( self ):

        rr = self.dim()
        cc = self.dim()

        if not self.is_real():
            mmm = numpy.zeros((rr,cc), dtype=numpy.complex128)
            for r in range(rr):
                for c in range(cc):
                    ij = self.get(r,c)
                    mmm[r][c] =  ij.real()+ij.imag()*1j
        else:
            mmm = numpy.zeros((rr,cc))
            for r in range(rr):
                for c in range(cc):
                    ij = self.get(r,c)
                    mmm[r][c] = ij.real()
        return mmm


    def __mul__( self, val ):
        if isinstance( val, gen_op ):
    #print "gen_op:: times_genop"
            return( self.times_genop(val))

        if  isinstance( val, spin_op ):
    #print "gen_op:: times_genop"
            return( self.times_genop(gen_op(val)))

        if isinstance( val, complex ):
    #print "gen_op:: genp * complex"
            return( genop_times_complex( self, val ) )

        if isinstance( val, float ):
    #print "gen_op:: genOp * double"
            return( genop_times_double( self, val ) )

        if isinstance( val, int ):
    #print "gen_op:: genOp * double"
            return( genop_times_double( self, val ) )

        if isinstance( val, matrix ):
    #print "gen_op:: genop * matrix"
            return( genop_times_matrix( self, val ) )


    def __rmul__( self, val ):

        if  isinstance( val, spin_op ):
    #print "rmul:: times_genop"
            return( self.times_genop(gen_op(val)))

        if isinstance( val, float ):
    #print "gen_op:: double * genop"
            return( double_times_genop(  val,self ) )

        if isinstance( val, int ):
    #print "gen_op:: double * genop"
            return( double_times_genop(  val,self ) )

        if isinstance( val, complex ):
    #print "gen_op:: complex * genop"
            return( complex_times_genop(  val,self ) )

        if isinstance( val, matrix ):
    #print "gen_op:: matrix * genop"
            return( matrix_times_genop( val, self ) )

    def __add__( self, val ):
        if isinstance( val, gen_op ):
    #print "gen_op:: add_genop"
            return( self.add_genop(val))

        if isinstance( val, spin_op ):
    #print "gen_op:: genop + spinop"
            return( genop_plus_spinop( self, val ))

        if isinstance( val, matrix ):
    #print "gen_op:: genop + matrix"
            return( genop_plus_matrix( self, val ))

    def __radd__( self, val ):

        if isinstance( val, matrix ):
    #print "gen_op:: matrix + genop"
            return( matrix_plus_genop( val,self ))

    def __sub__( self, val ):
        if isinstance( val, gen_op ):
    #print "gen_op::  - genop"
            return( self.sub_genop(val))

        if isinstance( val, spin_op ):
    #print "gen_op:: genop - spinop"
            return( genop_minus_spinop(self,val))

        if isinstance( val, matrix ):
    #print "gen_op:: genop - matrix"
            return( genop_minus_matrix(self,val))

    def __rsub__( self, val ):

        if isinstance( val, matrix ):
    #print "gen_op:: matrix - gen_op"
            return( matrix_minus_genop( val,self ))


    def __div__( self, val ):

        if isinstance( val, complex ):
    #print "gen_op:: gen_op / complex"
            return( genop_divide_complex( self, val ))

        if isinstance( val, float ):
    #print "gen_op:: gen_op / float"
            return( genop_divide_float( self, val ))


    def __disown__(self):
        self.this.disown()
        _pygamma.disown_gen_op(self)
        return weakref.proxy(self)

# Register gen_op in _pygamma:
_pygamma.gen_op_swigregister(gen_op)

def genop_plus_spinop(Op1, SOp):
    r"""genop_plus_spinop(gen_op Op1, spin_op SOp) -> gen_op"""
    return _pygamma.genop_plus_spinop(Op1, SOp)

def genop_minus_spinop(Op1, SOp):
    r"""genop_minus_spinop(gen_op Op1, spin_op SOp) -> gen_op"""
    return _pygamma.genop_minus_spinop(Op1, SOp)

def genop_plus_matrix(Op1, mx):
    r"""genop_plus_matrix(gen_op Op1, matrix mx) -> gen_op"""
    return _pygamma.genop_plus_matrix(Op1, mx)

def genop_minus_matrix(Op1, mx):
    r"""genop_minus_matrix(gen_op Op1, matrix mx) -> gen_op"""
    return _pygamma.genop_minus_matrix(Op1, mx)

def matrix_plus_genop(mx, Op1):
    r"""matrix_plus_genop(matrix mx, gen_op Op1) -> gen_op"""
    return _pygamma.matrix_plus_genop(mx, Op1)

def matrix_minus_genop(mx, Op1):
    r"""matrix_minus_genop(matrix mx, gen_op Op1) -> gen_op"""
    return _pygamma.matrix_minus_genop(mx, Op1)

def genop_times_matrix(Op1, mx):
    r"""genop_times_matrix(gen_op Op1, matrix mx) -> gen_op"""
    return _pygamma.genop_times_matrix(Op1, mx)

def matrix_times_genop(mx, Op1):
    r"""matrix_times_genop(matrix mx, gen_op Op1) -> gen_op"""
    return _pygamma.matrix_times_genop(mx, Op1)

def genop_times_complex(Op1, z):
    r"""genop_times_complex(gen_op Op1, complex z) -> gen_op"""
    return _pygamma.genop_times_complex(Op1, z)

def complex_times_genop(z, Op1):
    r"""complex_times_genop(complex z, gen_op Op1) -> gen_op"""
    return _pygamma.complex_times_genop(z, Op1)

def genop_times_double(Op1, z):
    r"""genop_times_double(gen_op Op1, double z) -> gen_op"""
    return _pygamma.genop_times_double(Op1, z)

def double_times_genop(z, Op1):
    r"""double_times_genop(double z, gen_op Op1) -> gen_op"""
    return _pygamma.double_times_genop(z, Op1)

def genop_divide_complex(Op1, z):
    r"""genop_divide_complex(gen_op Op1, complex z) -> gen_op"""
    return _pygamma.genop_divide_complex(Op1, z)

def genop_divide_float(Op1, r):
    r"""genop_divide_float(gen_op Op1, double r) -> gen_op"""
    return _pygamma.genop_divide_float(Op1, r)

def Det(Op):
    r"""Det(gen_op Op) -> complex"""
    return _pygamma.Det(Op)


def I_gen_op(bs):
    r"""I_gen_op(basis bs) -> gen_op"""
    return _pygamma.I_gen_op(bs)

def HJw(sys):
    r"""HJw(spin_system sys) -> gen_op"""
    return _pygamma.HJw(sys)

def HJwh(sys):
    r"""HJwh(spin_system sys) -> gen_op"""
    return _pygamma.HJwh(sys)

def HJd(sys, iso):
    r"""HJd(spin_system sys, std::string const & iso) -> gen_op"""
    return _pygamma.HJd(sys, iso)

def How(ss):
    r"""How(spin_system ss) -> gen_op"""
    return _pygamma.How(ss)

def Ho_lab(ss):
    r"""Ho_lab(spin_system ss) -> gen_op"""
    return _pygamma.Ho_lab(ss)

def Hz(*args):
    r"""
    Hz(spin_system sys) -> gen_op
    Hz(spin_system sys, std::string const & I) -> gen_op
    """
    return _pygamma.Hz(*args)

def H1(sys, iso, gamB1=2.5e4, phi=0.0):
    r"""H1(spin_system sys, std::string const & iso, double gamB1=2.5e4, double phi=0.0) -> gen_op"""
    return _pygamma.H1(sys, iso, gamB1, phi)

def Heff(sys, H0, iso, Wrf=0, gamB1=2.5e4, phi=0.0):
    r"""Heff(spin_sys sys, gen_op H0, std::string const & iso, double Wrf=0, double gamB1=2.5e4, double phi=0.0) -> gen_op"""
    return _pygamma.Heff(sys, H0, iso, Wrf, gamB1, phi)

def Hg(sys):
    r"""Hg(spin_system sys) -> gen_op"""
    return _pygamma.Hg(sys)

def Hg_lab(sys):
    r"""Hg_lab(spin_system sys) -> gen_op"""
    return _pygamma.Hg_lab(sys)

def HAw(sys):
    r"""HAw(spin_system sys) -> gen_op"""
    return _pygamma.HAw(sys)

def HQsec(sys, wQ, i):
    r"""HQsec(spin_system sys, double wQ, int i) -> gen_op"""
    return _pygamma.HQsec(sys, wQ, i)

def SOpCmperror(eidx, noret=0):
    r"""SOpCmperror(int eidx, int noret=0)"""
    return _pygamma.SOpCmperror(eidx, noret)

def SOpCmpfatal(eidx):
    r"""SOpCmpfatal(int eidx) -> void volatile"""
    return _pygamma.SOpCmpfatal(eidx)

def Iu(sys, spin, type):
    r"""Iu(spin_sys sys, int spin, int type) -> spin_op"""
    return _pygamma.Iu(sys, spin, type)

def Ia(sys, spin):
    r"""Ia(spin_sys sys, int spin) -> spin_op"""
    return _pygamma.Ia(sys, spin)

def Ib(sys, spin):
    r"""Ib(spin_sys sys, int spin) -> spin_op"""
    return _pygamma.Ib(sys, spin)

def Ipol(sys, m, spin):
    r"""Ipol(spin_sys sys, double m, int spin) -> spin_op"""
    return _pygamma.Ipol(sys, m, spin)

def Fpol(*args):
    r"""
    Fpol(spin_sys sys, double m, int spin) -> spin_op
    Fpol(spin_sys sys, double m) -> spin_op
    Fpol(spin_sys sys, double m, std::string const & iso) -> spin_op
    """
    return _pygamma.Fpol(*args)

def Fa(*args):
    r"""
    Fa(spin_sys sys, int spin) -> spin_op
    Fa(spin_sys sys) -> spin_op
    Fa(spin_sys sys, std::string const & iso) -> spin_op
    Fa(spin_sys sys, flagvec const & sflags) -> spin_op
    """
    return _pygamma.Fa(*args)

def Fb(*args):
    r"""
    Fb(spin_sys sys, int spin) -> spin_op
    Fb(spin_sys sys) -> spin_op
    Fb(spin_sys sys, std::string const & iso) -> spin_op
    Fb(spin_sys sys, flagvec const & sflags) -> spin_op
    """
    return _pygamma.Fb(*args)

def Fe_sp(sys):
    r"""Fe_sp(spin_sys sys) -> spin_op"""
    return _pygamma.Fe_sp(sys)

def Fx_sp(sys):
    r"""Fx_sp(spin_sys sys) -> spin_op"""
    return _pygamma.Fx_sp(sys)

def Fy_sp(sys):
    r"""Fy_sp(spin_sys sys) -> spin_op"""
    return _pygamma.Fy_sp(sys)

def Fz_sp(sys):
    r"""Fz_sp(spin_sys sys) -> spin_op"""
    return _pygamma.Fz_sp(sys)

def Fa_sp(sys):
    r"""Fa_sp(spin_sys sys) -> spin_op"""
    return _pygamma.Fa_sp(sys)

def Fb_sp(sys):
    r"""Fb_sp(spin_sys sys) -> spin_op"""
    return _pygamma.Fb_sp(sys)

def Fpol_sp(sys, m):
    r"""Fpol_sp(spin_sys sys, double m) -> spin_op"""
    return _pygamma.Fpol_sp(sys, m)

def Faxis_sp(sys, axis):
    r"""Faxis_sp(spin_sys sys, char axis) -> spin_op"""
    return _pygamma.Faxis_sp(sys, axis)

def Faxis(*args):
    r"""
    Faxis(spin_sys sys, int spin, char axis) -> spin_op
    Faxis(spin_sys sys, std::string const & I, char axis) -> spin_op
    Faxis(spin_sys sys, char axis) -> spin_op
    """
    return _pygamma.Faxis(*args)

def Fpol_gen_new(*args):
    r"""
    Fpol_gen_new(spin_sys sys, double m) -> spin_op
    Fpol_gen_new(spin_sys sys, std::string const & I, double m) -> spin_op
    """
    return _pygamma.Fpol_gen_new(*args)

def Fpol_gen(sys, m):
    r"""Fpol_gen(spin_sys sys, double m) -> spin_op"""
    return _pygamma.Fpol_gen(sys, m)

def Ipdt(sys, name):
    r"""Ipdt(spin_sys sys, std::string name) -> spin_op"""
    return _pygamma.Ipdt(sys, name)

def Fpdt(sys, name):
    r"""Fpdt(spin_sys sys, std::string name) -> spin_op"""
    return _pygamma.Fpdt(sys, name)

def zero_mqc(sys, Op, order, type):
    r"""zero_mqc(spin_sys sys, gen_op Op, int order, int type)"""
    return _pygamma.zero_mqc(sys, Op, order, type)

def st_Op(Ham, lev1, lev2, axis):
    r"""st_Op(gen_op Ham, int lev1, int lev2, char axis) -> gen_op"""
    return _pygamma.st_Op(Ham, lev1, lev2, axis)

def sqt_v(Ham):
    r"""sqt_v(gen_op Ham)"""
    return _pygamma.sqt_v(Ham)

def sort_super_op_basis(sys):
    r"""sort_super_op_basis(spin_sys sys) -> int *"""
    return _pygamma.sort_super_op_basis(sys)

def sort_LOp_basis(sys):
    r"""sort_LOp_basis(spin_sys sys) -> int *"""
    return _pygamma.sort_LOp_basis(sys)

def sort_Op_basis(sys):
    r"""sort_Op_basis(spin_sys sys) -> int *"""
    return _pygamma.sort_Op_basis(sys)

def mqt_v(sys, Ham, qn, type, ncols):
    r"""mqt_v(spin_sys sys, gen_op Ham, int qn, int type, int ncols)"""
    return _pygamma.mqt_v(sys, Ham, qn, type, ncols)

def wavefunction(sys, Op, wf, pbf):
    r"""wavefunction(spin_sys sys, gen_op Op, int wf, int pbf)"""
    return _pygamma.wavefunction(sys, Op, wf, pbf)

def vecmax(vx):
    r"""vecmax(row_vector vx) -> double"""
    return _pygamma.vecmax(vx)

def integral(vx):
    r"""integral(row_vector vx) -> complex"""
    return _pygamma.integral(vx)

def lwhh(vx, i1, i2):
    r"""lwhh(row_vector vx, int & i1, int & i2)"""
    return _pygamma.lwhh(vx, i1, i2)

def query_isotope(*args):
    r"""
    query_isotope(spin_sys sys, std::string & Isotype) -> int
    query_isotope(spin_sys sys, std::string & Isotype, std::string const & Query) -> int
    query_isotope(int argc, char *[] argv, int argn, spin_sys sys, std::string & Isotype) -> int
    """
    return _pygamma.query_isotope(*args)

def query_offset(*args):
    r"""
    query_offset(spin_system sys, int isoset, int askit=0) -> double
    query_offset(spin_system sys, std::string & Isotype, int ask=0) -> double
    """
    return _pygamma.query_offset(*args)

def query_file1D(filename, type):
    r"""query_file1D(std::string & filename, int & type)"""
    return _pygamma.query_file1D(filename, type)

def Ixpuls(*args):
    r"""
    Ixpuls(spin_sys sys, gen_op sigma, int spin, double beta) -> gen_op
    Ixpuls(spin_sys sys, gen_op sigma, std::string const & iso, double beta) -> gen_op
    Ixpuls(spin_sys sys, gen_op sigma, double beta) -> gen_op
    """
    return _pygamma.Ixpuls(*args)

def Ixpuls_sp(sys, sigma, beta):
    r"""Ixpuls_sp(spin_sys sys, gen_op sigma, double beta) -> gen_op"""
    return _pygamma.Ixpuls_sp(sys, sigma, beta)

def Iypuls_sp(sys, sigma, beta):
    r"""Iypuls_sp(spin_sys sys, gen_op sigma, double beta) -> gen_op"""
    return _pygamma.Iypuls_sp(sys, sigma, beta)

def Ixypuls(*args):
    r"""
    Ixypuls(spin_sys sys, gen_op sigma, int spin, double phi, double beta) -> gen_op
    Ixypuls(spin_sys sys, gen_op sigma, std::string const & iso, double phi, double beta) -> gen_op
    Ixypuls(spin_sys sys, gen_op sigma, double phi, double beta) -> gen_op
    """
    return _pygamma.Ixypuls(*args)

def Ixypuls_sp(sys, sigma, phi, beta):
    r"""Ixypuls_sp(spin_sys sys, gen_op sigma, double phi, double beta) -> gen_op"""
    return _pygamma.Ixypuls_sp(sys, sigma, phi, beta)

def Ixpuls_sp_U(sys, beta):
    r"""Ixpuls_sp_U(spin_sys sys, double beta) -> gen_op"""
    return _pygamma.Ixpuls_sp_U(sys, beta)

def Iypuls_sp_U(sys, beta):
    r"""Iypuls_sp_U(spin_sys sys, double beta) -> gen_op"""
    return _pygamma.Iypuls_sp_U(sys, beta)

def Ixypuls_U_sp(sys, phi, beta):
    r"""Ixypuls_U_sp(spin_sys sys, double phi, double beta) -> gen_op"""
    return _pygamma.Ixypuls_U_sp(sys, phi, beta)
class basis(object):
    r"""Proxy of C++ basis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(basis self) -> basis
        __init__(basis self, int dim) -> basis
        __init__(basis self, IntVector dims) -> basis
        __init__(basis self, basis bs) -> basis
        """
        _pygamma.basis_swiginit(self, _pygamma.new_basis(*args))
    __swig_destroy__ = _pygamma.delete_basis

    def __assign__(self, bs):
        r"""__assign__(basis self, basis bs) -> basis"""
        return _pygamma.basis___assign__(self, bs)

    def size(self):
        r"""size(basis self) -> int"""
        return _pygamma.basis_size(self)

    def dim(self):
        r"""dim(basis self) -> int"""
        return _pygamma.basis_dim(self)

    def name(self, *args):
        r"""
        name(basis self) -> std::string
        name(basis self, std::string const & nm)
        """
        return _pygamma.basis_name(self, *args)

    def dim_LS(self):
        r"""dim_LS(basis self) -> int"""
        return _pygamma.basis_dim_LS(self)

    def sub_N(self):
        r"""sub_N(basis self) -> int"""
        return _pygamma.basis_sub_N(self)

    def sub_dim(self, ic):
        r"""sub_dim(basis self, int ic) -> int"""
        return _pygamma.basis_sub_dim(self, ic)

    def sub_anchor(self, ic):
        r"""sub_anchor(basis self, int ic) -> int"""
        return _pygamma.basis_sub_anchor(self, ic)

    def sub_anchor_LS(self, ic):
        r"""sub_anchor_LS(basis self, int ic) -> int"""
        return _pygamma.basis_sub_anchor_LS(self, ic)

    def which_sub_LS(self, i):
        r"""which_sub_LS(basis self, int i) -> int"""
        return _pygamma.basis_which_sub_LS(self, i)

    def __eq__(self, bs2):
        r"""__eq__(basis self, basis bs2) -> bool"""
        return _pygamma.basis___eq__(self, bs2)

    def __ne__(self, bs2):
        r"""__ne__(basis self, basis bs2) -> bool"""
        return _pygamma.basis___ne__(self, bs2)

    def isDefaultBasis(self):
        r"""isDefaultBasis(basis self) -> bool"""
        return _pygamma.basis_isDefaultBasis(self)

    def refs(self):
        r"""refs(basis self) -> int"""
        return _pygamma.basis_refs(self)

    def check(self, bs1):
        r"""check(basis self, basis bs1) -> bool"""
        return _pygamma.basis_check(self, bs1)

    def write(self, fn):
        r"""write(basis self, std::string const & fn)"""
        return _pygamma.basis_write(self, fn)

    def read(self, fn):
        r"""read(basis self, std::string const & fn)"""
        return _pygamma.basis_read(self, fn)

    def TestBasis(self, pf=0):
        r"""TestBasis(basis self, int pf=0) -> double"""
        return _pygamma.basis_TestBasis(self, pf)

# Register basis in _pygamma:
_pygamma.basis_swigregister(basis)


def prop(ham, time):
    r"""prop(gen_op ham, double time) -> gen_op"""
    return _pygamma.prop(ham, time)

def prop_ip(U, time):
    r"""prop_ip(gen_op U, double time)"""
    return _pygamma.prop_ip(U, time)

def evolve_ip(*args):
    r"""
    evolve_ip(gen_op sigma, gen_op ham, double time)
    evolve_ip(gen_op sigma, gen_op U)
    """
    return _pygamma.evolve_ip(*args)
class HSprop(object):
    r"""Proxy of C++ HSprop class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HSprop self) -> HSprop
        __init__(HSprop self, int HS) -> HSprop
        __init__(HSprop self, gen_op H, double tevol) -> HSprop
        __init__(HSprop self, gen_op H, double tevol, bool prop) -> HSprop
        __init__(HSprop self, HSprop U) -> HSprop
        """
        _pygamma.HSprop_swiginit(self, _pygamma.new_HSprop(*args))
    __swig_destroy__ = _pygamma.delete_HSprop

    def __assign__(self, U1):
        r"""__assign__(HSprop self, HSprop U1) -> HSprop"""
        return _pygamma.HSprop___assign__(self, U1)

    def time(self):
        r"""time(HSprop self) -> double"""
        return _pygamma.HSprop_time(self)

    def length(self):
        r"""length(HSprop self) -> double"""
        return _pygamma.HSprop_length(self)

    def dim(self):
        r"""dim(HSprop self) -> int"""
        return _pygamma.HSprop_dim(self)

    def Bs(self):
        r"""Bs(HSprop self) -> basis"""
        return _pygamma.HSprop_Bs(self)

    def HS(self):
        r"""HS(HSprop self) -> int"""
        return _pygamma.HSprop_HS(self)

    def LS(self):
        r"""LS(HSprop self) -> int"""
        return _pygamma.HSprop_LS(self)

    def Op(self):
        r"""Op(HSprop self) -> gen_op"""
        return _pygamma.HSprop_Op(self)

    def H(self):
        r"""H(HSprop self) -> gen_op"""
        return _pygamma.HSprop_H(self)

    def SetEBR(self):
        r"""SetEBR(HSprop self)"""
        return _pygamma.HSprop_SetEBR(self)

    def SetBasis(self, Op):
        r"""SetBasis(HSprop self, gen_op Op)"""
        return _pygamma.HSprop_SetBasis(self, Op)

    def evolve(self, Op):
        r"""evolve(HSprop self, gen_op Op) -> gen_op"""
        return _pygamma.HSprop_evolve(self, Op)

    def __mul__(self, U):
        r"""__mul__(HSprop self, HSprop U) -> HSprop"""
        return _pygamma.HSprop___mul__(self, U)

    def __imul__(self, U):
        r"""__imul__(HSprop self, HSprop U) -> HSprop"""
        return _pygamma.HSprop___imul__(self, U)

    def __iand__(self, U):
        r"""__iand__(HSprop self, HSprop U) -> HSprop"""
        return _pygamma.HSprop___iand__(self, U)

    def sim_trans(self, Op):
        r"""sim_trans(HSprop self, gen_op Op) -> HSprop"""
        return _pygamma.HSprop_sim_trans(self, Op)

    def sim_trans_ip(self, Op):
        r"""sim_trans_ip(HSprop self, gen_op Op)"""
        return _pygamma.HSprop_sim_trans_ip(self, Op)

    def Pow(self, n):
        r"""Pow(HSprop self, int n) -> HSprop"""
        return _pygamma.HSprop_Pow(self, n)

    def __eq__(self, U):
        r"""__eq__(HSprop self, HSprop U) -> bool"""
        return _pygamma.HSprop___eq__(self, U)

    def __ne__(self, U):
        r"""__ne__(HSprop self, HSprop U) -> bool"""
        return _pygamma.HSprop___ne__(self, U)

    def __lt__(self, U):
        r"""__lt__(HSprop self, HSprop U) -> bool"""
        return _pygamma.HSprop___lt__(self, U)

    def __gt__(self, U):
        r"""__gt__(HSprop self, HSprop U) -> bool"""
        return _pygamma.HSprop___gt__(self, U)

# Register HSprop in _pygamma:
_pygamma.HSprop_swigregister(HSprop)

class spin_op(object):
    r"""Proxy of C++ spin_op class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(spin_op self) -> spin_op
        __init__(spin_op self, spin_op SOp) -> spin_op
        """
        _pygamma.spin_op_swiginit(self, _pygamma.new_spin_op(*args))
    __swig_destroy__ = _pygamma.delete_spin_op

    def __assign__(self, SOp):
        r"""__assign__(spin_op self, spin_op SOp) -> spin_op"""
        return _pygamma.spin_op___assign__(self, SOp)

    def __neg__(self):
        r"""__neg__(spin_op self) -> spin_op"""
        return _pygamma.spin_op___neg__(self)

    def __add__(self, SOp1):
        r"""__add__(spin_op self, spin_op SOp1) -> spin_op"""
        return _pygamma.spin_op___add__(self, SOp1)

    def __isub__(self, SOp1):
        r"""__isub__(spin_op self, spin_op SOp1) -> spin_op"""
        return _pygamma.spin_op___isub__(self, SOp1)

    def __iadd__(self, SOp1):
        r"""__iadd__(spin_op self, spin_op SOp1) -> spin_op"""
        return _pygamma.spin_op___iadd__(self, SOp1)

    def __imul__(self, *args):
        r"""
        __imul__(spin_op self, spin_op SOp1) -> spin_op
        __imul__(spin_op self, complex z) -> spin_op
        __imul__(spin_op self, double d) -> spin_op
        """
        return _pygamma.spin_op___imul__(self, *args)

    def __itruediv__(self, *args):
        return _pygamma.spin_op___idiv__(self, *args)
    __idiv__ = __itruediv__



    def get_mx(self):
        r"""get_mx(spin_op self) -> matrix"""
        return _pygamma.spin_op_get_mx(self)

    def exp(self):
        r"""exp(spin_op self) -> spin_op"""
        return _pygamma.spin_op_exp(self)

    def adjoint(self):
        r"""adjoint(spin_op self) -> spin_op"""
        return _pygamma.spin_op_adjoint(self)

    def trace(self):
        r"""trace(spin_op self) -> complex"""
        return _pygamma.spin_op_trace(self)

    def spins(self):
        r"""spins(spin_op self) -> int"""
        return _pygamma.spin_op_spins(self)

    def refs(self, *args):
        r"""
        refs(spin_op self) -> int
        refs(spin_op self, int i) -> int
        """
        return _pygamma.spin_op_refs(self, *args)

    def HS(self):
        r"""HS(spin_op self) -> int"""
        return _pygamma.spin_op_HS(self)

    def status(self, full=1):
        r"""status(spin_op self, int full=1)"""
        return _pygamma.spin_op_status(self, full)

    def FaxisStruct(self, axis):
        r"""FaxisStruct(spin_op self, char axis)"""
        return _pygamma.spin_op_FaxisStruct(self, axis)


    def __str__(self):

        mmm = self.get_mx()
        return mmm.__str__()


    def assign( self, mmm ):
        pass

    def toList( self ):
        mmm = self.get_mx()
        return mmm.toList()



    def __repr__( self ):
        mmm = self.get_mx()
        return mmm.__repr__()



    def toNParray( self ):
        mmm = self.get_mx()
        return mmm.toNParray()



    def __mul__(self, val ):

        if isinstance( val, int ) or isinstance( val, float ):
            return( spinop_times_double(  self,val))

        if isinstance( val, complex ):
            return( spinop_times_complex( self,val))

        if isinstance( val, spin_op ):
            return( spinop_times_spinop( self, val ))

        if isinstance( val, gen_op ):
            return( val.times_genop(gen_op(self)))





    def __rmul__(self, val ):

        if isinstance( val, int ) or isinstance( val, float ):
            return( double_times_spinop( val, self))

        if isinstance( val, complex ):
            return( complex_times_spinop( val, self))

        if isinstance( val, spin_op ):
            return( spinop_times_spinop( val, self ))



    def __div__( self, val ):

        if isinstance( val, complex ):
            return( spinop_divide_complex( self, val ))


        if isinstance( val, float ):
            return( spinop_divide_double( self, val ))



# Register spin_op in _pygamma:
_pygamma.spin_op_swigregister(spin_op)

def spinop_times_spinop(SOp1, SOp2):
    r"""spinop_times_spinop(spin_op SOp1, spin_op SOp2) -> spin_op"""
    return _pygamma.spinop_times_spinop(SOp1, SOp2)

def spinop_times_complex(SOp, z):
    r"""spinop_times_complex(spin_op SOp, complex z) -> spin_op"""
    return _pygamma.spinop_times_complex(SOp, z)

def complex_times_spinop(z, SOp):
    r"""complex_times_spinop(complex z, spin_op SOp) -> spin_op"""
    return _pygamma.complex_times_spinop(z, SOp)

def spinop_times_double(SOp, d):
    r"""spinop_times_double(spin_op SOp, double d) -> spin_op"""
    return _pygamma.spinop_times_double(SOp, d)

def double_times_spinop(d, SOp):
    r"""double_times_spinop(double d, spin_op SOp) -> spin_op"""
    return _pygamma.double_times_spinop(d, SOp)

def spinop_divide_complex(SOp, z):
    r"""spinop_divide_complex(spin_op SOp, complex z) -> spin_op"""
    return _pygamma.spinop_divide_complex(SOp, z)

def spinop_divide_double(SOp, d):
    r"""spinop_divide_double(spin_op SOp, double d) -> spin_op"""
    return _pygamma.spinop_divide_double(SOp, d)

def Trace(*args):
    r"""
    Trace(gen_op Op) -> complex
    Trace(spin_op SOp) -> complex
    """
    return _pygamma.Trace(*args)


def PulSerror(eidx, noret=0):
    r"""PulSerror(int eidx, int noret=0)"""
    return _pygamma.PulSerror(eidx, noret)

def PulSfatality(eidx):
    r"""PulSfatality(int eidx) -> void volatile"""
    return _pygamma.PulSfatality(eidx)

def Sxpuls(sys, sigma, H, iso, freq=0.0, tp=1.e-5, theta=90.0):
    r"""Sxpuls(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double theta=90.0) -> gen_op"""
    return _pygamma.Sxpuls(sys, sigma, H, iso, freq, tp, theta)

def SxpulsB(sys, sigma, H, iso, freq=0.0, tp=1.e-5, gamB1=2.5e4):
    r"""SxpulsB(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double gamB1=2.5e4) -> gen_op"""
    return _pygamma.SxpulsB(sys, sigma, H, iso, freq, tp, gamB1)

def Sypuls(sys, sigma, H, iso, freq=0.0, tp=1.e-5, theta=90.0):
    r"""Sypuls(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double theta=90.0) -> gen_op"""
    return _pygamma.Sypuls(sys, sigma, H, iso, freq, tp, theta)

def SypulsB(sys, sigma, H, iso, freq=0.0, tp=1.e-5, gamB1=2.5e4):
    r"""SypulsB(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double gamB1=2.5e4) -> gen_op"""
    return _pygamma.SypulsB(sys, sigma, H, iso, freq, tp, gamB1)

def SxpulsB_U(sys, H, iso, freq=0.0, tp=1.e-5, gamB1=2.5e4):
    r"""SxpulsB_U(spin_sys sys, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double gamB1=2.5e4) -> gen_op"""
    return _pygamma.SxpulsB_U(sys, H, iso, freq, tp, gamB1)

def SypulsB_U(sys, H, iso, freq=0.0, tp=1.e-5, gamB1=2.5e4):
    r"""SypulsB_U(spin_sys sys, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double gamB1=2.5e4) -> gen_op"""
    return _pygamma.SypulsB_U(sys, H, iso, freq, tp, gamB1)

def Sxypuls(*args):
    r"""
    Sxypuls(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double theta=90.0, double phi=0.0) -> gen_op
    Sxypuls(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double tp=1.e-5, double theta=90.0, double phi=0.0) -> gen_op
    """
    return _pygamma.Sxypuls(*args)

def SxypulsB(*args):
    r"""
    SxypulsB(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double gamB1=2.5e4, double phi=0.0) -> gen_op
    SxypulsB(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double tp=1.e-5, double gamB1=2.5e4, double phi=0.0) -> gen_op
    """
    return _pygamma.SxypulsB(*args)

def Sxypuls_U(*args):
    r"""
    Sxypuls_U(spin_sys sys, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double theta=90.0, double phi=0.0) -> gen_op
    Sxypuls_U(spin_sys sys, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double tp=1.e-5, double theta=90.0, double phi=0.0) -> gen_op
    """
    return _pygamma.Sxypuls_U(*args)

def SxypulsB_U(*args):
    r"""
    SxypulsB_U(spin_sys sys, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double gamB1=2.5e4, double phi=0.0) -> gen_op
    SxypulsB_U(spin_sys sys, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double tp=1.e-5, double gamB1=2.5e4, double phi=0.0) -> gen_op
    """
    return _pygamma.SxypulsB_U(*args)

def Spul_axis(sys, sigma, H, iso, freq, tp, fact, axis):
    r"""Spul_axis(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso, double freq, double tp, double fact, char axis) -> gen_op"""
    return _pygamma.Spul_axis(sys, sigma, H, iso, freq, tp, fact, axis)

def Spul_U_axis(sys, H, iso, freq, tp, fact, axis):
    r"""Spul_U_axis(spin_sys sys, gen_op H, std::string const & iso, double freq, double tp, double fact, char axis) -> gen_op"""
    return _pygamma.Spul_U_axis(sys, H, iso, freq, tp, fact, axis)

def Spul_plane(*args):
    r"""
    Spul_plane(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso, double freq, double tp, double fact, double phi) -> gen_op
    Spul_plane(spin_sys sys, gen_op sigma, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double tp, double fact, double phi) -> gen_op
    """
    return _pygamma.Spul_plane(*args)

def Spul_U_plane(*args):
    r"""
    Spul_U_plane(spin_sys sys, gen_op H, std::string const & iso, double freq, double tp, double fact, double phi) -> gen_op
    Spul_U_plane(spin_sys sys, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double tp, double fact, double phi) -> gen_op
    """
    return _pygamma.Spul_U_plane(*args)

def qStatel(sys, bf):
    r"""qStatel(spin_sys sys, int bf) -> std::string"""
    return _pygamma.qStatel(sys, bf)

def tref_labels(*args):
    r"""
    tref_labels(std::string * trlabels, spin_sys sys, gen_op Op, int type=0, double cut=1.e-4, int pbf=1, int pfz=0)
    tref_labels(std::string * trlabels, spin_sys sys, matrix B, int type=0, double cutoff=1.e-4, int pbf=1, int pfz=0)
    """
    return _pygamma.tref_labels(*args)

def tran_types(*args):
    r"""
    tran_types(std::string * trtypes, spin_sys sys, gen_op Op, int type=0, double cut=1.e-4)
    tran_types(std::string * trtypes, spin_sys sys, matrix B, int type=0, double cutoff=1.e-4)
    """
    return _pygamma.tran_types(*args)

def trev_labels(trlabels, Op, cutoff=1.e-6):
    r"""trev_labels(std::string * trlabels, gen_op Op, double cutoff=1.e-6)"""
    return _pygamma.trev_labels(trlabels, Op, cutoff)

def ev_select(select, Op, val1, type=0, val2=0, cutoff=1.e-4, reim=1):
    r"""ev_select(int * select, gen_op Op, double val1, int type=0, double val2=0, double cutoff=1.e-4, int reim=1)"""
    return _pygamma.ev_select(select, Op, val1, type, val2, cutoff, reim)

def tr_select(select, Op, val1, type=0, val2=0, cutoff=1.e-4, reim=1):
    r"""tr_select(int * select, gen_op Op, double val1, int type=0, double val2=0, double cutoff=1.e-4, int reim=1)"""
    return _pygamma.tr_select(select, Op, val1, type, val2, cutoff, reim)

def PulSherror(eidx, noret):
    r"""PulSherror(int eidx, int noret)"""
    return _pygamma.PulSherror(eidx, noret)

def PulShfatality(eidx):
    r"""PulShfatality(int eidx) -> void volatile"""
    return _pygamma.PulShfatality(eidx)

def Shxpuls(sys, BLK, sigma, H, iso, freq=0.0, time=1.0e-5, theta=90.0):
    r"""Shxpuls(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double theta=90.0) -> gen_op"""
    return _pygamma.Shxpuls(sys, BLK, sigma, H, iso, freq, time, theta)

def Shxpuls_U(sys, BLK, H, iso, freq=0.0, time=1.0e-5, theta=90.0):
    r"""Shxpuls_U(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double theta=90.0) -> gen_op"""
    return _pygamma.Shxpuls_U(sys, BLK, H, iso, freq, time, theta)

def Shypuls(sys, BLK, sigma, H, iso, freq=0.0, time=1.0e-5, theta=90.0):
    r"""Shypuls(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double theta=90.0) -> gen_op"""
    return _pygamma.Shypuls(sys, BLK, sigma, H, iso, freq, time, theta)

def Shypuls_U(sys, BLK, H, iso, freq=0.0, time=1.0e-5, theta=90.0):
    r"""Shypuls_U(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double theta=90.0) -> gen_op"""
    return _pygamma.Shypuls_U(sys, BLK, H, iso, freq, time, theta)

def Shxypuls(*args):
    r"""
    Shxypuls(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double theta=90.0, double phi=0.0) -> gen_op
    Shxypuls(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double time=1.0e-5, double theta=90.0, double phi=0.0) -> gen_op
    """
    return _pygamma.Shxypuls(*args)

def Shxypuls_U(*args):
    r"""
    Shxypuls_U(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double theta=90.0, double phi=0.0) -> gen_op
    Shxypuls_U(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double time=1.0e-5, double theta=90.0, double phi=0.0) -> gen_op
    """
    return _pygamma.Shxypuls_U(*args)

def ShxpulsB(sys, BLK, sigma, H, iso, freq=0.0, time=1.0e-5, gamB1=2.5e4):
    r"""ShxpulsB(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double gamB1=2.5e4) -> gen_op"""
    return _pygamma.ShxpulsB(sys, BLK, sigma, H, iso, freq, time, gamB1)

def ShxpulsB_U(sys, BLK, H, iso, freq=0.0, time=1.0e-5, gamB1=2.5e4):
    r"""ShxpulsB_U(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double gamB1=2.5e4) -> gen_op"""
    return _pygamma.ShxpulsB_U(sys, BLK, H, iso, freq, time, gamB1)

def ShypulsB(sys, BLK, sigma, H, iso, freq=0.0, time=1.0e-5, gamB1=2.5e4):
    r"""ShypulsB(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double gamB1=2.5e4) -> gen_op"""
    return _pygamma.ShypulsB(sys, BLK, sigma, H, iso, freq, time, gamB1)

def ShypulsB_U(sys, BLK, H, iso, freq=0.0, time=1.0e-5, gamB1=2.5e4):
    r"""ShypulsB_U(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double gamB1=2.5e4) -> gen_op"""
    return _pygamma.ShypulsB_U(sys, BLK, H, iso, freq, time, gamB1)

def ShxypulsB(*args):
    r"""
    ShxypulsB(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double gamB1=2.5e4, double phi=0.0) -> gen_op
    ShxypulsB(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double time=1.0e-5, double gamB1=2.5e4, double phi=0.0) -> gen_op
    """
    return _pygamma.ShxypulsB(*args)

def ShxypulsB_U(*args):
    r"""
    ShxypulsB_U(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso, double freq=0.0, double time=1.0e-5, double gamB1=2.5e4, double phi=0.0) -> gen_op
    ShxypulsB_U(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double time=1.0e-5, double gamB1=2.5e4, double phi=0.0) -> gen_op
    """
    return _pygamma.ShxypulsB_U(*args)

def Shpul_axis(sys, BLK, sigma, H, iso, freq, time, fact, axis):
    r"""Shpul_axis(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso, double freq, double time, double fact, char axis) -> gen_op"""
    return _pygamma.Shpul_axis(sys, BLK, sigma, H, iso, freq, time, fact, axis)

def Shpul_U_axis(sys, BLK, H, iso, freq, time, fact, axis):
    r"""Shpul_U_axis(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso, double freq, double time, double fact, char axis) -> gen_op"""
    return _pygamma.Shpul_U_axis(sys, BLK, H, iso, freq, time, fact, axis)

def Shpul_plane(*args):
    r"""
    Shpul_plane(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso, double freq, double time, double fact, double phi) -> gen_op
    Shpul_plane(spin_sys sys, row_vector BLK, gen_op sigma, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double time, double fact, double phi) -> gen_op
    """
    return _pygamma.Shpul_plane(*args)

def Shpul_U_plane(*args):
    r"""
    Shpul_U_plane(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso, double freq, double time, double fact, double phi) -> gen_op
    Shpul_U_plane(spin_sys sys, row_vector BLK, gen_op H, std::string const & iso1, double freq1, std::string const & iso2, double freq2, double time, double fact, double phi) -> gen_op
    """
    return _pygamma.Shpul_U_plane(*args)

def Prod_base_dec(*args):
    r"""Prod_base_dec(spin_sys sys, gen_op Op, double thres=BD_SMALL)"""
    return _pygamma.Prod_base_dec(*args)
class genoprep(object):
    r"""Proxy of C++ genoprep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RepMx = property(_pygamma.genoprep_RepMx_get, _pygamma.genoprep_RepMx_set, doc=r"""RepMx : matrix""")
    RepBs = property(_pygamma.genoprep_RepBs_get, _pygamma.genoprep_RepBs_set, doc=r"""RepBs : basis""")
    RepPty = property(_pygamma.genoprep_RepPty_get, _pygamma.genoprep_RepPty_set, doc=r"""RepPty : int""")
    BSPrnt = property(_pygamma.genoprep_BSPrnt_get, _pygamma.genoprep_BSPrnt_set, doc=r"""BSPrnt : bool""")

    def OpReperror(self, eidx, noret=0):
        r"""OpReperror(genoprep self, int eidx, int noret=0)"""
        return _pygamma.genoprep_OpReperror(self, eidx, noret)

    def OpRepfatal(self, eidx):
        r"""OpRepfatal(genoprep self, int eidx) -> void volatile"""
        return _pygamma.genoprep_OpRepfatal(self, eidx)

    def __init__(self, *args):
        r"""
        __init__(genoprep self) -> genoprep
        __init__(genoprep self, genoprep OpRep) -> genoprep
        __init__(genoprep self, matrix mx, basis bs, int pty) -> genoprep
        """
        _pygamma.genoprep_swiginit(self, _pygamma.new_genoprep(*args))
    __swig_destroy__ = _pygamma.delete_genoprep

    def __assign__(self, OpRep):
        r"""__assign__(genoprep self, genoprep OpRep) -> genoprep"""
        return _pygamma.genoprep___assign__(self, OpRep)

    def OpRepCheck(self, warn=2):
        r"""OpRepCheck(genoprep self, int warn=2) -> bool"""
        return _pygamma.genoprep_OpRepCheck(self, warn)

    def write(self, fn):
        r"""write(genoprep self, std::string const & fn)"""
        return _pygamma.genoprep_write(self, fn)

    def read(self, fn):
        r"""read(genoprep self, std::string const & fn)"""
        return _pygamma.genoprep_read(self, fn)

    def __eq__(self, OpRep):
        r"""__eq__(genoprep self, genoprep OpRep) -> bool"""
        return _pygamma.genoprep___eq__(self, OpRep)

    def __ne__(self, OpRep):
        r"""__ne__(genoprep self, genoprep OpRep) -> bool"""
        return _pygamma.genoprep___ne__(self, OpRep)

    def __lt__(self, OpRep):
        r"""__lt__(genoprep self, genoprep OpRep) -> bool"""
        return _pygamma.genoprep___lt__(self, OpRep)

    def __gt__(self, OpRep):
        r"""__gt__(genoprep self, genoprep OpRep) -> bool"""
        return _pygamma.genoprep___gt__(self, OpRep)

# Register genoprep in _pygamma:
_pygamma.genoprep_swigregister(genoprep)
alphabeta = cvar.alphabeta


def GenericD(sys, D, beta=0):
    r"""GenericD(spin_sys sys, spin_op D, double beta=0) -> spin_op"""
    return _pygamma.GenericD(sys, D, beta)

def detector(*args):
    r"""
    detector(spin_sys S, double B=0) -> spin_op
    detector(spin_sys S, char * I, double B=0) -> spin_op
    detector(spin_sys S, int N, double B=0) -> spin_op
    """
    return _pygamma.detector(*args)

def Mxy(*args):
    r"""
    Mxy(spin_sys sys, double beta=0) -> spin_op
    Mxy(spin_sys sys, char * iso, double beta=0) -> spin_op
    Mxy(spin_sys sys, int spin, double beta=0) -> spin_op
    """
    return _pygamma.Mxy(*args)

def detector_sp(S, B=0):
    r"""detector_sp(spin_sys S, double B=0) -> spin_op"""
    return _pygamma.detector_sp(S, B)

def Mxy_sp(sys, beta=0):
    r"""Mxy_sp(spin_sys sys, double beta=0) -> spin_op"""
    return _pygamma.Mxy_sp(sys, beta)

def Rx(*args):
    r"""
    Rx(spin_sys sys, int spin, double beta) -> spin_op
    Rx(spin_sys sys, std::string const & iso, double beta) -> spin_op
    Rx(spin_sys sys, double beta) -> spin_op
    Rx(spin_sys sys, flagvec const & flags, double beta) -> spin_op
    """
    return _pygamma.Rx(*args)

def Rx_sp(sys, beta):
    r"""Rx_sp(spin_sys sys, double beta) -> spin_op"""
    return _pygamma.Rx_sp(sys, beta)

def Ry(*args):
    r"""
    Ry(spin_sys sys, int spin, double beta) -> spin_op
    Ry(spin_sys sys, std::string const & iso, double beta) -> spin_op
    Ry(spin_sys sys, double beta) -> spin_op
    Ry(spin_sys sys, flagvec const & flags, double beta) -> spin_op
    """
    return _pygamma.Ry(*args)

def Ry_sp(sys, beta):
    r"""Ry_sp(spin_sys sys, double beta) -> spin_op"""
    return _pygamma.Ry_sp(sys, beta)

def Rz_sp(sys, beta):
    r"""Rz_sp(spin_sys sys, double beta) -> spin_op"""
    return _pygamma.Rz_sp(sys, beta)

def Raxis_sp(sys, beta, axis):
    r"""Raxis_sp(spin_sys sys, double beta, char axis) -> spin_op"""
    return _pygamma.Raxis_sp(sys, beta, axis)

def Rxy(*args):
    r"""
    Rxy(spin_sys sys, int spin, double phi, double beta) -> spin_op
    Rxy(spin_sys sys, std::string const & iso, double phi, double beta) -> spin_op
    Rxy(spin_sys sys, double phi, double beta) -> spin_op
    Rxy(spin_sys sys, flagvec const & flags, double phi, double B) -> spin_op
    """
    return _pygamma.Rxy(*args)

def Rxy_sp(sys, phi, beta):
    r"""Rxy_sp(spin_sys sys, double phi, double beta) -> spin_op"""
    return _pygamma.Rxy_sp(sys, phi, beta)

def Ryz(*args):
    r"""
    Ryz(spin_sys sys, int spin, double theta, double beta) -> spin_op
    Ryz(spin_sys sys, std::string const & iso, double theta, double beta) -> spin_op
    Ryz(spin_sys sys, double theta, double beta) -> spin_op
    Ryz(spin_sys sys, flagvec const & flags, double T, double B) -> spin_op
    """
    return _pygamma.Ryz(*args)

def Ryz_sp(sys, theta, beta):
    r"""Ryz_sp(spin_sys sys, double theta, double beta) -> spin_op"""
    return _pygamma.Ryz_sp(sys, theta, beta)

def Rzx(*args):
    r"""
    Rzx(spin_sys sys, int spin, double theta, double beta) -> spin_op
    Rzx(spin_sys sys, std::string const & iso, double theta, double beta) -> spin_op
    Rzx(spin_sys sys, double theta, double beta) -> spin_op
    Rzx(spin_sys sys, flagvec const & flags, double P, double B) -> spin_op
    """
    return _pygamma.Rzx(*args)

def Rzx_sp(sys, phi, beta):
    r"""Rzx_sp(spin_sys sys, double phi, double beta) -> spin_op"""
    return _pygamma.Rzx_sp(sys, phi, beta)

def Rplane(*args):
    r"""
    Rplane(spin_sys sys, int spin, double phi, double beta, char p) -> spin_op
    Rplane(spin_sys sys, std::string const & iso, double phi, double beta, char p) -> spin_op
    Rplane(spin_sys sys, double phi, double beta, char p) -> spin_op
    Rplane(spin_sys S, flagvec const & F, double phi, double beta, char p) -> spin_op
    """
    return _pygamma.Rplane(*args)

def Rplane_sp(sys, phi, beta, p):
    r"""Rplane_sp(spin_sys sys, double phi, double beta, char p) -> spin_op"""
    return _pygamma.Rplane_sp(sys, phi, beta, p)

def Rxyz(*args):
    r"""
    Rxyz(spin_sys sys, int spin, double theta, double phi, double beta) -> spin_op
    Rxyz(spin_sys sys, std::string const & iso, double theta, double phi, double beta) -> spin_op
    Rxyz(spin_sys sys, double theta, double phi, double beta) -> spin_op
    Rxyz(spin_sys sys, flagvec const & flags, double theta, double phi, double beta) -> spin_op
    """
    return _pygamma.Rxyz(*args)

def Rxyz_sp(sys, theta, phi, beta):
    r"""Rxyz_sp(spin_sys sys, double theta, double phi, double beta) -> spin_op"""
    return _pygamma.Rxyz_sp(sys, theta, phi, beta)

def Rspace(sys, flags, theta, phi, beta):
    r"""Rspace(spin_sys sys, flagvec const & flags, double theta, double phi, double beta) -> spin_op"""
    return _pygamma.Rspace(sys, flags, theta, phi, beta)

def R_Euler(*args):
    r"""
    R_Euler(spin_sys sys, int spin, double a, double b, double g) -> spin_op
    R_Euler(spin_sys sys, std::string const & iso, double alpha, double beta, double gamma) -> spin_op
    R_Euler(spin_sys sys, double alpha, double beta, double gamma) -> spin_op
    """
    return _pygamma.R_Euler(*args)

def R_Euler_sp(sys, alpha, beta, gamma):
    r"""R_Euler_sp(spin_sys sys, double alpha, double beta, double gamma) -> spin_op"""
    return _pygamma.R_Euler_sp(sys, alpha, beta, gamma)

def R_Euler_plane(sys, flags, alpha, beta, gamma):
    r"""R_Euler_plane(spin_sys sys, flagvec const & flags, double alpha, double beta, double gamma) -> spin_op"""
    return _pygamma.R_Euler_plane(sys, flags, alpha, beta, gamma)

def Ixy(sys, spin, theta):
    r"""Ixy(spin_sys sys, int spin, double theta) -> spin_op"""
    return _pygamma.Ixy(sys, spin, theta)

def Fxy(*args):
    r"""
    Fxy(spin_sys sys, int spin, double theta) -> spin_op
    Fxy(spin_sys sys, std::string const & iso, double theta) -> spin_op
    Fxy(spin_sys sys, double theta) -> spin_op
    Fxy(spin_sys sys, flagvec const & flags, double theta) -> spin_op
    """
    return _pygamma.Fxy(*args)

def Fxy_sp(sys, theta):
    r"""Fxy_sp(spin_sys sys, double theta) -> spin_op"""
    return _pygamma.Fxy_sp(sys, theta)

def Fp_sp(*args):
    r"""
    Fp_sp(spin_sys sys) -> spin_op
    Fp_sp(spin_sys sys, double theta) -> spin_op
    """
    return _pygamma.Fp_sp(*args)

def Fm_sp(*args):
    r"""
    Fm_sp(spin_sys sys) -> spin_op
    Fm_sp(spin_sys sys, double theta) -> spin_op
    """
    return _pygamma.Fm_sp(*args)

def Fplane(sys, theta, OPtype):
    r"""Fplane(spin_sys sys, double theta, char OPtype) -> spin_op"""
    return _pygamma.Fplane(sys, theta, OPtype)

def RotSpinOp(R, F):
    r"""RotSpinOp(spin_op R, spin_op F) -> spin_op"""
    return _pygamma.RotSpinOp(R, F)

def Ie(*args):
    r"""
    Ie(spin_sys sys, int spin) -> spin_op
    Ie(int qn) -> matrix
    """
    return _pygamma.Ie(*args)

def Ix(*args):
    r"""
    Ix(spin_sys sys, int spin) -> spin_op
    Ix(int qn) -> matrix
    """
    return _pygamma.Ix(*args)

def Iy(*args):
    r"""
    Iy(spin_sys sys, int spin) -> spin_op
    Iy(int qn) -> matrix
    """
    return _pygamma.Iy(*args)

def Iz(*args):
    r"""
    Iz(spin_sys sys, int spin) -> spin_op
    Iz(int qn) -> matrix
    """
    return _pygamma.Iz(*args)

def Ip(*args):
    r"""
    Ip(spin_sys sys, int spin) -> spin_op
    Ip(spin_sys sys, int spin, double theta) -> spin_op
    Ip(int qn) -> matrix
    """
    return _pygamma.Ip(*args)

def Im(*args):
    r"""
    Im(spin_sys sys, int spin) -> spin_op
    Im(spin_sys sys, int spin, double theta) -> spin_op
    Im(int qn) -> matrix
    """
    return _pygamma.Im(*args)

def Raxis(*args):
    r"""
    Raxis(spin_sys sys, int I, double beta, char axis) -> spin_op
    Raxis(spin_sys sys, std::string const & iso, double beta, char axis) -> spin_op
    Raxis(spin_sys sys, double beta, char axis) -> spin_op
    Raxis(spin_sys sys, flagvec const & flags, double B, char A) -> spin_op
    Raxis(int qn, double beta, char axis) -> matrix
    """
    return _pygamma.Raxis(*args)

def left(Op):
    r"""left(gen_op Op) -> super_op"""
    return _pygamma.left(Op)

def right(Op):
    r"""right(gen_op Op) -> super_op"""
    return _pygamma.right(Op)

def U_transform(Op):
    r"""U_transform(gen_op Op) -> super_op"""
    return _pygamma.U_transform(Op)

def commutator(Op):
    r"""commutator(gen_op Op) -> super_op"""
    return _pygamma.commutator(Op)

def d_commutator(*args):
    r"""
    d_commutator(gen_op Op, complex z=complex1) -> super_op
    d_commutator(gen_op Op1, gen_op Op2) -> super_op
    d_commutator(gen_op Op1, gen_op Op2, complex z) -> super_op
    """
    return _pygamma.d_commutator(*args)
class super_op(object):
    r"""Proxy of C++ super_op class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(super_op self) -> super_op
        __init__(super_op self, super_op LOp1) -> super_op
        __init__(super_op self, gen_op Op1, gen_op Op2) -> super_op
        """
        _pygamma.super_op_swiginit(self, _pygamma.new_super_op(*args))
    __swig_destroy__ = _pygamma.delete_super_op

    def __add__(self, LOp1):
        r"""__add__(super_op self, super_op LOp1) -> super_op"""
        return _pygamma.super_op___add__(self, LOp1)

    def __iadd__(self, LOp1):
        r"""__iadd__(super_op self, super_op LOp1) -> super_op"""
        return _pygamma.super_op___iadd__(self, LOp1)

    def __sub__(self, *args):
        r"""
        __sub__(super_op self, super_op LOp1) -> super_op
        __sub__(super_op self) -> super_op
        """
        return _pygamma.super_op___sub__(self, *args)

    def __isub__(self, LOp1):
        r"""__isub__(super_op self, super_op LOp1) -> super_op"""
        return _pygamma.super_op___isub__(self, LOp1)

    def __mul__(self, LOp1):
        r"""__mul__(super_op self, super_op LOp1) -> super_op"""
        return _pygamma.super_op___mul__(self, LOp1)

    def __iand__(self, LOp1):
        r"""__iand__(super_op self, super_op LOp1) -> super_op"""
        return _pygamma.super_op___iand__(self, LOp1)

    def __imul__(self, *args):
        r"""
        __imul__(super_op self, super_op LOp1) -> super_op
        __imul__(super_op self, complex z) -> super_op
        __imul__(super_op self, double d) -> super_op
        """
        return _pygamma.super_op___imul__(self, *args)

    def __itruediv__(self, *args):
        return _pygamma.super_op___idiv__(self, *args)
    __idiv__ = __itruediv__



    def exp(self, *args):
        r"""
        exp(super_op self) -> super_op
        exp(super_op self, complex t, double cutoff=1.e-12) -> super_op
        """
        return _pygamma.super_op_exp(self, *args)

    def set_EBR(self):
        r"""set_EBR(super_op self)"""
        return _pygamma.super_op_set_EBR(self)

    def set_HBR(self):
        r"""set_HBR(super_op self)"""
        return _pygamma.super_op_set_HBR(self)

    def set_DBR(self):
        r"""set_DBR(super_op self)"""
        return _pygamma.super_op_set_DBR(self)

    def LOp_Hbase(self, LOp1, warn=0):
        r"""LOp_Hbase(super_op self, super_op LOp1, int warn=0)"""
        return _pygamma.super_op_LOp_Hbase(self, LOp1, warn)

    def LOp_base(self, *args):
        r"""
        LOp_base(super_op self, super_op LOp1)
        LOp_base(super_op self, gen_op Op)
        """
        return _pygamma.super_op_LOp_base(self, *args)

    def SetHSBaseOf(self, Op):
        r"""SetHSBaseOf(super_op self, gen_op Op)"""
        return _pygamma.super_op_SetHSBaseOf(self, Op)

    def HS(self):
        r"""HS(super_op self) -> int"""
        return _pygamma.super_op_HS(self)

    def size(self):
        r"""size(super_op self) -> int"""
        return _pygamma.super_op_size(self)

    def dim(self):
        r"""dim(super_op self) -> int"""
        return _pygamma.super_op_dim(self)

    def LS(self):
        r"""LS(super_op self) -> int"""
        return _pygamma.super_op_LS(self)

    def eigenvalues(self, nc=4, ri=0):
        r"""eigenvalues(super_op self, int nc=4, int ri=0)"""
        return _pygamma.super_op_eigenvalues(self, nc, ri)

    def Bs(self):
        r"""Bs(super_op self) -> basis"""
        return _pygamma.super_op_Bs(self)

    def get_basis(self):
        r"""get_basis(super_op self) -> basis"""
        return _pygamma.super_op_get_basis(self)

    def put_basis(self, Hbs):
        r"""put_basis(super_op self, basis Hbs)"""
        return _pygamma.super_op_put_basis(self, Hbs)

    def LBs(self):
        r"""LBs(super_op self) -> basis"""
        return _pygamma.super_op_LBs(self)

    def get_Lbasis(self):
        r"""get_Lbasis(super_op self) -> basis"""
        return _pygamma.super_op_get_Lbasis(self)

    def put_Lbasis(self, Lbs):
        r"""put_Lbasis(super_op self, basis Lbs)"""
        return _pygamma.super_op_put_Lbasis(self, Lbs)

    def __call__(self, row, col):
        r"""__call__(super_op self, int row, int col) -> complex"""
        return _pygamma.super_op___call__(self, row, col)

    def put(self, row, col, z):
        r"""put(super_op self, int row, int col, complex z)"""
        return _pygamma.super_op_put(self, row, col, z)

    def get(self, row, col):
        r"""get(super_op self, int row, int col) -> complex"""
        return _pygamma.super_op_get(self, row, col)

    def checkLOp(self, *args):
        r"""
        checkLOp(super_op self, super_op LOp1, int warn=2) -> bool
        checkLOp(super_op self, gen_op Op, int warn=2) -> bool
        checkLOp(super_op self, int row, int col, int warn=2) -> bool
        """
        return _pygamma.super_op_checkLOp(self, *args)

    def status(self):
        r"""status(super_op self)"""
        return _pygamma.super_op_status(self)

    def __eq__(self, LOp1):
        r"""__eq__(super_op self, super_op LOp1) -> int"""
        return _pygamma.super_op___eq__(self, LOp1)

    def below(self, d):
        r"""below(super_op self, double d) -> int"""
        return _pygamma.super_op_below(self, d)

    def write(self, fn):
        r"""write(super_op self, std::string const & fn)"""
        return _pygamma.super_op_write(self, fn)

    def read(self, *args):
        r"""
        read(super_op self, std::string const & fn)
        read(super_op self, std::string const & fn, gen_op Op)
        read(super_op self, std::string const & fn, super_op LOp1)
        """
        return _pygamma.super_op_read(self, *args)

# Register super_op in _pygamma:
_pygamma.super_op_swigregister(super_op)

class sys_dynamic(spin_system, coord_vec):
    r"""Proxy of C++ sys_dynamic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(sys_dynamic self) -> sys_dynamic
        __init__(sys_dynamic self, int spins) -> sys_dynamic
        __init__(sys_dynamic self, sys_dynamic dsys) -> sys_dynamic
        """
        if self.__class__ == sys_dynamic:
            _self = None
        else:
            _self = self
        _pygamma.sys_dynamic_swiginit(self, _pygamma.new_sys_dynamic(_self, *args))

    def __assign__(self, dsys):
        r"""__assign__(sys_dynamic self, sys_dynamic dsys) -> sys_dynamic"""
        return _pygamma.sys_dynamic___assign__(self, dsys)
    __swig_destroy__ = _pygamma.delete_sys_dynamic

    def shifts(self, shift=0):
        r"""shifts(sys_dynamic self, double shift=0)"""
        return _pygamma.sys_dynamic_shifts(self, shift)

    def shift(self, *args):
        r"""
        shift(sys_dynamic self, double shift, int spin)
        shift(sys_dynamic self, int spin, double shift)
        shift(sys_dynamic self, int spin) -> double
        """
        return _pygamma.sys_dynamic_shift(self, *args)

    def offsetShifts(self, *args):
        r"""
        offsetShifts(sys_dynamic self, double offset, int spin)
        offsetShifts(sys_dynamic self, double offset, std::string const & iso)
        """
        return _pygamma.sys_dynamic_offsetShifts(self, *args)

    def PPM(self, arg0, arg1):
        r"""PPM(sys_dynamic self, int arg0, double arg1)"""
        return _pygamma.sys_dynamic_PPM(self, arg0, arg1)

    def delz(self, *args):
        r"""
        delz(sys_dynamic self, int spin) -> double
        delz(sys_dynamic self, int spin, double delzz)
        """
        return _pygamma.sys_dynamic_delz(self, *args)

    def Ceta(self, *args):
        r"""
        Ceta(sys_dynamic self, int spin) -> double
        Ceta(sys_dynamic self, int spin, double ceta)
        """
        return _pygamma.sys_dynamic_Ceta(self, *args)

    def TC(self, *args):
        r"""
        TC(sys_dynamic self, int spin) -> space_T
        TC(sys_dynamic self, space_T A, int spin)
        """
        return _pygamma.sys_dynamic_TC(self, *args)

    def xiC_vector(self):
        r"""xiC_vector(sys_dynamic self) -> row_vector"""
        return _pygamma.sys_dynamic_xiC_vector(self)

    def xiC(self, spin):
        r"""xiC(sys_dynamic self, int spin) -> double"""
        return _pygamma.sys_dynamic_xiC(self, spin)

    def CSA(self):
        r"""CSA(sys_dynamic self) -> bool"""
        return _pygamma.sys_dynamic_CSA(self)

    def coords(self, cvec, cutoff=5.e-10):
        r"""coords(sys_dynamic self, coord_vec cvec, double cutoff=5.e-10)"""
        return _pygamma.sys_dynamic_coords(self, cvec, cutoff)

    def Coord(self):
        r"""Coord(sys_dynamic self) -> bool"""
        return _pygamma.sys_dynamic_Coord(self)

    def DCC(self, *args):
        r"""
        DCC(sys_dynamic self, int spin1, int spin2) -> double
        DCC(sys_dynamic self, int spin1, int spin2, double nu)
        """
        return _pygamma.sys_dynamic_DCC(self, *args)

    def Ddelz(self, *args):
        r"""
        Ddelz(sys_dynamic self, int spin1, int spin2) -> double
        Ddelz(sys_dynamic self, int spin1, int spin2, double delzz)
        """
        return _pygamma.sys_dynamic_Ddelz(self, *args)

    def Deta(self, *args):
        r"""
        Deta(sys_dynamic self, int spin1, int spin2) -> double
        Deta(sys_dynamic self, int spin1, int spin2, double Deta)
        """
        return _pygamma.sys_dynamic_Deta(self, *args)

    def AD(self, *args):
        r"""
        AD(sys_dynamic self, int spin1, int spin2) -> space_T
        AD(sys_dynamic self, int dip) -> space_T
        """
        return _pygamma.sys_dynamic_AD(self, *args)

    def dipoles(self):
        r"""dipoles(sys_dynamic self) -> int"""
        return _pygamma.sys_dynamic_dipoles(self)

    def dipole(self, spin1, spin2):
        r"""dipole(sys_dynamic self, int spin1, int spin2) -> int"""
        return _pygamma.sys_dynamic_dipole(self, spin1, spin2)

    def xiD_matrix(self):
        r"""xiD_matrix(sys_dynamic self) -> matrix"""
        return _pygamma.sys_dynamic_xiD_matrix(self)

    def Dip(self):
        r"""Dip(sys_dynamic self) -> bool"""
        return _pygamma.sys_dynamic_Dip(self)

    def QCC(self, *args):
        r"""
        QCC(sys_dynamic self, int spin) -> double
        QCC(sys_dynamic self, int spin, double nu)
        """
        return _pygamma.sys_dynamic_QCC(self, *args)

    def Qdelz(self, *args):
        r"""
        Qdelz(sys_dynamic self, int spin) -> double
        Qdelz(sys_dynamic self, int spin, double delzz)
        """
        return _pygamma.sys_dynamic_Qdelz(self, *args)

    def Qeta(self, *args):
        r"""
        Qeta(sys_dynamic self, int spin) -> double
        Qeta(sys_dynamic self, int spin, double Qeta)
        """
        return _pygamma.sys_dynamic_Qeta(self, *args)

    def TQ(self, *args):
        r"""
        TQ(sys_dynamic self, int spin) -> space_T
        TQ(sys_dynamic self, space_T A, int spin)
        """
        return _pygamma.sys_dynamic_TQ(self, *args)

    def xiQ_vector(self):
        r"""xiQ_vector(sys_dynamic self) -> row_vector"""
        return _pygamma.sys_dynamic_xiQ_vector(self)

    def xiQ(self, spin):
        r"""xiQ(sys_dynamic self, int spin) -> double"""
        return _pygamma.sys_dynamic_xiQ(self, spin)

    def Quad(self):
        r"""Quad(sys_dynamic self) -> bool"""
        return _pygamma.sys_dynamic_Quad(self)

    def TR(self, spin):
        r"""TR(sys_dynamic self, int spin) -> double"""
        return _pygamma.sys_dynamic_TR(self, spin)

    def tauR(self):
        r"""tauR(sys_dynamic self) -> double"""
        return _pygamma.sys_dynamic_tauR(self)

    def xiR_vector(self):
        r"""xiR_vector(sys_dynamic self) -> row_vector"""
        return _pygamma.sys_dynamic_xiR_vector(self)

    def xiR(self, spin):
        r"""xiR(sys_dynamic self, int spin) -> double"""
        return _pygamma.sys_dynamic_xiR(self, spin)

    def setCoords(self, pset, mand=0):
        r"""setCoords(sys_dynamic self, ParameterSet pset, int mand=0) -> int"""
        return _pygamma.sys_dynamic_setCoords(self, pset, mand)

    def setDip(self):
        r"""setDip(sys_dynamic self)"""
        return _pygamma.sys_dynamic_setDip(self)

    def SetCSA(self, pset):
        r"""SetCSA(sys_dynamic self, ParameterSet pset)"""
        return _pygamma.sys_dynamic_SetCSA(self, pset)

    def setQuad(self, pset):
        r"""setQuad(sys_dynamic self, ParameterSet pset)"""
        return _pygamma.sys_dynamic_setQuad(self, pset)

    def setRand(self, pset):
        r"""setRand(sys_dynamic self, ParameterSet pset)"""
        return _pygamma.sys_dynamic_setRand(self, pset)

    def setTaus(self, pset, mand=0):
        r"""setTaus(sys_dynamic self, ParameterSet pset, int mand=0)"""
        return _pygamma.sys_dynamic_setTaus(self, pset, mand)

    def setKs(self, pset, warn=True):
        r"""setKs(sys_dynamic self, ParameterSet pset, bool warn=True) -> bool"""
        return _pygamma.sys_dynamic_setKs(self, pset, warn)

    def write(self, filename):
        r"""write(sys_dynamic self, std::string const & filename)"""
        return _pygamma.sys_dynamic_write(self, filename)

    def read(self, *args):
        r"""
        read(sys_dynamic self, std::string const & filename, int idx=-1, int warn=2) -> int
        read(sys_dynamic self, ParameterSet pset, int idx=-1, int warn=2) -> int
        """
        return _pygamma.sys_dynamic_read(self, *args)

    def ask_read(self, *args):
        r"""
        ask_read(sys_dynamic self, int argc, char *[] argv, int argn) -> std::string
        ask_read(sys_dynamic self, int argc, char *[] argv, int argn, std::string const & _def) -> std::string
        """
        return _pygamma.sys_dynamic_ask_read(self, *args)

    def taus(self):
        r"""taus(sys_dynamic self) -> coord"""
        return _pygamma.sys_dynamic_taus(self)

    def taux(self, *args):
        r"""
        taux(sys_dynamic self) -> double
        taux(sys_dynamic self, double tau)
        """
        return _pygamma.sys_dynamic_taux(self, *args)

    def tauy(self, *args):
        r"""
        tauy(sys_dynamic self) -> double
        tauy(sys_dynamic self, double tau)
        """
        return _pygamma.sys_dynamic_tauy(self, *args)

    def tauz(self, *args):
        r"""
        tauz(sys_dynamic self) -> double
        tauz(sys_dynamic self, double tau)
        """
        return _pygamma.sys_dynamic_tauz(self, *args)

    def Kex_zero(self):
        r"""Kex_zero(sys_dynamic self)"""
        return _pygamma.sys_dynamic_Kex_zero(self)

    def Kex(self, *args):
        r"""
        Kex(sys_dynamic self, int p) -> double
        Kex(sys_dynamic self, double K, int p)
        Kex(sys_dynamic self, int i, int j, double K)
        Kex(sys_dynamic self, int N, int * Is, double K)
        """
        return _pygamma.sys_dynamic_Kex(self, *args)

    def MExProcs(self):
        r"""MExProcs(sys_dynamic self) -> std::vector< ExchProcM,std::allocator< ExchProcM > > const &"""
        return _pygamma.sys_dynamic_MExProcs(self)

    def PtStrings(self, w1=10, w2=12, digs=2):
        r"""PtStrings(sys_dynamic self, int w1=10, int w2=12, int digs=2) -> StringVector"""
        return _pygamma.sys_dynamic_PtStrings(self, w1, w2, digs)

    def AQStrings(self, w1=10, w2=12, digs=2):
        r"""AQStrings(sys_dynamic self, int w1=10, int w2=12, int digs=2) -> StringVector"""
        return _pygamma.sys_dynamic_AQStrings(self, w1, w2, digs)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_sys_dynamic(self)
        return weakref.proxy(self)

# Register sys_dynamic in _pygamma:
_pygamma.sys_dynamic_swigregister(sys_dynamic)


def SigmaEq(sys):
    r"""SigmaEq(spin_sys sys) -> gen_op"""
    return _pygamma.SigmaEq(sys)

def SigmaSS(*args):
    r"""
    SigmaSS(spin_sys sys, super_op L, super_op R, int wrn) -> gen_op
    SigmaSS(super_op L, super_op R, gen_op seq, int wrn) -> gen_op
    """
    return _pygamma.SigmaSS(*args)
class densop(gen_op):
    r"""Proxy of C++ densop class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(densop self) -> densop
        __init__(densop self, spin_sys sys) -> densop
        __init__(densop self, spin_sys sys, super_op L, super_op R) -> densop
        __init__(densop self, super_op L, super_op R, gen_op sigmaeq) -> densop
        __init__(densop self, gen_op Op, double tevol) -> densop
        __init__(densop self, densop Sigma) -> densop
        """
        if self.__class__ == densop:
            _self = None
        else:
            _self = self
        _pygamma.densop_swiginit(self, _pygamma.new_densop(_self, *args))
    __swig_destroy__ = _pygamma.delete_densop

    def __assign__(self, Sigma1):
        r"""__assign__(densop self, densop Sigma1) -> densop"""
        return _pygamma.densop___assign__(self, Sigma1)

    def length(self):
        r"""length(densop self) -> double"""
        return _pygamma.densop_length(self)

    def SetTrace(self, tr):
        r"""SetTrace(densop self, double tr)"""
        return _pygamma.densop_SetTrace(self, tr)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_densop(self)
        return weakref.proxy(self)

# Register densop in _pygamma:
_pygamma.densop_swigregister(densop)


def R_prop(*args):
    r"""
    R_prop(super_op eLt, gen_op sigmaeq) -> super_op
    R_prop(super_op L, gen_op sigmaeq, double t) -> super_op
    """
    return _pygamma.R_prop(*args)
class LSprop(object):
    r"""Proxy of C++ LSprop class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LSprop self) -> LSprop
        __init__(LSprop self, int LS) -> LSprop
        __init__(LSprop self, gen_op H, double tevol) -> LSprop
        __init__(LSprop self, gen_op H, double tevol, bool prop) -> LSprop
        __init__(LSprop self, HSprop U) -> LSprop
        __init__(LSprop self, super_op L, double tevol) -> LSprop
        __init__(LSprop self, super_op L, densop sigma_ss, double tevol) -> LSprop
        __init__(LSprop self, super_op G) -> LSprop
        __init__(LSprop self, LSprop G) -> LSprop
        """
        _pygamma.LSprop_swiginit(self, _pygamma.new_LSprop(*args))
    __swig_destroy__ = _pygamma.delete_LSprop

    def __assign__(self, G1):
        r"""__assign__(LSprop self, LSprop G1) -> LSprop"""
        return _pygamma.LSprop___assign__(self, G1)

    def time(self):
        r"""time(LSprop self) -> double"""
        return _pygamma.LSprop_time(self)

    def dim(self):
        r"""dim(LSprop self) -> int"""
        return _pygamma.LSprop_dim(self)

    def HS(self):
        r"""HS(LSprop self) -> int"""
        return _pygamma.LSprop_HS(self)

    def LS(self):
        r"""LS(LSprop self) -> int"""
        return _pygamma.LSprop_LS(self)

    def LOp(self):
        r"""LOp(LSprop self) -> super_op"""
        return _pygamma.LSprop_LOp(self)

    def L(self, LOp):
        r"""L(LSprop self, super_op LOp)"""
        return _pygamma.LSprop_L(self, LOp)

    def length(self, *args):
        r"""
        length(LSprop self) -> double
        length(LSprop self, double t)
        """
        return _pygamma.LSprop_length(self, *args)

    def SetEBR(self):
        r"""SetEBR(LSprop self)"""
        return _pygamma.LSprop_SetEBR(self)

    def SetBasis(self, LOp):
        r"""SetBasis(LSprop self, super_op LOp)"""
        return _pygamma.LSprop_SetBasis(self, LOp)

    def evolve(self, Op):
        r"""evolve(LSprop self, gen_op Op) -> gen_op"""
        return _pygamma.LSprop_evolve(self, Op)

    def __mul__(self, G):
        r"""__mul__(LSprop self, LSprop G) -> LSprop"""
        return _pygamma.LSprop___mul__(self, G)

    def __imul__(self, G):
        r"""__imul__(LSprop self, LSprop G) -> LSprop"""
        return _pygamma.LSprop___imul__(self, G)

    def __iand__(self, G):
        r"""__iand__(LSprop self, LSprop G) -> LSprop"""
        return _pygamma.LSprop___iand__(self, G)

# Register LSprop in _pygamma:
_pygamma.LSprop_swigregister(LSprop)


def FIDx(sigma, sigma0, det, L, fid, dt, np=0):
    r"""FIDx(gen_op sigma, gen_op sigma0, gen_op det, super_op L, row_vector fid, double dt, int np=0)"""
    return _pygamma.FIDx(sigma, sigma0, det, L, fid, dt, np)

def FIDrot(sigma, sigma0, det, L, Fz, Wrf, time, fid, dt, np=0):
    r"""FIDrot(gen_op sigma, gen_op sigma0, gen_op det, super_op L, gen_op Fz, double Wrf, double time, row_vector fid, double dt, int np=0)"""
    return _pygamma.FIDrot(sigma, sigma0, det, L, Fz, Wrf, time, fid, dt, np)

def wf_labels(*args):
    r"""
    wf_labels(std::string * wflabels, spin_sys sys, gen_op Op, double cutoff=1.e-4, int pbf=1, int pfz=1)
    wf_labels(std::string * wflabels, int * filter, spin_sys sys, gen_op Op, double cut=1.e-4, int pbf=1, int pfz=1)
    wf_labels(std::string * wflabels, spin_sys sys, matrix B, double cutoff=1.e-4, int pbf=1, int pfz=1)
    wf_labels(std::string * wflabels, int * filter, spin_sys sys, matrix B, double cut=1.e-4, int pbf=1, int pfz=1)
    wf_labels(std::string * wflabels, spin_sys sys, super_op LOp, double cut=1.e-4, int type=-1, int pbf=-1, int pfz=0)
    wf_labels(std::string * wflabels, int * filter, spin_sys sys, super_op LOp, double cut=1.e-4, int type=-1, int pbf=-1, int pfz=0)
    wf_labels(std::string * wflabels, spin_sys sys, matrix B, matrix HB, double cut=1.e-4, int type=-1, int pbf=-1, int pfz=0)
    wf_labels(std::string * wflabels, int * index, spin_sys sys, matrix B, matrix HB, double cut=1.e-4, int type=-1, int pbf=-1, int pfz=0)
    """
    return _pygamma.wf_labels(*args)

def ev_labels(*args):
    r"""
    ev_labels(std::string * evlabels, gen_op Op, double cutoff=1.e-6)
    ev_labels(std::string * evlabels, int * filter, gen_op Op, double cutoff=1.e-6)
    ev_labels(std::string * evlabels, super_op LOp, double cutoff=1.e-6)
    ev_labels(std::string * evlabels, int * filter, super_op LOp, double cutoff=1.e-6)
    """
    return _pygamma.ev_labels(*args)

def wavefunctions(*args):
    r"""
    wavefunctions(spin_sys sys, gen_op Op, int pbf)
    wavefunctions(std::ostream & ostr, spin_sys sys, super_op LOp, double cutoff=1.e-4, int type=-1, int pbf=-1, int pfz=0, int title=1)
    wavefunctions(std::ostream & ostr, int * filter, spin_sys sys, super_op LOp, double cutoff=1.e-4, int type=-1, int pbf=-1, int pfz=0, int title=1)
    """
    return _pygamma.wavefunctions(*args)

def eigensystem(ostr, sys, LOp, cute=1.e-6, cutc=1.e-4, type=-1, pbf=-1, pfz=0, title=1):
    r"""eigensystem(std::ostream & ostr, spin_sys sys, super_op LOp, double cute=1.e-6, double cutc=1.e-4, int type=-1, int pbf=-1, int pfz=0, int title=1)"""
    return _pygamma.eigensystem(ostr, sys, LOp, cute, cutc, type, pbf, pfz, title)

def lsprint(LOp, cutoff=1.e-6, nc=4, ri=0):
    r"""lsprint(super_op LOp, double cutoff=1.e-6, int nc=4, int ri=0)"""
    return _pygamma.lsprint(LOp, cutoff, nc, ri)

def eigenvalues(LOp, sort=1, nc=4, ri=0):
    r"""eigenvalues(super_op LOp, int sort=1, int nc=4, int ri=0)"""
    return _pygamma.eigenvalues(LOp, sort, nc, ri)

def UOrderMQC(sys):
    r"""UOrderMQC(spin_sys sys) -> matrix"""
    return _pygamma.UOrderMQC(sys)

def OrderMQC(*args):
    r"""
    OrderMQC(super_op LOp, matrix U) -> super_op
    OrderMQC(super_op LOp, spin_sys sys) -> super_op
    """
    return _pygamma.OrderMQC(*args)

def solve_it(X, Uguess, b, lim=10):
    r"""solve_it(matrix X, matrix Uguess, matrix b, int lim=10) -> matrix"""
    return _pygamma.solve_it(X, Uguess, b, lim)

def invert_it(X):
    r"""invert_it(matrix X) -> matrix"""
    return _pygamma.invert_it(X)

def LU_decomp(A, indx):
    r"""LU_decomp(matrix A, int * indx) -> int"""
    return _pygamma.LU_decomp(A, indx)

def LU_backsub(ALU, indx, b):
    r"""LU_backsub(matrix ALU, int * indx, matrix b)"""
    return _pygamma.LU_backsub(ALU, indx, b)

def LU_invert(A):
    r"""LU_invert(matrix A) -> matrix"""
    return _pygamma.LU_invert(A)
class StringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StringVector self) -> SwigPyIterator"""
        return _pygamma.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringVector self) -> bool"""
        return _pygamma.StringVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringVector self) -> bool"""
        return _pygamma.StringVector___bool__(self)

    def __len__(self):
        r"""__len__(StringVector self) -> std::vector< std::string >::size_type"""
        return _pygamma.StringVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector"""
        return _pygamma.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)
        """
        return _pygamma.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _pygamma.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)
        __delitem__(StringVector self, PySliceObject * slice)
        """
        return _pygamma.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector
        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _pygamma.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)
        __setitem__(StringVector self, PySliceObject * slice)
        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _pygamma.StringVector___setitem__(self, *args)

    def pop(self):
        r"""pop(StringVector self) -> std::vector< std::string >::value_type"""
        return _pygamma.StringVector_pop(self)

    def append(self, x):
        r"""append(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _pygamma.StringVector_append(self, x)

    def empty(self):
        r"""empty(StringVector self) -> bool"""
        return _pygamma.StringVector_empty(self)

    def size(self):
        r"""size(StringVector self) -> std::vector< std::string >::size_type"""
        return _pygamma.StringVector_size(self)

    def swap(self, v):
        r"""swap(StringVector self, StringVector v)"""
        return _pygamma.StringVector_swap(self, v)

    def begin(self):
        r"""begin(StringVector self) -> std::vector< std::string >::iterator"""
        return _pygamma.StringVector_begin(self)

    def end(self):
        r"""end(StringVector self) -> std::vector< std::string >::iterator"""
        return _pygamma.StringVector_end(self)

    def rbegin(self):
        r"""rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _pygamma.StringVector_rbegin(self)

    def rend(self):
        r"""rend(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _pygamma.StringVector_rend(self)

    def clear(self):
        r"""clear(StringVector self)"""
        return _pygamma.StringVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringVector self) -> std::vector< std::string >::allocator_type"""
        return _pygamma.StringVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StringVector self)"""
        return _pygamma.StringVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _pygamma.StringVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringVector self) -> StringVector
        __init__(StringVector self, StringVector other) -> StringVector
        __init__(StringVector self, std::vector< std::string >::size_type size) -> StringVector
        __init__(StringVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector
        """
        _pygamma.StringVector_swiginit(self, _pygamma.new_StringVector(*args))

    def push_back(self, x):
        r"""push_back(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _pygamma.StringVector_push_back(self, x)

    def front(self):
        r"""front(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _pygamma.StringVector_front(self)

    def back(self):
        r"""back(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _pygamma.StringVector_back(self)

    def assign(self, n, x):
        r"""assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _pygamma.StringVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StringVector self, std::vector< std::string >::size_type new_size)
        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _pygamma.StringVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _pygamma.StringVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StringVector self, std::vector< std::string >::size_type n)"""
        return _pygamma.StringVector_reserve(self, n)

    def capacity(self):
        r"""capacity(StringVector self) -> std::vector< std::string >::size_type"""
        return _pygamma.StringVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_StringVector

# Register StringVector in _pygamma:
_pygamma.StringVector_swigregister(StringVector)

class IntVector(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(IntVector self) -> SwigPyIterator"""
        return _pygamma.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntVector self) -> bool"""
        return _pygamma.IntVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntVector self) -> bool"""
        return _pygamma.IntVector___bool__(self)

    def __len__(self):
        r"""__len__(IntVector self) -> std::vector< int >::size_type"""
        return _pygamma.IntVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _pygamma.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)
        """
        return _pygamma.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _pygamma.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _pygamma.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _pygamma.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _pygamma.IntVector___setitem__(self, *args)

    def pop(self):
        r"""pop(IntVector self) -> std::vector< int >::value_type"""
        return _pygamma.IntVector_pop(self)

    def append(self, x):
        r"""append(IntVector self, std::vector< int >::value_type const & x)"""
        return _pygamma.IntVector_append(self, x)

    def empty(self):
        r"""empty(IntVector self) -> bool"""
        return _pygamma.IntVector_empty(self)

    def size(self):
        r"""size(IntVector self) -> std::vector< int >::size_type"""
        return _pygamma.IntVector_size(self)

    def swap(self, v):
        r"""swap(IntVector self, IntVector v)"""
        return _pygamma.IntVector_swap(self, v)

    def begin(self):
        r"""begin(IntVector self) -> std::vector< int >::iterator"""
        return _pygamma.IntVector_begin(self)

    def end(self):
        r"""end(IntVector self) -> std::vector< int >::iterator"""
        return _pygamma.IntVector_end(self)

    def rbegin(self):
        r"""rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _pygamma.IntVector_rbegin(self)

    def rend(self):
        r"""rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _pygamma.IntVector_rend(self)

    def clear(self):
        r"""clear(IntVector self)"""
        return _pygamma.IntVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _pygamma.IntVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntVector self)"""
        return _pygamma.IntVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _pygamma.IntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntVector self) -> IntVector
        __init__(IntVector self, IntVector other) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        _pygamma.IntVector_swiginit(self, _pygamma.new_IntVector(*args))

    def push_back(self, x):
        r"""push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _pygamma.IntVector_push_back(self, x)

    def front(self):
        r"""front(IntVector self) -> std::vector< int >::value_type const &"""
        return _pygamma.IntVector_front(self)

    def back(self):
        r"""back(IntVector self) -> std::vector< int >::value_type const &"""
        return _pygamma.IntVector_back(self)

    def assign(self, n, x):
        r"""assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _pygamma.IntVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _pygamma.IntVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _pygamma.IntVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(IntVector self, std::vector< int >::size_type n)"""
        return _pygamma.IntVector_reserve(self, n)

    def capacity(self):
        r"""capacity(IntVector self) -> std::vector< int >::size_type"""
        return _pygamma.IntVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_IntVector

# Register IntVector in _pygamma:
_pygamma.IntVector_swigregister(IntVector)

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DoubleVector self) -> SwigPyIterator"""
        return _pygamma.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DoubleVector self) -> bool"""
        return _pygamma.DoubleVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DoubleVector self) -> bool"""
        return _pygamma.DoubleVector___bool__(self)

    def __len__(self):
        r"""__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _pygamma.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector"""
        return _pygamma.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)
        """
        return _pygamma.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _pygamma.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleVector self, PySliceObject * slice)
        """
        return _pygamma.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector
        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _pygamma.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)
        __setitem__(DoubleVector self, PySliceObject * slice)
        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _pygamma.DoubleVector___setitem__(self, *args)

    def pop(self):
        r"""pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _pygamma.DoubleVector_pop(self)

    def append(self, x):
        r"""append(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _pygamma.DoubleVector_append(self, x)

    def empty(self):
        r"""empty(DoubleVector self) -> bool"""
        return _pygamma.DoubleVector_empty(self)

    def size(self):
        r"""size(DoubleVector self) -> std::vector< double >::size_type"""
        return _pygamma.DoubleVector_size(self)

    def swap(self, v):
        r"""swap(DoubleVector self, DoubleVector v)"""
        return _pygamma.DoubleVector_swap(self, v)

    def begin(self):
        r"""begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _pygamma.DoubleVector_begin(self)

    def end(self):
        r"""end(DoubleVector self) -> std::vector< double >::iterator"""
        return _pygamma.DoubleVector_end(self)

    def rbegin(self):
        r"""rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _pygamma.DoubleVector_rbegin(self)

    def rend(self):
        r"""rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _pygamma.DoubleVector_rend(self)

    def clear(self):
        r"""clear(DoubleVector self)"""
        return _pygamma.DoubleVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _pygamma.DoubleVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DoubleVector self)"""
        return _pygamma.DoubleVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _pygamma.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVector self) -> DoubleVector
        __init__(DoubleVector self, DoubleVector other) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector
        """
        _pygamma.DoubleVector_swiginit(self, _pygamma.new_DoubleVector(*args))

    def push_back(self, x):
        r"""push_back(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _pygamma.DoubleVector_push_back(self, x)

    def front(self):
        r"""front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _pygamma.DoubleVector_front(self)

    def back(self):
        r"""back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _pygamma.DoubleVector_back(self)

    def assign(self, n, x):
        r"""assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _pygamma.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DoubleVector self, std::vector< double >::size_type new_size)
        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _pygamma.DoubleVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _pygamma.DoubleVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(DoubleVector self, std::vector< double >::size_type n)"""
        return _pygamma.DoubleVector_reserve(self, n)

    def capacity(self):
        r"""capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _pygamma.DoubleVector_capacity(self)
    __swig_destroy__ = _pygamma.delete_DoubleVector

# Register DoubleVector in _pygamma:
_pygamma.DoubleVector_swigregister(DoubleVector)

class TTable1D(object):
    r"""Proxy of C++ TTable1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TTable1D self) -> TTable1D
        __init__(TTable1D self, TTable1D TTab1) -> TTable1D
        """
        _pygamma.TTable1D_swiginit(self, _pygamma.new_TTable1D(*args))
    __swig_destroy__ = _pygamma.delete_TTable1D

    def __assign__(self, TTab1):
        r"""__assign__(TTable1D self, TTable1D TTab1) -> TTable1D"""
        return _pygamma.TTable1D___assign__(self, TTab1)

    def center(self, wa=True):
        r"""center(TTable1D self, bool wa=True) -> double"""
        return _pygamma.TTable1D_center(self, wa)

    def offset(self, *args):
        r"""
        offset(TTable1D self, double F, int inHz=1)
        offset(TTable1D self, double F, int tr, int inHz)
        """
        return _pygamma.TTable1D_offset(self, *args)

    def FRscale(self, *args):
        r"""
        FRscale(TTable1D self, double Fscf)
        FRscale(TTable1D self, double Fscf, int tr)
        """
        return _pygamma.TTable1D_FRscale(self, *args)

    def BC(self, res=-1.0):
        r"""BC(TTable1D self, double res=-1.0)"""
        return _pygamma.TTable1D_BC(self, res)

    def Iscale(self, *args):
        r"""
        Iscale(TTable1D self, double Iscf)
        Iscale(TTable1D self, double Iscf, int tr)
        Iscale(TTable1D self, complex Iscf)
        Iscale(TTable1D self, complex Iscf, int tr)
        """
        return _pygamma.TTable1D_Iscale(self, *args)

    def Iremove(self, dcut=-1.0):
        r"""Iremove(TTable1D self, double dcut=-1.0)"""
        return _pygamma.TTable1D_Iremove(self, dcut)

    def broaden(self, *args):
        r"""
        broaden(TTable1D self, double LWR, int inHz=1)
        broaden(TTable1D self, double LWR, int tr, int inHz)
        """
        return _pygamma.TTable1D_broaden(self, *args)

    def resolution(self, res):
        r"""resolution(TTable1D self, double res)"""
        return _pygamma.TTable1D_resolution(self, res)

    def T(self, *args):
        r"""
        T(TTable1D self, int npts, double tinc) -> row_vector
        T(TTable1D self, row_vector data, double tinc)
        """
        return _pygamma.TTable1D_T(self, *args)

    def Ts(self, npts, tinc):
        r"""Ts(TTable1D self, int npts, double tinc) -> std::vector< row_vector,std::allocator< row_vector > >"""
        return _pygamma.TTable1D_Ts(self, npts, tinc)

    def TCutoffs(self, npts, tinc):
        r"""TCutoffs(TTable1D self, int npts, double tinc) -> IntVector"""
        return _pygamma.TTable1D_TCutoffs(self, npts, tinc)

    def F(self, *args):
        r"""
        F(TTable1D self, int npts, double Fst, double Ffi) -> row_vector
        F(TTable1D self, row_vector data, double Fst, double Ffi)
        """
        return _pygamma.TTable1D_F(self, *args)

    def Fs(self, npts, Fst, Ffi):
        r"""Fs(TTable1D self, int npts, double Fst, double Ffi) -> std::vector< row_vector,std::allocator< row_vector > >"""
        return _pygamma.TTable1D_Fs(self, npts, Fst, Ffi)

    def FD(self, *args):
        r"""
        FD(TTable1D self, int N, double fstart, double fend) -> row_vector
        FD(TTable1D self, row_vector data, double fstart, double fend)
        """
        return _pygamma.TTable1D_FD(self, *args)

    def pcorrect(self, *args):
        r"""
        pcorrect(TTable1D self, double & w0, double w1, int order) -> complex
        pcorrect(TTable1D self, double Wpivot, complex P)
        """
        return _pygamma.TTable1D_pcorrect(self, *args)

    def R2(self, tr):
        r"""R2(TTable1D self, int tr) -> double"""
        return _pygamma.TTable1D_R2(self, tr)

    def Fr(self, tr):
        r"""Fr(TTable1D self, int tr) -> double"""
        return _pygamma.TTable1D_Fr(self, tr)

    def I(self, tr):
        r"""I(TTable1D self, int tr) -> complex"""
        return _pygamma.TTable1D_I(self, tr)

    def Tr(self, tr):
        r"""Tr(TTable1D self, int tr) -> row_vector"""
        return _pygamma.TTable1D_Tr(self, tr)

    def LineWidths(self):
        r"""LineWidths(TTable1D self) -> bool"""
        return _pygamma.TTable1D_LineWidths(self)

    def Intensities(self):
        r"""Intensities(TTable1D self) -> bool"""
        return _pygamma.TTable1D_Intensities(self)

    def Phases(self):
        r"""Phases(TTable1D self) -> bool"""
        return _pygamma.TTable1D_Phases(self)

    def size(self):
        r"""size(TTable1D self) -> int"""
        return _pygamma.TTable1D_size(self)

    def FRmax(self):
        r"""FRmax(TTable1D self) -> double"""
        return _pygamma.TTable1D_FRmax(self)

    def FRmin(self):
        r"""FRmin(TTable1D self) -> double"""
        return _pygamma.TTable1D_FRmin(self)

    def Tdmin(self):
        r"""Tdmin(TTable1D self) -> double"""
        return _pygamma.TTable1D_Tdmin(self)

    def LWmax(self):
        r"""LWmax(TTable1D self) -> double"""
        return _pygamma.TTable1D_LWmax(self)

    def LWmin(self):
        r"""LWmin(TTable1D self) -> double"""
        return _pygamma.TTable1D_LWmin(self)

    def Imax(self):
        r"""Imax(TTable1D self) -> double"""
        return _pygamma.TTable1D_Imax(self)

    def Noisemax(self):
        r"""Noisemax(TTable1D self) -> double"""
        return _pygamma.TTable1D_Noisemax(self)

    def Sort(self, k, type, colf):
        r"""Sort(TTable1D self, int k, int type, int colf) -> IntVector"""
        return _pygamma.TTable1D_Sort(self, k, type, colf)

    def readPSet(self, *args):
        r"""
        readPSet(TTable1D self, std::string const & filein, int indx=-1, int warn=2) -> bool
        readPSet(TTable1D self, ParameterSet pset, int indx, int warn=2) -> bool
        """
        return _pygamma.TTable1D_readPSet(self, *args)

    def setType(self, typ):
        r"""setType(TTable1D self, int typ)"""
        return _pygamma.TTable1D_setType(self, typ)

    def setSort(self, sf):
        r"""setSort(TTable1D self, int sf)"""
        return _pygamma.TTable1D_setSort(self, sf)

    def setConv(self, cf):
        r"""setConv(TTable1D self, double cf)"""
        return _pygamma.TTable1D_setConv(self, cf)

    def setIcut(self, ct):
        r"""setIcut(TTable1D self, double ct)"""
        return _pygamma.TTable1D_setIcut(self, ct)

    def setInorm(self, inorm=0.0):
        r"""setInorm(TTable1D self, double inorm=0.0)"""
        return _pygamma.TTable1D_setInorm(self, inorm)

    def setSN(self, S2N):
        r"""setSN(TTable1D self, double S2N)"""
        return _pygamma.TTable1D_setSN(self, S2N)

    def setHprint(self, hp):
        r"""setHprint(TTable1D self, int hp)"""
        return _pygamma.TTable1D_setHprint(self, hp)

    def setRprint(self, rp):
        r"""setRprint(TTable1D self, int rp)"""
        return _pygamma.TTable1D_setRprint(self, rp)

    def setLWprint(self, lwp):
        r"""setLWprint(TTable1D self, int lwp)"""
        return _pygamma.TTable1D_setLWprint(self, lwp)

    def setT2print(self, t2p):
        r"""setT2print(TTable1D self, int t2p)"""
        return _pygamma.TTable1D_setT2print(self, t2p)

    def setPHprint(self, php):
        r"""setPHprint(TTable1D self, int php)"""
        return _pygamma.TTable1D_setPHprint(self, php)

    def setFreqRev(self):
        r"""setFreqRev(TTable1D self)"""
        return _pygamma.TTable1D_setFreqRev(self)

    def getType(self):
        r"""getType(TTable1D self) -> int"""
        return _pygamma.TTable1D_getType(self)

    def getSort(self):
        r"""getSort(TTable1D self) -> int"""
        return _pygamma.TTable1D_getSort(self)

    def getConv(self):
        r"""getConv(TTable1D self) -> double"""
        return _pygamma.TTable1D_getConv(self)

    def getIcut(self):
        r"""getIcut(TTable1D self) -> double"""
        return _pygamma.TTable1D_getIcut(self)

    def getInorm(self):
        r"""getInorm(TTable1D self) -> double"""
        return _pygamma.TTable1D_getInorm(self)

    def getSN(self):
        r"""getSN(TTable1D self) -> double"""
        return _pygamma.TTable1D_getSN(self)

    def getHprint(self):
        r"""getHprint(TTable1D self) -> int"""
        return _pygamma.TTable1D_getHprint(self)

    def getRprint(self):
        r"""getRprint(TTable1D self) -> int"""
        return _pygamma.TTable1D_getRprint(self)

    def getLWprint(self):
        r"""getLWprint(TTable1D self) -> int"""
        return _pygamma.TTable1D_getLWprint(self)

    def getT2print(self):
        r"""getT2print(TTable1D self) -> int"""
        return _pygamma.TTable1D_getT2print(self)

    def getPHprint(self):
        r"""getPHprint(TTable1D self) -> int"""
        return _pygamma.TTable1D_getPHprint(self)

    def getFreqRev(self):
        r"""getFreqRev(TTable1D self) -> bool"""
        return _pygamma.TTable1D_getFreqRev(self)

    def printStrings(self):
        r"""printStrings(TTable1D self) -> StringVector"""
        return _pygamma.TTable1D_printStrings(self)

    def write(self, fn):
        r"""write(TTable1D self, std::string const & fn)"""
        return _pygamma.TTable1D_write(self, fn)

    def dbwrite_old(self, fileName, compname, lowppm, highppm, specfreq, reffreq, loop, headerLines):
        r"""dbwrite_old(TTable1D self, std::string const & fileName, std::string const & compname, double const & lowppm, double const & highppm, double const & specfreq, double const & reffreq, int const & loop, StringVector headerLines)"""
        return _pygamma.TTable1D_dbwrite_old(self, fileName, compname, lowppm, highppm, specfreq, reffreq, loop, headerLines)

    def dbwrite(self, fileName, compname, specfreq, numberspins, loop, header):
        r"""dbwrite(TTable1D self, std::string const & fileName, std::string const & compname, double const & specfreq, int const & numberspins, int const & loop, StringVector header)"""
        return _pygamma.TTable1D_dbwrite(self, fileName, compname, specfreq, numberspins, loop, header)

    def calc_spectra(self, freq, ampl, phase, specfreq, numberspins, freqtol=0.001, phasetol=45.0, lowppm=-1000.0, highppm=1000.0):
        r"""calc_spectra(TTable1D self, DoubleVector freq, DoubleVector ampl, DoubleVector phase, double specfreq, int numberspins, double freqtol=0.001, double phasetol=45.0, double lowppm=-1000.0, double highppm=1000.0) -> unsigned int"""
        return _pygamma.TTable1D_calc_spectra(self, freq, ampl, phase, specfreq, numberspins, freqtol, phasetol, lowppm, highppm)

    def calc_spectra2(self, freq, ampl, phase, specfreq, numberspins, freqtol=0.001, phasetol=45.0, lowppm=-1000.0, highppm=1000.0, normal=0.0, verbose=False):
        r"""calc_spectra2(TTable1D self, DoubleVector freq, DoubleVector ampl, DoubleVector phase, double specfreq, int numberspins, double freqtol=0.001, double phasetol=45.0, double lowppm=-1000.0, double highppm=1000.0, double normal=0.0, bool verbose=False) -> unsigned int"""
        return _pygamma.TTable1D_calc_spectra2(self, freq, ampl, phase, specfreq, numberspins, freqtol, phasetol, lowppm, highppm, normal, verbose)

    def read(self, fn):
        r"""read(TTable1D self, std::string const & fn)"""
        return _pygamma.TTable1D_read(self, fn)

# Register TTable1D in _pygamma:
_pygamma.TTable1D_swigregister(TTable1D)

class acquire1D(object):
    r"""Proxy of C++ acquire1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(acquire1D self) -> acquire1D
        __init__(acquire1D self, acquire1D ACQ1) -> acquire1D
        __init__(acquire1D self, gen_op det, gen_op H) -> acquire1D
        __init__(acquire1D self, gen_op det, gen_op H, double cutoff) -> acquire1D
        __init__(acquire1D self, gen_op D, super_op L, gen_op sigi, double cut=1.e-12) -> acquire1D
        __init__(acquire1D self, gen_op D, super_op L, double cut=1.e-12) -> acquire1D
        """
        _pygamma.acquire1D_swiginit(self, _pygamma.new_acquire1D(*args))
    __swig_destroy__ = _pygamma.delete_acquire1D

    def __assign__(self, ACQ1):
        r"""__assign__(acquire1D self, acquire1D ACQ1) -> acquire1D"""
        return _pygamma.acquire1D___assign__(self, ACQ1)

    def L(self):
        r"""L(acquire1D self) -> super_op"""
        return _pygamma.acquire1D_L(self)

    def D(self):
        r"""D(acquire1D self) -> gen_op"""
        return _pygamma.acquire1D_D(self)

    def TTable(self):
        r"""TTable(acquire1D self) -> TTable1D"""
        return _pygamma.acquire1D_TTable(self)

    def Detector(self, detect):
        r"""Detector(acquire1D self, gen_op detect)"""
        return _pygamma.acquire1D_Detector(self, detect)

    def T(self, *args):
        r"""
        T(acquire1D self, gen_op sigmap, double tinc, int npts) -> row_vector
        T(acquire1D self, gen_op sigmap, int npts, double tinc) -> row_vector
        T(acquire1D self, gen_op sigmap, row_vector data, double tinc)
        """
        return _pygamma.acquire1D_T(self, *args)

    def F(self, *args):
        r"""
        F(acquire1D self, gen_op sigmap, int npts, double Fst, double Ffi) -> row_vector
        F(acquire1D self, gen_op sigmap, row_vector data, double Fst, double Ffi)
        """
        return _pygamma.acquire1D_F(self, *args)

    def FD(self, *args):
        r"""
        FD(acquire1D self, gen_op sigma, int npts, double Fst, double Ffi) -> row_vector
        FD(acquire1D self, gen_op sigma, row_vector data, double Fst, double Ffi)
        """
        return _pygamma.acquire1D_FD(self, *args)

    def table(self, *args):
        r"""
        table(acquire1D self, gen_op sigmap) -> TTable1D
        table(acquire1D self) -> TTable1D
        """
        return _pygamma.acquire1D_table(self, *args)

    def table_snapshot(self, *args):
        r"""
        table_snapshot(acquire1D self, gen_op sigmap) -> TTable1D
        table_snapshot(acquire1D self) -> TTable1D
        """
        return _pygamma.acquire1D_table_snapshot(self, *args)

    def offset(self, *args):
        r"""
        offset(acquire1D self, double F, int inHz=1)
        offset(acquire1D self, double F, int tr, int inHz)
        """
        return _pygamma.acquire1D_offset(self, *args)

    def FRscale(self, *args):
        r"""
        FRscale(acquire1D self, double Fscf)
        FRscale(acquire1D self, double Fscf, int tr)
        """
        return _pygamma.acquire1D_FRscale(self, *args)

    def Iscale(self, *args):
        r"""
        Iscale(acquire1D self, double Iscf)
        Iscale(acquire1D self, double Iscf, int tr)
        """
        return _pygamma.acquire1D_Iscale(self, *args)

    def broaden(self, *args):
        r"""
        broaden(acquire1D self, double LWR, int inHz=1)
        broaden(acquire1D self, double LWR, int tr, int inHz)
        """
        return _pygamma.acquire1D_broaden(self, *args)

    def resolution(self, res):
        r"""resolution(acquire1D self, double res)"""
        return _pygamma.acquire1D_resolution(self, res)

    def pcorrect(self, *args):
        r"""
        pcorrect(acquire1D self, double Wpivot, complex P)
        pcorrect(acquire1D self, double & w0, double w1, int order=5) -> complex
        """
        return _pygamma.acquire1D_pcorrect(self, *args)

    def Wmax(self):
        r"""Wmax(acquire1D self) -> double"""
        return _pygamma.acquire1D_Wmax(self)

    def LWmax(self):
        r"""LWmax(acquire1D self) -> double"""
        return _pygamma.acquire1D_LWmax(self)

    def setSort(self, sf):
        r"""setSort(acquire1D self, int sf)"""
        return _pygamma.acquire1D_setSort(self, sf)

    def setConv(self, cf):
        r"""setConv(acquire1D self, int cf)"""
        return _pygamma.acquire1D_setConv(self, cf)

    def ls(self):
        r"""ls(acquire1D self) -> int"""
        return _pygamma.acquire1D_ls(self)

    def size(self):
        r"""size(acquire1D self) -> int"""
        return _pygamma.acquire1D_size(self)

    def full_size(self):
        r"""full_size(acquire1D self) -> int"""
        return _pygamma.acquire1D_full_size(self)

    def transitions(self):
        r"""transitions(acquire1D self) -> int"""
        return _pygamma.acquire1D_transitions(self)

    def write(self, fn):
        r"""write(acquire1D self, std::string const & fn)"""
        return _pygamma.acquire1D_write(self, fn)

    def read(self, fn):
        r"""read(acquire1D self, std::string const & fn)"""
        return _pygamma.acquire1D_read(self, fn)

# Register acquire1D in _pygamma:
_pygamma.acquire1D_swigregister(acquire1D)


def Kex(*args):
    r"""
    Kex(spin_sys sys, std::vector< ExchProcM,std::allocator< ExchProcM > > const & XPs, basis Bs) -> super_op
    Kex(sys_dynamic sys, basis Bs) -> super_op
    """
    return _pygamma.Kex(*args)
class RBasic(object):
    r"""Proxy of C++ RBasic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RBasic self) -> RBasic
        __init__(RBasic self, row_vector vx) -> RBasic
        __init__(RBasic self, RBasic RB) -> RBasic
        """
        _pygamma.RBasic_swiginit(self, _pygamma.new_RBasic(*args))
    __swig_destroy__ = _pygamma.delete_RBasic

    def __assign__(self, RB):
        r"""__assign__(RBasic self, RBasic RB) -> RBasic"""
        return _pygamma.RBasic___assign__(self, RB)

    def spins(self):
        r"""spins(RBasic self) -> int"""
        return _pygamma.RBasic_spins(self)

    def HS(self):
        r"""HS(RBasic self) -> int"""
        return _pygamma.RBasic_HS(self)

    def T1(self, *args):
        r"""
        T1(RBasic self, int i) -> double
        T1(RBasic self, double val, int i)
        """
        return _pygamma.RBasic_T1(self, *args)

    def T2(self, *args):
        r"""
        T2(RBasic self, int i) -> double
        T2(RBasic self, double val, int i)
        """
        return _pygamma.RBasic_T2(self, *args)

    def R1(self, *args):
        r"""
        R1(RBasic self, int i) -> double
        R1(RBasic self, double val, int i)
        """
        return _pygamma.RBasic_R1(self, *args)

    def R2(self, *args):
        r"""
        R2(RBasic self, int i) -> double
        R2(RBasic self, double val, int i)
        """
        return _pygamma.RBasic_R2(self, *args)

    def LW(self, *args):
        r"""
        LW(RBasic self, int i) -> double
        LW(RBasic self, double val, int i)
        """
        return _pygamma.RBasic_LW(self, *args)

    def RB(self, *args):
        r"""
        RB(RBasic self, int i, int type) -> double
        RB(RBasic self, double val, int i, int type)
        """
        return _pygamma.RBasic_RB(self, *args)

    def T1s(self):
        r"""T1s(RBasic self) -> DoubleVector"""
        return _pygamma.RBasic_T1s(self)

    def T2s(self):
        r"""T2s(RBasic self) -> DoubleVector"""
        return _pygamma.RBasic_T2s(self)

    def R1s(self):
        r"""R1s(RBasic self) -> DoubleVector"""
        return _pygamma.RBasic_R1s(self)

    def R2s(self):
        r"""R2s(RBasic self) -> DoubleVector"""
        return _pygamma.RBasic_R2s(self)

    def LWs(self):
        r"""LWs(RBasic self) -> DoubleVector"""
        return _pygamma.RBasic_LWs(self)

    def RBRates(self, type):
        r"""RBRates(RBasic self, int type) -> DoubleVector"""
        return _pygamma.RBasic_RBRates(self, type)

    def SetSystem(self, sys, warn=2):
        r"""SetSystem(RBasic self, spin_sys sys, int warn=2) -> bool"""
        return _pygamma.RBasic_SetSystem(self, sys, warn)

    def SetH0(self, H, warn=2):
        r"""SetH0(RBasic self, gen_op H, int warn=2) -> bool"""
        return _pygamma.RBasic_SetH0(self, H, warn)

    def SetDet(self, D, warn=2):
        r"""SetDet(RBasic self, gen_op D, int warn=2) -> bool"""
        return _pygamma.RBasic_SetDet(self, D, warn)

    def SetSigInf(self, S, warn=2):
        r"""SetSigInf(RBasic self, gen_op S, int warn=2) -> bool"""
        return _pygamma.RBasic_SetSigInf(self, S, warn)

    def R2Mx(self):
        r"""R2Mx(RBasic self) -> matrix"""
        return _pygamma.RBasic_R2Mx(self)

    def R2LOp(self):
        r"""R2LOp(RBasic self) -> matrix"""
        return _pygamma.RBasic_R2LOp(self)

    def R1LOp(self):
        r"""R1LOp(RBasic self) -> matrix"""
        return _pygamma.RBasic_R1LOp(self)

    def SigmaT1(self, sigma):
        r"""SigmaT1(RBasic self, gen_op sigma) -> gen_op"""
        return _pygamma.RBasic_SigmaT1(self, sigma)

    def SigmaT2(self, sigma):
        r"""SigmaT2(RBasic self, gen_op sigma) -> gen_op"""
        return _pygamma.RBasic_SigmaT2(self, sigma)

    def SigmaC(self, sigma):
        r"""SigmaC(RBasic self, gen_op sigma) -> col_vector"""
        return _pygamma.RBasic_SigmaC(self, sigma)

    def SigmaCEq(self, *args):
        r"""
        SigmaCEq(RBasic self, gen_op sigeq) -> col_vector
        SigmaCEq(RBasic self) -> col_vector
        """
        return _pygamma.RBasic_SigmaCEq(self, *args)

    def RC(self):
        r"""RC(RBasic self) -> matrix"""
        return _pygamma.RBasic_RC(self)

    def HC(self, *args):
        r"""
        HC(RBasic self, gen_op H) -> matrix
        HC(RBasic self) -> matrix
        """
        return _pygamma.RBasic_HC(self, *args)

    def Sigma(self, sigmaC):
        r"""Sigma(RBasic self, col_vector sigmaC) -> gen_op"""
        return _pygamma.RBasic_Sigma(self, sigmaC)

    def ReadT2(self, pset, sp, idx=-1, pf=0):
        r"""ReadT2(RBasic self, ParameterSet pset, int sp, int idx=-1, int pf=0) -> double"""
        return _pygamma.RBasic_ReadT2(self, pset, sp, idx, pf)

    def ReadT1(self, pset, sp, idx=-1, pf=0):
        r"""ReadT1(RBasic self, ParameterSet pset, int sp, int idx=-1, int pf=0) -> double"""
        return _pygamma.RBasic_ReadT1(self, pset, sp, idx, pf)

    def ReadLW(self, pset, sp, idx=-1, pf=0):
        r"""ReadLW(RBasic self, ParameterSet pset, int sp, int idx=-1, int pf=0) -> double"""
        return _pygamma.RBasic_ReadLW(self, pset, sp, idx, pf)

    def ReadR2(self, pset, sp, idx=-1, pf=0):
        r"""ReadR2(RBasic self, ParameterSet pset, int sp, int idx=-1, int pf=0) -> double"""
        return _pygamma.RBasic_ReadR2(self, pset, sp, idx, pf)

    def ReadR1(self, pset, sp, idx=-1, pf=0):
        r"""ReadR1(RBasic self, ParameterSet pset, int sp, int idx=-1, int pf=0) -> double"""
        return _pygamma.RBasic_ReadR1(self, pset, sp, idx, pf)

    def ReadPar(self, P, I, t, idx=-1, pf=0):
        r"""ReadPar(RBasic self, ParameterSet P, int I, int t, int idx=-1, int pf=0) -> double"""
        return _pygamma.RBasic_ReadPar(self, P, I, t, idx, pf)

    def ReadT2s(self, p, N, idx=-1, pf=0):
        r"""ReadT2s(RBasic self, ParameterSet p, int N, int idx=-1, int pf=0) -> DoubleVector"""
        return _pygamma.RBasic_ReadT2s(self, p, N, idx, pf)

    def ReadT1s(self, p, N, idx=-1, pf=0):
        r"""ReadT1s(RBasic self, ParameterSet p, int N, int idx=-1, int pf=0) -> DoubleVector"""
        return _pygamma.RBasic_ReadT1s(self, p, N, idx, pf)

    def ReadLWs(self, p, N, idx=-1, pf=0):
        r"""ReadLWs(RBasic self, ParameterSet p, int N, int idx=-1, int pf=0) -> DoubleVector"""
        return _pygamma.RBasic_ReadLWs(self, p, N, idx, pf)

    def ReadR2s(self, p, N, idx=-1, pf=0):
        r"""ReadR2s(RBasic self, ParameterSet p, int N, int idx=-1, int pf=0) -> DoubleVector"""
        return _pygamma.RBasic_ReadR2s(self, p, N, idx, pf)

    def ReadR1s(self, p, N, idx=-1, pf=0):
        r"""ReadR1s(RBasic self, ParameterSet p, int N, int idx=-1, int pf=0) -> DoubleVector"""
        return _pygamma.RBasic_ReadR1s(self, p, N, idx, pf)

    def ReadPars(self, p, N, type, idx=-1, pf=0):
        r"""ReadPars(RBasic self, ParameterSet p, int N, int type, int idx=-1, int pf=0) -> DoubleVector"""
        return _pygamma.RBasic_ReadPars(self, p, N, type, idx, pf)

    def read(self, *args):
        r"""
        read(RBasic self, std::string const & filename, int idx=-1, int warn=2) -> int
        read(RBasic self, ParameterSet pset, int idx=-1, int warn=2) -> int
        """
        return _pygamma.RBasic_read(self, *args)

    def Evolve(self, *args):
        r"""
        Evolve(RBasic self, spin_sys sys, gen_op sig0, double t) -> gen_op
        Evolve(RBasic self, gen_op sigmap, double t) -> gen_op
        """
        return _pygamma.RBasic_Evolve(self, *args)

    def FID(self, *args):
        r"""
        FID(RBasic self, gen_op sigmap, double td, row_vector fid, int N=0)
        FID(RBasic self, spin_sys sys, gen_op sigmap, double td, row_vector fid, int N=0)
        FID(RBasic self, spin_sys sys, gen_op sigmap, double td, int N) -> row_vector
        FID(RBasic self, gen_op sigmap, double td, int N) -> row_vector
        """
        return _pygamma.RBasic_FID(self, *args)

    def FzCoeffs(self, sys, sigma):
        r"""FzCoeffs(RBasic self, spin_sys sys, gen_op sigma) -> DoubleVector"""
        return _pygamma.RBasic_FzCoeffs(self, sys, sigma)

# Register RBasic in _pygamma:
_pygamma.RBasic_swigregister(RBasic)

class quatern(object):
    r"""Proxy of C++ quatern class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(quatern self) -> quatern
        __init__(quatern self, coord ABG, bool inv=False) -> quatern
        __init__(quatern self, EAngles EA, bool inv=False) -> quatern
        __init__(quatern self, quatern Qrt, bool inv=False) -> quatern
        __init__(quatern self, ParameterSet pset, int idx=-1, int warn=2) -> quatern
        __init__(quatern self, double QA, double QB, double QC, double QD, bool inv=False) -> quatern
        """
        _pygamma.quatern_swiginit(self, _pygamma.new_quatern(*args))
    __swig_destroy__ = _pygamma.delete_quatern

    def __assign__(self, *args):
        r"""
        __assign__(quatern self, quatern QRT) -> quatern
        __assign__(quatern self, coord EA) -> quatern
        __assign__(quatern self, EAngles EA) -> quatern
        """
        return _pygamma.quatern___assign__(self, *args)

    def A(self):
        r"""A(quatern self) -> double"""
        return _pygamma.quatern_A(self)

    def B(self):
        r"""B(quatern self) -> double"""
        return _pygamma.quatern_B(self)

    def C(self):
        r"""C(quatern self) -> double"""
        return _pygamma.quatern_C(self)

    def D(self):
        r"""D(quatern self) -> double"""
        return _pygamma.quatern_D(self)

    def alpha(self):
        r"""alpha(quatern self) -> double"""
        return _pygamma.quatern_alpha(self)

    def beta(self):
        r"""beta(quatern self) -> double"""
        return _pygamma.quatern_beta(self)

    def gamma(self):
        r"""gamma(quatern self) -> double"""
        return _pygamma.quatern_gamma(self)

    def EA(self):
        r"""EA(quatern self) -> EAngles"""
        return _pygamma.quatern_EA(self)

    def ABG(self):
        r"""ABG(quatern self) -> coord"""
        return _pygamma.quatern_ABG(self)

    def __mul__(self, Q):
        r"""__mul__(quatern self, quatern Q) -> quatern"""
        return _pygamma.quatern___mul__(self, Q)

    def __imul__(self, Q):
        r"""__imul__(quatern self, quatern Q) -> quatern"""
        return _pygamma.quatern___imul__(self, Q)

    def __iand__(self, Q):
        r"""__iand__(quatern self, quatern Q) -> quatern"""
        return _pygamma.quatern___iand__(self, Q)

    def composite(self, Q, rev=False):
        r"""composite(quatern self, quatern Q, bool rev=False) -> quatern"""
        return _pygamma.quatern_composite(self, Q, rev)

    def RotMx(self):
        r"""RotMx(quatern self) -> matrix"""
        return _pygamma.quatern_RotMx(self)

    def RMx(self):
        r"""RMx(quatern self) -> matrix"""
        return _pygamma.quatern_RMx(self)

    def norm(self):
        r"""norm(quatern self) -> double"""
        return _pygamma.quatern_norm(self)

    def inverse(self):
        r"""inverse(quatern self) -> quatern"""
        return _pygamma.quatern_inverse(self)

    def __eq__(self, Quar):
        r"""__eq__(quatern self, quatern Quar) -> bool"""
        return _pygamma.quatern___eq__(self, Quar)

    def __ne__(self, Quar):
        r"""__ne__(quatern self, quatern Quar) -> bool"""
        return _pygamma.quatern___ne__(self, Quar)

    def __lt__(self, Quar):
        r"""__lt__(quatern self, quatern Quar) -> bool"""
        return _pygamma.quatern___lt__(self, Quar)

    def __gt__(self, Quar):
        r"""__gt__(quatern self, quatern Quar) -> bool"""
        return _pygamma.quatern___gt__(self, Quar)

    def param(self, *args):
        r"""
        param(quatern self) -> SinglePar
        param(quatern self, std::string const & pname) -> SinglePar
        param(quatern self, std::string const & pname, std::string const & pstate) -> SinglePar
        """
        return _pygamma.quatern_param(self, *args)

    def PSetAdd(self, pset, idx=-1, pfx=-1):
        r"""PSetAdd(quatern self, ParameterSet pset, int idx=-1, int pfx=-1) -> bool"""
        return _pygamma.quatern_PSetAdd(self, pset, idx, pfx)

    def write(self, *args):
        r"""
        write(quatern self, std::string const & fo, int idx=-1, int pfx=-1, int warn=2) -> bool
        write(quatern self, std::ofstream & of, int idx=-1, int pfx=-1, int warn=2) -> bool
        """
        return _pygamma.quatern_write(self, *args)

    def read(self, *args):
        r"""
        read(quatern self, std::string const & filein, int indx=-1, int warn=2) -> bool
        read(quatern self, ParameterSet pset, int indx=-1, int warn=2) -> bool
        """
        return _pygamma.quatern_read(self, *args)

    @staticmethod
    def ASinPos():
        r"""ASinPos() -> bool"""
        return _pygamma.quatern_ASinPos()

    @staticmethod
    def ACosPos():
        r"""ACosPos() -> bool"""
        return _pygamma.quatern_ACosPos()

    @staticmethod
    def ATanPos():
        r"""ATanPos() -> bool"""
        return _pygamma.quatern_ATanPos()

    def ShowConversion(self):
        r"""ShowConversion(quatern self)"""
        return _pygamma.quatern_ShowConversion(self)

    @staticmethod
    def ValidRMx(R, msgs=True):
        r"""ValidRMx(matrix R, bool msgs=True) -> bool"""
        return _pygamma.quatern_ValidRMx(R, msgs)

# Register quatern in _pygamma:
_pygamma.quatern_swigregister(quatern)

def quatern_ASinPos():
    r"""quatern_ASinPos() -> bool"""
    return _pygamma.quatern_ASinPos()

def quatern_ACosPos():
    r"""quatern_ACosPos() -> bool"""
    return _pygamma.quatern_ACosPos()

def quatern_ATanPos():
    r"""quatern_ATanPos() -> bool"""
    return _pygamma.quatern_ATanPos()

def quatern_ValidRMx(R, msgs=True):
    r"""quatern_ValidRMx(matrix R, bool msgs=True) -> bool"""
    return _pygamma.quatern_ValidRMx(R, msgs)


def composite(*args):
    r"""
    composite(EAngles arg1, EAngles arg2) -> quatern
    composite(coord arg1, coord arg2) -> quatern
    composite(quatern arg1, quatern arg2) -> quatern
    composite(matrix arg1, quatern arg2) -> quatern
    """
    return _pygamma.composite(*args)
class EAngles(object):
    r"""Proxy of C++ EAngles class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EAngles self) -> EAngles
        __init__(EAngles self, double alpha, double beta=0, double gamma=0, bool deg=False) -> EAngles
        __init__(EAngles self, coord EA, bool deg=True) -> EAngles
        __init__(EAngles self, EAngles EA) -> EAngles
        """
        _pygamma.EAngles_swiginit(self, _pygamma.new_EAngles(*args))
    __swig_destroy__ = _pygamma.delete_EAngles

    def __assign__(self, EA):
        r"""__assign__(EAngles self, EAngles EA) -> EAngles"""
        return _pygamma.EAngles___assign__(self, EA)

    def alpha(self, *args):
        r"""
        alpha(EAngles self) -> double
        alpha(EAngles self, double A)
        """
        return _pygamma.EAngles_alpha(self, *args)

    def beta(self, *args):
        r"""
        beta(EAngles self) -> double
        beta(EAngles self, double B)
        """
        return _pygamma.EAngles_beta(self, *args)

    def gamma(self, *args):
        r"""
        gamma(EAngles self) -> double
        gamma(EAngles self, double G)
        """
        return _pygamma.EAngles_gamma(self, *args)

    def __mul__(self, EA):
        r"""__mul__(EAngles self, EAngles EA) -> EAngles"""
        return _pygamma.EAngles___mul__(self, EA)

    def __imul__(self, EA):
        r"""__imul__(EAngles self, EAngles EA) -> EAngles"""
        return _pygamma.EAngles___imul__(self, EA)

    def __iand__(self, EA):
        r"""__iand__(EAngles self, EAngles EA) -> EAngles"""
        return _pygamma.EAngles___iand__(self, EA)

    def composite(self, EA):
        r"""composite(EAngles self, EAngles EA) -> EAngles"""
        return _pygamma.EAngles_composite(self, EA)

    def param(self, *args):
        r"""
        param(EAngles self, std::string const & pn, bool deg=True) -> SinglePar
        param(EAngles self, std::string const & pn, std::string const & ps, bool deg=True) -> SinglePar
        """
        return _pygamma.EAngles_param(self, *args)

    def PSetAdd(self, pset, idx=-1, deg=True):
        r"""PSetAdd(EAngles self, ParameterSet pset, int idx=-1, bool deg=True)"""
        return _pygamma.EAngles_PSetAdd(self, pset, idx, deg)

    def write(self, filename, idx=-1, deg=True):
        r"""write(EAngles self, std::string const & filename, int idx=-1, bool deg=True)"""
        return _pygamma.EAngles_write(self, filename, idx, deg)

    def read(self, *args):
        r"""
        read(EAngles self, std::string const & filename, int idx=-1, int warn=2) -> bool
        read(EAngles self, ParameterSet pset, int idx=-1, int warn=2) -> bool
        """
        return _pygamma.EAngles_read(self, *args)

    @staticmethod
    def SetCutoff(co=-1):
        r"""SetCutoff(double co=-1)"""
        return _pygamma.EAngles_SetCutoff(co)

    def __eq__(self, EA):
        r"""__eq__(EAngles self, EAngles EA) -> bool"""
        return _pygamma.EAngles___eq__(self, EA)

    def __ne__(self, EA):
        r"""__ne__(EAngles self, EAngles EA) -> bool"""
        return _pygamma.EAngles___ne__(self, EA)

    def __lt__(self, EA):
        r"""__lt__(EAngles self, EAngles EA) -> bool"""
        return _pygamma.EAngles___lt__(self, EA)

    def __gt__(self, EA):
        r"""__gt__(EAngles self, EAngles EA) -> bool"""
        return _pygamma.EAngles___gt__(self, EA)

    def equal(self, EA, CUTOFF=1.e-10):
        r"""equal(EAngles self, EAngles EA, double CUTOFF=1.e-10) -> bool"""
        return _pygamma.EAngles_equal(self, EA, CUTOFF)

    def inverse(self):
        r"""inverse(EAngles self) -> EAngles"""
        return _pygamma.EAngles_inverse(self)

    def RMx(self, inv=False):
        r"""RMx(EAngles self, bool inv=False) -> matrix"""
        return _pygamma.EAngles_RMx(self, inv)

    def Rmx(self):
        r"""Rmx(EAngles self) -> matrix"""
        return _pygamma.EAngles_Rmx(self)

    def invRmx(self):
        r"""invRmx(EAngles self) -> matrix"""
        return _pygamma.EAngles_invRmx(self)

# Register EAngles in _pygamma:
_pygamma.EAngles_swigregister(EAngles)

def EAngles_SetCutoff(co=-1):
    r"""EAngles_SetCutoff(double co=-1)"""
    return _pygamma.EAngles_SetCutoff(co)

class decomp(object):
    r"""Proxy of C++ decomp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(decomp self) -> decomp
        __init__(decomp self, decomp dec1) -> decomp
        __init__(decomp self, spin_sys sys) -> decomp
        """
        _pygamma.decomp_swiginit(self, _pygamma.new_decomp(*args))
    __swig_destroy__ = _pygamma.delete_decomp

    def __assign__(self, dec):
        r"""__assign__(decomp self, decomp dec) -> decomp"""
        return _pygamma.decomp___assign__(self, dec)

    def decompose(self, Op):
        r"""decompose(decomp self, gen_op Op)"""
        return _pygamma.decomp_decompose(self, Op)

    def size(self):
        r"""size(decomp self) -> int"""
        return _pygamma.decomp_size(self)

    def LS(self):
        r"""LS(decomp self) -> int"""
        return _pygamma.decomp_LS(self)

    def HS(self):
        r"""HS(decomp self) -> int"""
        return _pygamma.decomp_HS(self)

    def Names(self, *args):
        r"""
        Names(decomp self) -> StringVector
        Names(decomp self, int m) -> StringVector
        """
        return _pygamma.decomp_Names(self, *args)

    def Name(self, *args):
        r"""
        Name(decomp self, std::string const & name)
        Name(decomp self) -> std::string
        """
        return _pygamma.decomp_Name(self, *args)

    def OpName(self, i):
        r"""OpName(decomp self, int i) -> std::string"""
        return _pygamma.decomp_OpName(self, i)

    def AltOpName(self, i):
        r"""AltOpName(decomp self, int i) -> std::string"""
        return _pygamma.decomp_AltOpName(self, i)

    def MaxOpNameLen(self):
        r"""MaxOpNameLen(decomp self) -> int"""
        return _pygamma.decomp_MaxOpNameLen(self)

    def MaxOpAltNameLen(self):
        r"""MaxOpAltNameLen(decomp self) -> int"""
        return _pygamma.decomp_MaxOpAltNameLen(self)

    def Coherence(self, i):
        r"""Coherence(decomp self, int i) -> int"""
        return _pygamma.decomp_Coherence(self, i)

    def MaxCoherence(self):
        r"""MaxCoherence(decomp self) -> int"""
        return _pygamma.decomp_MaxCoherence(self)

    def Op(self, *args):
        r"""
        Op(decomp self, std::string const & Opname) -> gen_op
        Op(decomp self, int i) -> gen_op
        """
        return _pygamma.decomp_Op(self, *args)

    def values(self, *args):
        r"""
        values(decomp self) -> row_vector
        values(decomp self, int m) -> row_vector
        """
        return _pygamma.decomp_values(self, *args)

    def value(self, i):
        r"""value(decomp self, int i) -> complex"""
        return _pygamma.decomp_value(self, i)

    def bcoefficient(self, i):
        r"""bcoefficient(decomp self, int i) -> double"""
        return _pygamma.decomp_bcoefficient(self, i)

    def index(self, Opname):
        r"""index(decomp self, std::string const & Opname) -> int"""
        return _pygamma.decomp_index(self, Opname)

    def SortBySpins(self):
        r"""SortBySpins(decomp self) -> IntVector"""
        return _pygamma.decomp_SortBySpins(self)

# Register decomp in _pygamma:
_pygamma.decomp_swigregister(decomp)


def PB_dec(arg1, arg2):
    r"""PB_dec(spin_sys arg1, gen_op arg2)"""
    return _pygamma.PB_dec(arg1, arg2)
class PulWaveform(object):
    r"""Proxy of C++ PulWaveform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PulWaveform self) -> PulWaveform
        __init__(PulWaveform self, row_vector wfsteps, row_vector wftimes, std::string const & wfname="", int wfrad=0) -> PulWaveform
        __init__(PulWaveform self, PulWaveform PT1) -> PulWaveform
        """
        if self.__class__ == PulWaveform:
            _self = None
        else:
            _self = self
        _pygamma.PulWaveform_swiginit(self, _pygamma.new_PulWaveform(_self, *args))
    __swig_destroy__ = _pygamma.delete_PulWaveform

    def __assign__(self, PWF1):
        r"""__assign__(PulWaveform self, PulWaveform PWF1) -> PulWaveform"""
        return _pygamma.PulWaveform___assign__(self, PWF1)

    def name(self):
        r"""name(PulWaveform self) -> std::string"""
        return _pygamma.PulWaveform_name(self)

    def values(self):
        r"""values(PulWaveform self) -> row_vector"""
        return _pygamma.PulWaveform_values(self)

    def lengths(self):
        r"""lengths(PulWaveform self) -> row_vector"""
        return _pygamma.PulWaveform_lengths(self)

    def strength(self, i):
        r"""strength(PulWaveform self, int i) -> double"""
        return _pygamma.PulWaveform_strength(self, i)

    def phase(self, i):
        r"""phase(PulWaveform self, int i) -> double"""
        return _pygamma.PulWaveform_phase(self, i)

    def length(self, *args):
        r"""
        length(PulWaveform self) -> double
        length(PulWaveform self, int i) -> double
        """
        return _pygamma.PulWaveform_length(self, *args)

    def value(self, i):
        r"""value(PulWaveform self, int i) -> complex"""
        return _pygamma.PulWaveform_value(self, i)

    def maxlength(self):
        r"""maxlength(PulWaveform self) -> double"""
        return _pygamma.PulWaveform_maxlength(self)

    def minlength(self, cutoff=1.e-13):
        r"""minlength(PulWaveform self, double cutoff=1.e-13) -> double"""
        return _pygamma.PulWaveform_minlength(self, cutoff)

    def maxgamB1(self):
        r"""maxgamB1(PulWaveform self) -> double"""
        return _pygamma.PulWaveform_maxgamB1(self)

    def mingamB1(self):
        r"""mingamB1(PulWaveform self) -> double"""
        return _pygamma.PulWaveform_mingamB1(self)

    def gamB1const(self):
        r"""gamB1const(PulWaveform self) -> bool"""
        return _pygamma.PulWaveform_gamB1const(self)

    def phaseconst(self):
        r"""phaseconst(PulWaveform self) -> bool"""
        return _pygamma.PulWaveform_phaseconst(self)

    def timeconst(self):
        r"""timeconst(PulWaveform self) -> bool"""
        return _pygamma.PulWaveform_timeconst(self)

    def steps(self, *args):
        r"""
        steps(PulWaveform self) -> int
        steps(PulWaveform self, double td) -> double
        """
        return _pygamma.PulWaveform_steps(self, *args)

    def fullsteps(self, td):
        r"""fullsteps(PulWaveform self, double td) -> int"""
        return _pygamma.PulWaveform_fullsteps(self, td)

    def WFs(self, td):
        r"""WFs(PulWaveform self, double td) -> double"""
        return _pygamma.PulWaveform_WFs(self, td)

    def fullWFs(self, td, cut=1.e-13):
        r"""fullWFs(PulWaveform self, double td, double cut=1.e-13) -> int"""
        return _pygamma.PulWaveform_fullWFs(self, td, cut)

    def sumlength(self, i):
        r"""sumlength(PulWaveform self, int i) -> double"""
        return _pygamma.PulWaveform_sumlength(self, i)

    def scalegB1(self, sf):
        r"""scalegB1(PulWaveform self, double sf)"""
        return _pygamma.PulWaveform_scalegB1(self, sf)

    def getIdeal(self, gB1, ptt, i):
        r"""getIdeal(PulWaveform self, double & gB1, double & ptt, int i)"""
        return _pygamma.PulWaveform_getIdeal(self, gB1, ptt, i)

    def IvsT(self, split=0, ends=0, N=1):
        r"""IvsT(PulWaveform self, int split=0, int ends=0, int N=1) -> row_vector"""
        return _pygamma.PulWaveform_IvsT(self, split, ends, N)

    def PvsT(self, spl=0, ends=0, N=1, p=0):
        r"""PvsT(PulWaveform self, int spl=0, int ends=0, int N=1, double p=0) -> row_vector"""
        return _pygamma.PulWaveform_PvsT(self, spl, ends, N, p)

    def GP(self, type=0, split=0, ends=0, N=1):
        r"""GP(PulWaveform self, int type=0, int split=0, int ends=0, int N=1)"""
        return _pygamma.PulWaveform_GP(self, type, split, ends, N)

    def FM(self, type=0, split=0, ends=0, N=1):
        r"""FM(PulWaveform self, int type=0, int split=0, int ends=0, int N=1)"""
        return _pygamma.PulWaveform_FM(self, type, split, ends, N)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_PulWaveform(self)
        return weakref.proxy(self)

# Register PulWaveform in _pygamma:
_pygamma.PulWaveform_swigregister(PulWaveform)

class PulComposite(PulWaveform):
    r"""Proxy of C++ PulComposite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PulComposite self) -> PulComposite
        __init__(PulComposite self, PulWaveform pulwf, spin_system sys, std::string const & isoch) -> PulComposite
        __init__(PulComposite self, PulWaveform pulwf, gen_op H, gen_op FX, gen_op FY, gen_op FZ, std::string const & isoch) -> PulComposite
        __init__(PulComposite self, PulWaveform pulwf, spin_system sys, super_op LOp, std::string const & isoch) -> PulComposite
        __init__(PulComposite self, PulComposite PT1) -> PulComposite
        """
        if self.__class__ == PulComposite:
            _self = None
        else:
            _self = self
        _pygamma.PulComposite_swiginit(self, _pygamma.new_PulComposite(_self, *args))
    __swig_destroy__ = _pygamma.delete_PulComposite

    def __assign__(self, CPul1):
        r"""__assign__(PulComposite self, PulComposite CPul1) -> PulComposite"""
        return _pygamma.PulComposite___assign__(self, CPul1)

    def GetH(self, i):
        r"""GetH(PulComposite self, int i) -> gen_op"""
        return _pygamma.PulComposite_GetH(self, i)

    def L0(self, i):
        r"""L0(PulComposite self, int i) -> super_op"""
        return _pygamma.PulComposite_L0(self, i)

    def GetL0(self, i):
        r"""GetL0(PulComposite self, int i) -> super_op"""
        return _pygamma.PulComposite_GetL0(self, i)

    def Leff(self, i):
        r"""Leff(PulComposite self, int i) -> super_op"""
        return _pygamma.PulComposite_Leff(self, i)

    def GetLeff(self, i):
        r"""GetLeff(PulComposite self, int i) -> super_op"""
        return _pygamma.PulComposite_GetLeff(self, i)

    def GetU(self, *args):
        r"""
        GetU(PulComposite self, int i=-1) -> HSprop
        GetU(PulComposite self, int i, double td) -> HSprop
        GetU(PulComposite self, double td) -> HSprop
        """
        return _pygamma.PulComposite_GetU(self, *args)

    def GetUsum(self, i=-1):
        r"""GetUsum(PulComposite self, int i=-1) -> HSprop"""
        return _pygamma.PulComposite_GetUsum(self, i)

    def GetUmult(self, N):
        r"""GetUmult(PulComposite self, int N) -> HSprop"""
        return _pygamma.PulComposite_GetUmult(self, N)

    def channel(self):
        r"""channel(PulComposite self) -> std::string"""
        return _pygamma.PulComposite_channel(self)

    def FZ(self):
        r"""FZ(PulComposite self) -> gen_op"""
        return _pygamma.PulComposite_FZ(self)

    def ROp(self):
        r"""ROp(PulComposite self) -> super_op"""
        return _pygamma.PulComposite_ROp(self)

    def Precision(self):
        r"""Precision(PulComposite self) -> double"""
        return _pygamma.PulComposite_Precision(self)

    def scalegB1(self, sf):
        r"""scalegB1(PulComposite self, double sf)"""
        return _pygamma.PulComposite_scalegB1(self, sf)

    def setRelax(self, sys, LOp):
        r"""setRelax(PulComposite self, spin_system sys, super_op LOp)"""
        return _pygamma.PulComposite_setRelax(self, sys, LOp)

    def FIDheader(self, typ, rlx=0):
        r"""FIDheader(PulComposite self, int typ, int rlx=0)"""
        return _pygamma.PulComposite_FIDheader(self, typ, rlx)

    def FIDpoint(self, typ, pt, iWFs, iSTs):
        r"""FIDpoint(PulComposite self, int typ, int pt, int iWFs, int iSTs)"""
        return _pygamma.PulComposite_FIDpoint(self, typ, pt, iWFs, iSTs)

    def FIDvalue(self, typ, td, z):
        r"""FIDvalue(PulComposite self, int typ, double td, complex z)"""
        return _pygamma.PulComposite_FIDvalue(self, typ, td, z)

    def FIDtell(self, SW):
        r"""FIDtell(PulComposite self, double SW)"""
        return _pygamma.PulComposite_FIDtell(self, SW)

    def FIDsync(self, SW, warn=0):
        r"""FIDsync(PulComposite self, double & SW, int warn=0) -> double"""
        return _pygamma.PulComposite_FIDsync(self, SW, warn)

    def FIDtest(self, td, nWFs, nSTPs, tr):
        r"""FIDtest(PulComposite self, double td, int & nWFs, int & nSTPs, double & tr) -> int"""
        return _pygamma.PulComposite_FIDtest(self, td, nWFs, nSTPs, tr)

    def FIDsynchWF(self, npts, nWFs, D, sigmap, track=0):
        r"""FIDsynchWF(PulComposite self, int npts, int nWFs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulComposite_FIDsynchWF(self, npts, nWFs, D, sigmap, track)

    def FIDsynchST(self, npts, nSTs, D, sigmap, track=0):
        r"""FIDsynchST(PulComposite self, int npts, int nSTs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulComposite_FIDsynchST(self, npts, nSTs, D, sigmap, track)

    def FIDsynchFR(self, npts, nFRs, D, sigmap, track=0):
        r"""FIDsynchFR(PulComposite self, int npts, int nFRs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulComposite_FIDsynchFR(self, npts, nFRs, D, sigmap, track)

    def FID(self, N, td, D, sp, track=0):
        r"""FID(PulComposite self, int N, double td, gen_op D, gen_op sp, int track=0) -> row_vector"""
        return _pygamma.PulComposite_FID(self, N, td, D, sp, track)

    def FIDRsynchWF(self, npts, nWFs, D, sigmap, track=0):
        r"""FIDRsynchWF(PulComposite self, int npts, int nWFs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulComposite_FIDRsynchWF(self, npts, nWFs, D, sigmap, track)

    def FIDRsynchST(self, npts, nSTs, D, sigmap, track=0):
        r"""FIDRsynchST(PulComposite self, int npts, int nSTs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulComposite_FIDRsynchST(self, npts, nSTs, D, sigmap, track)

    def FIDRsynchFR(self, npts, nFRs, D, sigmap, track=0):
        r"""FIDRsynchFR(PulComposite self, int npts, int nFRs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulComposite_FIDRsynchFR(self, npts, nFRs, D, sigmap, track)

    def FIDR(self, N, td, D, sp, track=0):
        r"""FIDR(PulComposite self, int N, double td, gen_op D, gen_op sp, int track=0) -> row_vector"""
        return _pygamma.PulComposite_FIDR(self, N, td, D, sp, track)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_PulComposite(self)
        return weakref.proxy(self)

# Register PulComposite in _pygamma:
_pygamma.PulComposite_swigregister(PulComposite)

class Pulse(object):
    r"""Proxy of C++ Pulse class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Pulse self) -> Pulse
        __init__(Pulse self, std::string const & ch, double gB1, double len, double ph=0, double off=0) -> Pulse
        __init__(Pulse self, Pulse PT1) -> Pulse
        """
        if self.__class__ == Pulse:
            _self = None
        else:
            _self = self
        _pygamma.Pulse_swiginit(self, _pygamma.new_Pulse(_self, *args))
    __swig_destroy__ = _pygamma.delete_Pulse

    def __assign__(self, Pulse1):
        r"""__assign__(Pulse self, Pulse Pulse1) -> Pulse"""
        return _pygamma.Pulse___assign__(self, Pulse1)

    def channel(self):
        r"""channel(Pulse self) -> std::string"""
        return _pygamma.Pulse_channel(self)

    def angle(self):
        r"""angle(Pulse self) -> double"""
        return _pygamma.Pulse_angle(self)

    def phase(self):
        r"""phase(Pulse self) -> double"""
        return _pygamma.Pulse_phase(self)

    def offset(self):
        r"""offset(Pulse self) -> double"""
        return _pygamma.Pulse_offset(self)

    def length(self):
        r"""length(Pulse self) -> double"""
        return _pygamma.Pulse_length(self)

    def strength(self, *args):
        r"""
        strength(Pulse self) -> double
        strength(Pulse self, double gB1)
        """
        return _pygamma.Pulse_strength(self, *args)

    def read(self, *args):
        r"""
        read(Pulse self, std::string const & filename, int idx=-1)
        read(Pulse self, ParameterSet pset, int idx=-1)
        """
        return _pygamma.Pulse_read(self, *args)

    def ask_read(self, argc, argv, argn):
        r"""ask_read(Pulse self, int argc, char *[] argv, int argn) -> std::string"""
        return _pygamma.Pulse_ask_read(self, argc, argv, argn)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_Pulse(self)
        return weakref.proxy(self)

# Register Pulse in _pygamma:
_pygamma.Pulse_swigregister(Pulse)

class Gpuldat(object):
    r"""Proxy of C++ Gpuldat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    N = property(_pygamma.Gpuldat_N_get, _pygamma.Gpuldat_N_set, doc=r"""N : int""")
    Wrf = property(_pygamma.Gpuldat_Wrf_get, _pygamma.Gpuldat_Wrf_set, doc=r"""Wrf : double""")
    Iso = property(_pygamma.Gpuldat_Iso_get, _pygamma.Gpuldat_Iso_set, doc=r"""Iso : std::string""")
    gamB1 = property(_pygamma.Gpuldat_gamB1_get, _pygamma.Gpuldat_gamB1_set, doc=r"""gamB1 : double""")
    tau = property(_pygamma.Gpuldat_tau_get, _pygamma.Gpuldat_tau_set, doc=r"""tau : double""")
    fact = property(_pygamma.Gpuldat_fact_get, _pygamma.Gpuldat_fact_set, doc=r"""fact : double""")
    phi = property(_pygamma.Gpuldat_phi_get, _pygamma.Gpuldat_phi_set, doc=r"""phi : double""")

    def __init__(self):
        r"""__init__(Gpuldat self) -> Gpuldat"""
        _pygamma.Gpuldat_swiginit(self, _pygamma.new_Gpuldat())
    __swig_destroy__ = _pygamma.delete_Gpuldat

# Register Gpuldat in _pygamma:
_pygamma.Gpuldat_swigregister(Gpuldat)


def Gpulse_Hs(Hs, H0, Fxy, N, ang, tp, fact):
    r"""Gpulse_Hs(gen_op Hs, gen_op H0, gen_op Fxy, int N, double ang, double tp, double fact)"""
    return _pygamma.Gpulse_Hs(Hs, H0, Fxy, N, ang, tp, fact)

def Gpulse_Us(Us, H0, Fxy, N, ang, tp, fact):
    r"""Gpulse_Us(gen_op Us, gen_op H0, gen_op Fxy, int N, double ang, double tp, double fact)"""
    return _pygamma.Gpulse_Us(Us, H0, Fxy, N, ang, tp, fact)

def Gpulse_U(*args):
    r"""
    Gpulse_U(spin_system sys, Gpuldat Gdata) -> gen_op
    Gpulse_U(spin_sys sys, gen_op H0, Gpuldat Gdata) -> gen_op
    Gpulse_U(gen_op H0rot, gen_op Fxy, Gpuldat Gdata) -> gen_op
    Gpulse_U(gen_op H0rot, gen_op Fxy, int N, double ang, double tp, double fact) -> gen_op
    """
    return _pygamma.Gpulse_U(*args)

def Gpulse_UX(H0rot, Fxy, N, ang, tp, fact):
    r"""Gpulse_UX(gen_op H0rot, gen_op Fxy, int N, double ang, double tp, double fact) -> gen_op"""
    return _pygamma.Gpulse_UX(H0rot, Fxy, N, ang, tp, fact)

def Gangle(gamB1, tau, N, fact=0.025):
    r"""Gangle(double gamB1, double tau, int N, double fact=0.025) -> double"""
    return _pygamma.Gangle(gamB1, tau, N, fact)

def GgamB1(angle, tau, N, fact=0.025):
    r"""GgamB1(double angle, double tau, int N, double fact=0.025) -> double"""
    return _pygamma.GgamB1(angle, tau, N, fact)

def Gtime(angle, gamB1, N, fact=0.025):
    r"""Gtime(double angle, double gamB1, int N, double fact=0.025) -> double"""
    return _pygamma.Gtime(angle, gamB1, N, fact)

def GNvect(N, fact):
    r"""GNvect(int N, double fact) -> row_vector"""
    return _pygamma.GNvect(N, fact)

def Gvect(gamB1, N, fact=0.025):
    r"""Gvect(double gamB1, int N, double fact=0.025) -> row_vector"""
    return _pygamma.Gvect(gamB1, N, fact)

def GIntvec(gamB1, tau, Npts, fact=0.05):
    r"""GIntvec(double gamB1, double tau, int Npts, double fact=0.05) -> row_vector"""
    return _pygamma.GIntvec(gamB1, tau, Npts, fact)

def Ghistogram(gamB1, tau, N, fact=0.05):
    r"""Ghistogram(double gamB1, double tau, int N, double fact=0.05) -> row_vector"""
    return _pygamma.Ghistogram(gamB1, tau, N, fact)

def ask_Gpulse(argc, argv, qn, N, val1, val2, fact, type=0):
    r"""ask_Gpulse(int argc, char *[] argv, int & qn, int & N, double & val1, double & val2, double & fact, int const type=0)"""
    return _pygamma.ask_Gpulse(argc, argv, qn, N, val1, val2, fact, type)

def read_Gpulse(*args):
    r"""
    read_Gpulse(std::string & filein, spin_system sys, int idx=-1, int pflag=1) -> Gpuldat
    read_Gpulse(std::string & filein, int & N, double & val1, double & val2, double & fact, int & spin, int type=0, int idx=-1)
    """
    return _pygamma.read_Gpulse(*args)
class SincPulDat(object):
    r"""Proxy of C++ SincPulDat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    N = property(_pygamma.SincPulDat_N_get, _pygamma.SincPulDat_N_set, doc=r"""N : int""")
    Wrf = property(_pygamma.SincPulDat_Wrf_get, _pygamma.SincPulDat_Wrf_set, doc=r"""Wrf : double""")
    Iso = property(_pygamma.SincPulDat_Iso_get, _pygamma.SincPulDat_Iso_set, doc=r"""Iso : std::string""")
    gamB1 = property(_pygamma.SincPulDat_gamB1_get, _pygamma.SincPulDat_gamB1_set, doc=r"""gamB1 : double""")
    tau = property(_pygamma.SincPulDat_tau_get, _pygamma.SincPulDat_tau_set, doc=r"""tau : double""")
    node = property(_pygamma.SincPulDat_node_get, _pygamma.SincPulDat_node_set, doc=r"""node : int""")
    phi = property(_pygamma.SincPulDat_phi_get, _pygamma.SincPulDat_phi_set, doc=r"""phi : double""")

    def __init__(self):
        r"""__init__(SincPulDat self) -> SincPulDat"""
        _pygamma.SincPulDat_swiginit(self, _pygamma.new_SincPulDat())
    __swig_destroy__ = _pygamma.delete_SincPulDat

# Register SincPulDat in _pygamma:
_pygamma.SincPulDat_swigregister(SincPulDat)


def SincPulseHs(Hs, H0, Fxy, N, ang, tp, node=3):
    r"""SincPulseHs(gen_op Hs, gen_op H0, gen_op Fxy, int N, double ang, double tp, int node=3)"""
    return _pygamma.SincPulseHs(Hs, H0, Fxy, N, ang, tp, node)

def SincPulseUs(Us, H0, Fxy, N, ang, tp, node=3):
    r"""SincPulseUs(gen_op Us, gen_op H0, gen_op Fxy, int N, double ang, double tp, int node=3)"""
    return _pygamma.SincPulseUs(Us, H0, Fxy, N, ang, tp, node)

def SincPulseU(*args):
    r"""
    SincPulseU(gen_op H0rot, gen_op Fxy, int N, double ang, double tp, int node=3) -> gen_op
    SincPulseU(gen_op H0rot, gen_op Fxy, SincPulDat SD) -> gen_op
    """
    return _pygamma.SincPulseU(*args)

def SincNVect(*args):
    r"""
    SincNVect(SincPulDat SD, int endzero=0) -> row_vector
    SincNVect(int N, int node=3, int endzero=0) -> row_vector
    """
    return _pygamma.SincNVect(*args)

def SincVect(*args):
    r"""
    SincVect(SincPulDat SD, int endzero=0) -> row_vector
    SincVect(double gamB1, int N, int node=3, int endzero=0) -> row_vector
    """
    return _pygamma.SincVect(*args)

def SincIntVec(*args):
    r"""
    SincIntVec(SincPulDat SD, int endzero=0) -> row_vector
    SincIntVec(double gB1, double tp, int N, int node=3, int endzero=0) -> row_vector
    """
    return _pygamma.SincIntVec(*args)

def SincSteps(pset, idx=-1, pf=0):
    r"""SincSteps(ParameterSet pset, int idx=-1, int pf=0) -> int"""
    return _pygamma.SincSteps(pset, idx, pf)

def SincStrength(pset, SD, idx=-1, pf=0):
    r"""SincStrength(ParameterSet pset, SincPulDat SD, int idx=-1, int pf=0) -> int"""
    return _pygamma.SincStrength(pset, SD, idx, pf)

def SincSelectivity(pset, sys, Sdata, idx=-1, pf=0):
    r"""SincSelectivity(ParameterSet pset, spin_system sys, SincPulDat Sdata, int idx=-1, int pf=0) -> int"""
    return _pygamma.SincSelectivity(pset, sys, Sdata, idx, pf)

def SincPhase(pset, idx, pf=0):
    r"""SincPhase(ParameterSet pset, int idx, int pf=0) -> double"""
    return _pygamma.SincPhase(pset, idx, pf)

def ReadSinc(filein, sys, idx=-1, pf=0):
    r"""ReadSinc(std::string const & filein, spin_system sys, int idx=-1, int pf=0) -> SincPulDat"""
    return _pygamma.ReadSinc(filein, sys, idx, pf)

def SincHistogram(gamB1, tau, N, node=3):
    r"""SincHistogram(double gamB1, double tau, int N, int node=3) -> row_vector"""
    return _pygamma.SincHistogram(gamB1, tau, N, node)

def SincPts(argc, argv, qn, SD):
    r"""SincPts(int argc, char *[] argv, int & qn, SincPulDat SD)"""
    return _pygamma.SincPts(argc, argv, qn, SD)

def SincNode(*args):
    r"""
    SincNode(ParameterSet pset, int idx=-1, int pf=0) -> int
    SincNode(int argc, char *[] argv, int & qn, SincPulDat SD)
    """
    return _pygamma.SincNode(*args)

def SincTime(*args):
    r"""
    SincTime(double angle, double gamB1, int N, int node=3) -> double
    SincTime(int argc, char *[] argv, int & qn, SincPulDat SD)
    """
    return _pygamma.SincTime(*args)

def SincGamB1(*args):
    r"""
    SincGamB1(double angle, double tau, int N, int node=3) -> double
    SincGamB1(int argc, char *[] argv, int & qn, SincPulDat SD)
    """
    return _pygamma.SincGamB1(*args)

def SincAngle(*args):
    r"""
    SincAngle(double gamB1, double tau, int N, int node=3) -> double
    SincAngle(int argc, char *[] argv, int & qn, double & pang)
    """
    return _pygamma.SincAngle(*args)

def SincIso(argc, argv, qn, SD):
    r"""SincIso(int argc, char *[] argv, int & qn, SincPulDat SD)"""
    return _pygamma.SincIso(argc, argv, qn, SD)

def SincWrf(argc, argv, qn, SD):
    r"""SincWrf(int argc, char *[] argv, int & qn, SincPulDat SD)"""
    return _pygamma.SincWrf(argc, argv, qn, SD)

def SincPhi(argc, argv, qn, SD):
    r"""SincPhi(int argc, char *[] argv, int & qn, SincPulDat SD)"""
    return _pygamma.SincPhi(argc, argv, qn, SD)

def SincAsk(argc, argv, qn, type=0):
    r"""SincAsk(int argc, char *[] argv, int & qn, int type=0) -> SincPulDat"""
    return _pygamma.SincAsk(argc, argv, qn, type)

def SincZero(SincData):
    r"""SincZero(SincPulDat SincData)"""
    return _pygamma.SincZero(SincData)

def SincPrep(N, node, den, Z):
    r"""SincPrep(int & N, int & node, double & den, double & Z)"""
    return _pygamma.SincPrep(N, node, den, Z)
class PulCycle(PulComposite):
    r"""Proxy of C++ PulCycle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PulCycle self) -> PulCycle
        __init__(PulCycle self, PulComposite P, row_vector S, std::string N) -> PulCycle
        __init__(PulCycle self, PulCycle PT1) -> PulCycle
        """
        if self.__class__ == PulCycle:
            _self = None
        else:
            _self = self
        _pygamma.PulCycle_swiginit(self, _pygamma.new_PulCycle(_self, *args))
    __swig_destroy__ = _pygamma.delete_PulCycle

    def __assign__(self, CYC1):
        r"""__assign__(PulCycle self, PulCycle CYC1) -> PulCycle"""
        return _pygamma.PulCycle___assign__(self, CYC1)

    def GetCU(self, i=-1):
        r"""GetCU(PulCycle self, int i=-1) -> HSprop"""
        return _pygamma.PulCycle_GetCU(self, i)

    def GetCUsum(self, *args):
        r"""
        GetCUsum(PulCycle self, int i=-1) -> HSprop
        GetCUsum(PulCycle self, int i, int j) -> HSprop
        """
        return _pygamma.PulCycle_GetCUsum(self, *args)

    def GetCUmult(self, N):
        r"""GetCUmult(PulCycle self, int N) -> HSprop"""
        return _pygamma.PulCycle_GetCUmult(self, N)

    def GetCG(self, *args):
        r"""
        GetCG(PulCycle self, int i, int j, double td) -> LSprop
        GetCG(PulCycle self, int i=-1) -> LSprop
        """
        return _pygamma.PulCycle_GetCG(self, *args)

    def GetCGsum(self, *args):
        r"""
        GetCGsum(PulCycle self, int i=-1) -> LSprop
        GetCGsum(PulCycle self, int i, int j) -> LSprop
        """
        return _pygamma.PulCycle_GetCGsum(self, *args)

    def GetCGmult(self, N):
        r"""GetCGmult(PulCycle self, int N) -> LSprop"""
        return _pygamma.PulCycle_GetCGmult(self, N)

    def WF_steps(self):
        r"""WF_steps(PulCycle self) -> int"""
        return _pygamma.PulCycle_WF_steps(self)

    def name(self):
        r"""name(PulCycle self) -> std::string"""
        return _pygamma.PulCycle_name(self)

    def WF_name(self):
        r"""WF_name(PulCycle self) -> std::string"""
        return _pygamma.PulCycle_WF_name(self)

    def values(self):
        r"""values(PulCycle self) -> row_vector"""
        return _pygamma.PulCycle_values(self)

    def WF_values(self):
        r"""WF_values(PulCycle self) -> row_vector"""
        return _pygamma.PulCycle_WF_values(self)

    def length(self):
        r"""length(PulCycle self) -> double"""
        return _pygamma.PulCycle_length(self)

    def WF_length(self):
        r"""WF_length(PulCycle self) -> double"""
        return _pygamma.PulCycle_WF_length(self)

    def value(self, i):
        r"""value(PulCycle self, int i) -> complex"""
        return _pygamma.PulCycle_value(self, i)

    def phase(self, i):
        r"""phase(PulCycle self, int i) -> double"""
        return _pygamma.PulCycle_phase(self, i)

    def steps(self, *args):
        r"""
        steps(PulCycle self) -> int
        steps(PulCycle self, double td) -> double
        """
        return _pygamma.PulCycle_steps(self, *args)

    def cycles(self, td):
        r"""cycles(PulCycle self, double td) -> double"""
        return _pygamma.PulCycle_cycles(self, td)

    def fullcycles(self, td=-1):
        r"""fullcycles(PulCycle self, double td=-1) -> int"""
        return _pygamma.PulCycle_fullcycles(self, td)

    def scalegB1(self, sf):
        r"""scalegB1(PulCycle self, double sf)"""
        return _pygamma.PulCycle_scalegB1(self, sf)

    def IvsT(self, split, ends, N=1):
        r"""IvsT(PulCycle self, int split, int ends, int N=1) -> row_vector"""
        return _pygamma.PulCycle_IvsT(self, split, ends, N)

    def PvsT(self, split, ends, N=1, ph=0):
        r"""PvsT(PulCycle self, int split, int ends, int N=1, double ph=0) -> row_vector"""
        return _pygamma.PulCycle_PvsT(self, split, ends, N, ph)

    def GP(self, ty=1, spl=0, ed=0, N=1, p=0):
        r"""GP(PulCycle self, int ty=1, int spl=0, int ed=0, int N=1, double p=0)"""
        return _pygamma.PulCycle_GP(self, ty, spl, ed, N, p)

    def FM(self, ty=1, spl=0, ed=0, N=1, p=0):
        r"""FM(PulCycle self, int ty=1, int spl=0, int ed=0, int N=1, double p=0)"""
        return _pygamma.PulCycle_FM(self, ty, spl, ed, N, p)

    def FIDsync(self, SW):
        r"""FIDsync(PulCycle self, double & SW) -> double"""
        return _pygamma.PulCycle_FIDsync(self, SW)

    def FIDtest(self, td, nCYs, nWFs, nSTPs, tr):
        r"""FIDtest(PulCycle self, double td, int & nCYs, int & nWFs, int & nSTPs, double & tr) -> int"""
        return _pygamma.PulCycle_FIDtest(self, td, nCYs, nWFs, nSTPs, tr)

    def FIDsynchCYC(self, npts, nCYs, D, sigmap, track=0):
        r"""FIDsynchCYC(PulCycle self, int npts, int nCYs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulCycle_FIDsynchCYC(self, npts, nCYs, D, sigmap, track)

    def FIDWFsynch(self, npts, nWFs, D, sigmap, track=0):
        r"""FIDWFsynch(PulCycle self, int npts, int nWFs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulCycle_FIDWFsynch(self, npts, nWFs, D, sigmap, track)

    def FIDSTsynch(self, npts, nSTs, D, sigmap, track=0):
        r"""FIDSTsynch(PulCycle self, int npts, int nSTs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulCycle_FIDSTsynch(self, npts, nSTs, D, sigmap, track)

    def FID(self, N, td, D, sp, F=0):
        r"""FID(PulCycle self, int N, double td, gen_op D, gen_op sp, int F=0) -> row_vector"""
        return _pygamma.PulCycle_FID(self, N, td, D, sp, F)

    def FIDRsynchCYC(self, npts, nCYs, D, sigmap, track=0):
        r"""FIDRsynchCYC(PulCycle self, int npts, int nCYs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulCycle_FIDRsynchCYC(self, npts, nCYs, D, sigmap, track)

    def FIDRWFsynch(self, npts, nWFs, D, sigmap, track=0):
        r"""FIDRWFsynch(PulCycle self, int npts, int nWFs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulCycle_FIDRWFsynch(self, npts, nWFs, D, sigmap, track)

    def FIDRSTsynch(self, npts, nSTs, D, sigmap, track=0):
        r"""FIDRSTsynch(PulCycle self, int npts, int nSTs, gen_op D, gen_op sigmap, int track=0) -> row_vector"""
        return _pygamma.PulCycle_FIDRSTsynch(self, npts, nSTs, D, sigmap, track)

    def FIDR(self, N, td, D, sp, F=0):
        r"""FIDR(PulCycle self, int N, double td, gen_op D, gen_op sp, int F=0) -> row_vector"""
        return _pygamma.PulCycle_FIDR(self, N, td, D, sp, F)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_PulCycle(self)
        return weakref.proxy(self)

# Register PulCycle in _pygamma:
_pygamma.PulCycle_swigregister(PulCycle)

class MLEV(Pulse):
    r"""Proxy of C++ MLEV class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MLEV self) -> MLEV
        __init__(MLEV self, double gB1, std::string const & ch, double ph=0, double off=0) -> MLEV
        __init__(MLEV self, MLEV PT1) -> MLEV
        """
        if self.__class__ == MLEV:
            _self = None
        else:
            _self = self
        _pygamma.MLEV_swiginit(self, _pygamma.new_MLEV(_self, *args))
    __swig_destroy__ = _pygamma.delete_MLEV

    def __assign__(self, MLEV1):
        r"""__assign__(MLEV self, MLEV MLEV1) -> MLEV"""
        return _pygamma.MLEV___assign__(self, MLEV1)

    def WF(self):
        r"""WF(MLEV self) -> PulWaveform"""
        return _pygamma.MLEV_WF(self)

    def WF_C180(self):
        r"""WF_C180(MLEV self) -> PulWaveform"""
        return _pygamma.MLEV_WF_C180(self)

    def PCmp(self, sys):
        r"""PCmp(MLEV self, spin_system sys) -> PulComposite"""
        return _pygamma.MLEV_PCmp(self, sys)

    def PCmp_C180(self, sys):
        r"""PCmp_C180(MLEV self, spin_system sys) -> PulComposite"""
        return _pygamma.MLEV_PCmp_C180(self, sys)

    def CycMLEV4(self, sys):
        r"""CycMLEV4(MLEV self, spin_system sys) -> PulCycle"""
        return _pygamma.MLEV_CycMLEV4(self, sys)

    def CycMLEV8(self, sys):
        r"""CycMLEV8(MLEV self, spin_system sys) -> PulCycle"""
        return _pygamma.MLEV_CycMLEV8(self, sys)

    def CycMLEV16(self, sys):
        r"""CycMLEV16(MLEV self, spin_system sys) -> PulCycle"""
        return _pygamma.MLEV_CycMLEV16(self, sys)

    def read(self, *args):
        r"""
        read(MLEV self, std::string const & filename, int idx=-1)
        read(MLEV self, ParameterSet pset, int idx=-1)
        """
        return _pygamma.MLEV_read(self, *args)

    def ask_read(self, argc, argv, argn):
        r"""ask_read(MLEV self, int argc, char *[] argv, int argn)"""
        return _pygamma.MLEV_ask_read(self, argc, argv, argn)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_MLEV(self)
        return weakref.proxy(self)

# Register MLEV in _pygamma:
_pygamma.MLEV_swigregister(MLEV)


def CYC_MLEV4(phi=0):
    r"""CYC_MLEV4(double phi=0) -> row_vector"""
    return _pygamma.CYC_MLEV4(phi)

def CYC_MLEV8(phi=0):
    r"""CYC_MLEV8(double phi=0) -> row_vector"""
    return _pygamma.CYC_MLEV8(phi)

def CYC_MLEV16(phi=0):
    r"""CYC_MLEV16(double phi=0) -> row_vector"""
    return _pygamma.CYC_MLEV16(phi)
class PulTrain(PulComposite):
    r"""Proxy of C++ PulTrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PulTrain self) -> PulTrain
        __init__(PulTrain self, PulComposite CPul, std::string N="") -> PulTrain
        __init__(PulTrain self, PulComposite CPul, PulCycle Cyc, std::string N="") -> PulTrain
        __init__(PulTrain self, PulComposite CPul, PulCycle Cyc, PulSupCycle SCyc, std::string N="") -> PulTrain
        __init__(PulTrain self, PulTrain PT1) -> PulTrain
        """
        if self.__class__ == PulTrain:
            _self = None
        else:
            _self = self
        _pygamma.PulTrain_swiginit(self, _pygamma.new_PulTrain(_self, *args))
    __swig_destroy__ = _pygamma.delete_PulTrain

    def __assign__(self, PT1):
        r"""__assign__(PulTrain self, PulTrain PT1) -> PulTrain"""
        return _pygamma.PulTrain___assign__(self, PT1)

    def GetU(self, td):
        r"""GetU(PulTrain self, double td) -> HSprop"""
        return _pygamma.PulTrain_GetU(self, td)

    def FID(self, npts, td, D, sigmap):
        r"""FID(PulTrain self, int npts, double td, gen_op D, gen_op sigmap) -> row_vector"""
        return _pygamma.PulTrain_FID(self, npts, td, D, sigmap)

    def FIDR(self, npts, td, D, sigmap):
        r"""FIDR(PulTrain self, int npts, double td, gen_op D, gen_op sigmap) -> row_vector"""
        return _pygamma.PulTrain_FIDR(self, npts, td, D, sigmap)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_PulTrain(self)
        return weakref.proxy(self)

# Register PulTrain in _pygamma:
_pygamma.PulTrain_swigregister(PulTrain)

class PulSupCycle(object):
    r"""Proxy of C++ PulSupCycle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PulSupCycle self) -> PulSupCycle
        __init__(PulSupCycle self, row_vector ptsteps, std::string const & ptname="") -> PulSupCycle
        __init__(PulSupCycle self, PulSupCycle PT1) -> PulSupCycle
        __init__(PulSupCycle self, PulCycle Cyc) -> PulSupCycle
        """
        _pygamma.PulSupCycle_swiginit(self, _pygamma.new_PulSupCycle(*args))
    __swig_destroy__ = _pygamma.delete_PulSupCycle

    def __assign__(self, SCyc1):
        r"""__assign__(PulSupCycle self, PulSupCycle SCyc1) -> PulSupCycle"""
        return _pygamma.PulSupCycle___assign__(self, SCyc1)

    def steps(self):
        r"""steps(PulSupCycle self) -> int"""
        return _pygamma.PulSupCycle_steps(self)

    def name(self):
        r"""name(PulSupCycle self) -> std::string"""
        return _pygamma.PulSupCycle_name(self)

    def values(self):
        r"""values(PulSupCycle self) -> row_vector"""
        return _pygamma.PulSupCycle_values(self)

    def value(self, i):
        r"""value(PulSupCycle self, int i) -> complex"""
        return _pygamma.PulSupCycle_value(self, i)

    def phase(self, i):
        r"""phase(PulSupCycle self, int i) -> double"""
        return _pygamma.PulSupCycle_phase(self, i)

# Register PulSupCycle in _pygamma:
_pygamma.PulSupCycle_swigregister(PulSupCycle)


def WF_CHIRP95(N, tp, delW, gB1, scale=0):
    r"""WF_CHIRP95(int N, double tp, double delW, double gB1, int scale=0) -> PulWaveform"""
    return _pygamma.WF_CHIRP95(N, tp, delW, gB1, scale)

def CP_CHIRP95(sys, IsoC, N, tp, delW, gB1, scale=0):
    r"""CP_CHIRP95(spin_system sys, std::string const & IsoC, int N, double tp, double delW, double gB1, int scale=0) -> PulComposite"""
    return _pygamma.CP_CHIRP95(sys, IsoC, N, tp, delW, gB1, scale)

def CYC_CHIRP95():
    r"""CYC_CHIRP95() -> PulCycle"""
    return _pygamma.CYC_CHIRP95()
class GARP(object):
    r"""Proxy of C++ GARP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GARP self) -> GARP
        __init__(GARP self, double gB1, std::string const & ch, double ph=0, double off=0) -> GARP
        __init__(GARP self, GARP PT1) -> GARP
        """
        _pygamma.GARP_swiginit(self, _pygamma.new_GARP(*args))
    __swig_destroy__ = _pygamma.delete_GARP

    def __assign__(self, GARP1):
        r"""__assign__(GARP self, GARP GARP1) -> GARP"""
        return _pygamma.GARP___assign__(self, GARP1)

    def channel(self):
        r"""channel(GARP self) -> std::string"""
        return _pygamma.GARP_channel(self)

    def strength(self, *args):
        r"""
        strength(GARP self) -> double
        strength(GARP self, double gB1)
        """
        return _pygamma.GARP_strength(self, *args)

    def phase(self):
        r"""phase(GARP self) -> double"""
        return _pygamma.GARP_phase(self)

    def offset(self):
        r"""offset(GARP self) -> double"""
        return _pygamma.GARP_offset(self)

    def WF(self):
        r"""WF(GARP self) -> PulWaveform"""
        return _pygamma.GARP_WF(self)

    def WF_GARP(self):
        r"""WF_GARP(GARP self) -> PulWaveform"""
        return _pygamma.GARP_WF_GARP(self)

    def PCmpGARP(self, sys):
        r"""PCmpGARP(GARP self, spin_system sys) -> PulComposite"""
        return _pygamma.GARP_PCmpGARP(self, sys)

    def PCmp(self, *args):
        r"""
        PCmp(GARP self, spin_system sys) -> PulComposite
        PCmp(GARP self, spin_system sys, super_op LOp) -> PulComposite
        """
        return _pygamma.GARP_PCmp(self, *args)

    def CycGARP1(self, sys):
        r"""CycGARP1(GARP self, spin_system sys) -> PulCycle"""
        return _pygamma.GARP_CycGARP1(self, sys)

    def read(self, *args):
        r"""
        read(GARP self, std::string const & filename, int idx=-1)
        read(GARP self, ParameterSet pset, int idx=-1)
        """
        return _pygamma.GARP_read(self, *args)

    def ask_read(self, argc, argv, argn, idx=-1):
        r"""ask_read(GARP self, int argc, char *[] argv, int argn, int idx=-1)"""
        return _pygamma.GARP_ask_read(self, argc, argv, argn, idx)

# Register GARP in _pygamma:
_pygamma.GARP_swigregister(GARP)

class WALTZ(Pulse):
    r"""Proxy of C++ WALTZ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(WALTZ self) -> WALTZ
        __init__(WALTZ self, double gB1, std::string const & ch, double ph=0, double off=0) -> WALTZ
        __init__(WALTZ self, WALTZ WP1) -> WALTZ
        """
        if self.__class__ == WALTZ:
            _self = None
        else:
            _self = self
        _pygamma.WALTZ_swiginit(self, _pygamma.new_WALTZ(_self, *args))
    __swig_destroy__ = _pygamma.delete_WALTZ

    def __assign__(self, WALTZ1):
        r"""__assign__(WALTZ self, WALTZ WALTZ1) -> WALTZ"""
        return _pygamma.WALTZ___assign__(self, WALTZ1)

    def WF(self, even=0):
        r"""WF(WALTZ self, int even=0) -> PulWaveform"""
        return _pygamma.WALTZ_WF(self, even)

    def WF_WALTZR(self, even=0):
        r"""WF_WALTZR(WALTZ self, int even=0) -> PulWaveform"""
        return _pygamma.WALTZ_WF_WALTZR(self, even)

    def WF_WALTZK(self, even=0):
        r"""WF_WALTZK(WALTZ self, int even=0) -> PulWaveform"""
        return _pygamma.WALTZ_WF_WALTZK(self, even)

    def WF_WALTZQ(self, even=0):
        r"""WF_WALTZQ(WALTZ self, int even=0) -> PulWaveform"""
        return _pygamma.WALTZ_WF_WALTZQ(self, even)

    def PCmp(self, sys, even=0):
        r"""PCmp(WALTZ self, spin_system sys, int even=0) -> PulComposite"""
        return _pygamma.WALTZ_PCmp(self, sys, even)

    def PCmpWALTZR(self, sys, even=0):
        r"""PCmpWALTZR(WALTZ self, spin_system sys, int even=0) -> PulComposite"""
        return _pygamma.WALTZ_PCmpWALTZR(self, sys, even)

    def PCmpWALTZK(self, sys, even=0):
        r"""PCmpWALTZK(WALTZ self, spin_system sys, int even=0) -> PulComposite"""
        return _pygamma.WALTZ_PCmpWALTZK(self, sys, even)

    def PCmpWALTZQ(self, sys, even=0):
        r"""PCmpWALTZQ(WALTZ self, spin_system sys, int even=0) -> PulComposite"""
        return _pygamma.WALTZ_PCmpWALTZQ(self, sys, even)

    def CycWALTZ4(self, sys, even=0):
        r"""CycWALTZ4(WALTZ self, spin_system sys, int even=0) -> PulCycle"""
        return _pygamma.WALTZ_CycWALTZ4(self, sys, even)

    def CycWALTZ8(self, sys, even=0):
        r"""CycWALTZ8(WALTZ self, spin_system sys, int even=0) -> PulCycle"""
        return _pygamma.WALTZ_CycWALTZ8(self, sys, even)

    def CycWALTZ16(self, sys, even=0):
        r"""CycWALTZ16(WALTZ self, spin_system sys, int even=0) -> PulCycle"""
        return _pygamma.WALTZ_CycWALTZ16(self, sys, even)

    def read(self, *args):
        r"""
        read(WALTZ self, std::string const & filename, int idx=-1)
        read(WALTZ self, ParameterSet pset, int idx=-1)
        """
        return _pygamma.WALTZ_read(self, *args)

    def ask_read(self, argc, argv, argn):
        r"""ask_read(WALTZ self, int argc, char *[] argv, int argn)"""
        return _pygamma.WALTZ_ask_read(self, argc, argv, argn)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_WALTZ(self)
        return weakref.proxy(self)

# Register WALTZ in _pygamma:
_pygamma.WALTZ_swigregister(WALTZ)


def CYC_WALTZ4(phi=0):
    r"""CYC_WALTZ4(double phi=0) -> row_vector"""
    return _pygamma.CYC_WALTZ4(phi)

def CYC_WALTZ8(phi=0):
    r"""CYC_WALTZ8(double phi=0) -> row_vector"""
    return _pygamma.CYC_WALTZ8(phi)
class PulTrainSCyc(PulSupCycle):
    r"""Proxy of C++ PulTrainSCyc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PulTrainSCyc self) -> PulTrainSCyc
        __init__(PulTrainSCyc self, PulCycle PTC, row_vector S, std::string N) -> PulTrainSCyc
        __init__(PulTrainSCyc self, PulCycle PTC, PulSupCycle PCYC) -> PulTrainSCyc
        __init__(PulTrainSCyc self, PulTrainSCyc PT1) -> PulTrainSCyc
        """
        _pygamma.PulTrainSCyc_swiginit(self, _pygamma.new_PulTrainSCyc(*args))
    __swig_destroy__ = _pygamma.delete_PulTrainSCyc

    def __assign__(self, PTSC1):
        r"""__assign__(PulTrainSCyc self, PulTrainSCyc PTSC1) -> PulTrainSCyc"""
        return _pygamma.PulTrainSCyc___assign__(self, PTSC1)

    def GetU(self, i=-1):
        r"""GetU(PulTrainSCyc self, int i=-1) -> HSprop"""
        return _pygamma.PulTrainSCyc_GetU(self, i)

    def GetUsum(self, i=-1):
        r"""GetUsum(PulTrainSCyc self, int i=-1) -> HSprop"""
        return _pygamma.PulTrainSCyc_GetUsum(self, i)

    def GetUmult(self, N):
        r"""GetUmult(PulTrainSCyc self, int N) -> HSprop"""
        return _pygamma.PulTrainSCyc_GetUmult(self, N)

    def SetGs(self, PTC):
        r"""SetGs(PulTrainSCyc self, PulCycle PTC)"""
        return _pygamma.PulTrainSCyc_SetGs(self, PTC)

    def GetG(self, i=-1):
        r"""GetG(PulTrainSCyc self, int i=-1) -> LSprop"""
        return _pygamma.PulTrainSCyc_GetG(self, i)

    def length(self):
        r"""length(PulTrainSCyc self) -> double"""
        return _pygamma.PulTrainSCyc_length(self)

    def steps(self, *args):
        r"""
        steps(PulTrainSCyc self) -> int
        steps(PulTrainSCyc self, double td) -> double
        """
        return _pygamma.PulTrainSCyc_steps(self, *args)

    def fullSCYCs(self, td=-1):
        r"""fullSCYCs(PulTrainSCyc self, double td=-1) -> int"""
        return _pygamma.PulTrainSCyc_fullSCYCs(self, td)

    def fullsteps(self, td=-1):
        r"""fullsteps(PulTrainSCyc self, double td=-1) -> int"""
        return _pygamma.PulTrainSCyc_fullsteps(self, td)

# Register PulTrainSCyc in _pygamma:
_pygamma.PulTrainSCyc_swigregister(PulTrainSCyc)

class DANTE(object):
    r"""Proxy of C++ DANTE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DANTE self) -> DANTE
        __init__(DANTE self, DANTE PT1) -> DANTE
        """
        _pygamma.DANTE_swiginit(self, _pygamma.new_DANTE(*args))
    __swig_destroy__ = _pygamma.delete_DANTE

    def __assign__(self, DANTE1):
        r"""__assign__(DANTE self, DANTE DANTE1) -> DANTE"""
        return _pygamma.DANTE___assign__(self, DANTE1)

    def steps(self):
        r"""steps(DANTE self) -> int"""
        return _pygamma.DANTE_steps(self)

    def channel(self):
        r"""channel(DANTE self) -> std::string"""
        return _pygamma.DANTE_channel(self)

    def dlength(self):
        r"""dlength(DANTE self) -> double"""
        return _pygamma.DANTE_dlength(self)

    def strength(self):
        r"""strength(DANTE self) -> double"""
        return _pygamma.DANTE_strength(self)

    def plength(self):
        r"""plength(DANTE self) -> double"""
        return _pygamma.DANTE_plength(self)

    def angle(self):
        r"""angle(DANTE self) -> double"""
        return _pygamma.DANTE_angle(self)

    def phase(self):
        r"""phase(DANTE self) -> double"""
        return _pygamma.DANTE_phase(self)

    def offset(self):
        r"""offset(DANTE self) -> double"""
        return _pygamma.DANTE_offset(self)

    def length(self):
        r"""length(DANTE self) -> double"""
        return _pygamma.DANTE_length(self)

    def WF(self):
        r"""WF(DANTE self) -> PulWaveform"""
        return _pygamma.DANTE_WF(self)

    def CP(self, sys):
        r"""CP(DANTE self, spin_system sys) -> PulComposite"""
        return _pygamma.DANTE_CP(self, sys)

    def PT(self, sys):
        r"""PT(DANTE self, spin_system sys) -> PulTrain"""
        return _pygamma.DANTE_PT(self, sys)

    def read(self, *args):
        r"""
        read(DANTE self, std::string const & filename, int idx=-1)
        read(DANTE self, ParameterSet pset, int idx=-1)
        """
        return _pygamma.DANTE_read(self, *args)

    def ask_read(self, argc, argv, argn):
        r"""ask_read(DANTE self, int argc, char *[] argv, int argn)"""
        return _pygamma.DANTE_ask_read(self, argc, argv, argn)

# Register DANTE in _pygamma:
_pygamma.DANTE_swigregister(DANTE)


def WF_DANTE(td, gamB1, tpul, phi=0):
    r"""WF_DANTE(double td, double gamB1, double tpul, double phi=0) -> PulWaveform"""
    return _pygamma.WF_DANTE(td, gamB1, tpul, phi)

def CP_DANTE(*args):
    r"""
    CP_DANTE(spin_system sys, std::string const & Iso, double td, double gamB1, double tpul, double phi=0) -> PulComposite
    CP_DANTE(spin_system sys, DANTE D) -> PulComposite
    """
    return _pygamma.CP_DANTE(*args)

def PT_DANTE(sys, Iso, td, gamB1, tpul, phi=0):
    r"""PT_DANTE(spin_system sys, std::string const & Iso, double td, double gamB1, double tpul, double phi=0) -> PulTrain"""
    return _pygamma.PT_DANTE(sys, Iso, td, gamB1, tpul, phi)

def UDANTE(*args):
    r"""
    UDANTE(spin_system sys, gen_op H, std::string const & Iso, double td, double gamB1, double tpul, double phi) -> gen_op
    UDANTE(spin_system sys, gen_op H, DANTE D) -> gen_op
    """
    return _pygamma.UDANTE(*args)

def ask_DANTE(sys, Iso, H, cutoff=1.e-10):
    r"""ask_DANTE(spin_system sys, std::string const & Iso, gen_op H, double cutoff=1.e-10) -> double"""
    return _pygamma.ask_DANTE(sys, Iso, H, cutoff)

def set_DANTE(gamB1, tmix, tpul, tdel, numb, type):
    r"""set_DANTE(double gamB1, double & tmix, double & tpul, double tdel, int & numb, int & type)"""
    return _pygamma.set_DANTE(gamB1, tmix, tpul, tdel, numb, type)

def pulseshift(p, ptime, FreqOffset):
    r"""pulseshift(row_vector p, row_vector ptime, double const & FreqOffset) -> row_vector"""
    return _pygamma.pulseshift(p, ptime, FreqOffset)

def acquire(*args):
    r"""
    acquire(gen_op sig0, gen_op D, gen_op H, double td, int N, row_vector fid, double CO=1.e-18)
    acquire(gen_op sig0, gen_op D, gen_op U, int N, row_vector fid, double CO=1.e-18)
    acquire(gen_op sig0, gen_op D, HSprop U, int N, row_vector fid, double CO=1.e-18)
    acquire(gen_op sig0, gen_op D, gen_op H, double td, int N, double CO=1.e-18) -> row_vector
    acquire(gen_op sig0, gen_op D, gen_op U, int N, double CO=1.e-18) -> row_vector
    acquire(gen_op sig0, gen_op D, HSprop U, int N, double CO=1.e-18) -> row_vector
    acquire(gen_op sig0, gen_op D, super_op L, double td, int N, row_vector fid, double CO=1.e-18)
    acquire(gen_op sig0, gen_op sigf, gen_op D, super_op L, double td, int N, row_vector fid, double CO=1.e-18)
    acquire(gen_op sig0, gen_op D, super_op L, row_vector fid, double td, int np=0, double CO=1.e-18)
    acquire(gen_op sig0, gen_op sigf, gen_op D, super_op L, row_vector fid, double td, int np=0, double CO=1.e-18)
    acquire(gen_op sig0, gen_op D, super_op L, double td, int np, double CO=1.e-18) -> row_vector
    acquire(gen_op sig0, gen_op sigf, gen_op D, super_op L, double td, int np, double CO=1.e-18) -> row_vector
    acquire(gen_op sig, gen_op D, super_op G, row_vector data, int np=0)
    acquire(gen_op sig, gen_op D, super_op G, int np) -> row_vector
    acquire(gen_op sig, gen_op D, LSprop G, int np) -> row_vector
    acquire(std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Hs, double td, int t2pts, row_vector fid)
    acquire(std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Us, int t2pts, row_vector fid)
    acquire(std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Hs, double td, int t2pts) -> row_vector
    acquire(std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Us, int t2pts) -> row_vector
    acquire(RBasic RB, std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Hs, double td, int t2pts) -> row_vector
    """
    return _pygamma.acquire(*args)

def FID(*args):
    r"""
    FID(gen_op sig0, gen_op D, gen_op H, double td, int N, row_vector fid, double CO=1.e-18)
    FID(gen_op sig0, gen_op D, gen_op U, int N, row_vector fid, double CO=1.e-18)
    FID(gen_op sig0, gen_op D, HSprop U, int N, row_vector fid, double CO=1.e-18)
    FID(gen_op sig0, gen_op D, gen_op H, double td, int N, double CO=1.e-18) -> row_vector
    FID(gen_op sig0, gen_op D, gen_op U, int N, double CO=1.e-18) -> row_vector
    FID(gen_op sig0, gen_op D, HSprop U, int N, double CO=1.e-18) -> row_vector
    FID(gen_op sig0, gen_op D, super_op L, double td, int N, row_vector fid, double CO=1.e-18)
    FID(gen_op sig0, gen_op sigf, gen_op D, super_op L, double td, int N, row_vector fid, double CO=1.e-18)
    FID(gen_op sig0, gen_op D, super_op L, row_vector fid, double td, int np=0, double CO=1.e-18)
    FID(gen_op sig0, gen_op sigf, gen_op D, super_op L, row_vector fid, double td, int np=0, double CO=1.e-18)
    FID(gen_op sig0, gen_op D, super_op L, double td, int np, double CO=1.e-18) -> row_vector
    FID(gen_op sig0, gen_op sigf, gen_op D, super_op L, double td, int np, double CO=1.e-18) -> row_vector
    FID(gen_op sig, gen_op D, super_op G, row_vector data, int np=0)
    FID(gen_op sig, gen_op D, LSprop G, row_vector data, int np=0)
    FID(gen_op sig, gen_op D, super_op G, int np) -> row_vector
    FID(gen_op sig, gen_op D, LSprop G, int np) -> row_vector
    FID(std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Hs, double td, int t2pts, row_vector fid)
    FID(std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Us, int t2pts, row_vector fid)
    FID(std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Hs, double td, int t2pts) -> row_vector
    FID(std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Us, int t2pts) -> row_vector
    FID(RBasic RB, std::vector< gen_op,std::allocator< gen_op > > & sigmas, gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Hs, double td, int t2pts) -> row_vector
    """
    return _pygamma.FID(*args)

def acquire1DT(*args):
    r"""
    acquire1DT(gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Hs, std::vector< gen_op,std::allocator< gen_op > > & sigmas, int t2pts, double td, bool norm=True) -> row_vector
    acquire1DT(gen_op D, std::vector< gen_op,std::allocator< gen_op > > & Hs, gen_op sigmas, int t2pts, double td, bool norm=True) -> row_vector
    """
    return _pygamma.acquire1DT(*args)

def detect(D, sigmas):
    r"""detect(gen_op D, std::vector< gen_op,std::allocator< gen_op > > & sigmas) -> complex"""
    return _pygamma.detect(D, sigmas)

def Hzgrad(*args):
    r"""
    Hzgrad(sys_gradz sys, gen_op H0, gen_op H)
    Hzgrad(sys_gradz sys, gen_op H0) -> std::vector< gen_op,std::allocator< gen_op > >
    """
    return _pygamma.Hzgrad(*args)

def Props(*args):
    r"""
    Props(int NSS, gen_op Hs, double t, gen_op Us)
    Props(std::vector< gen_op,std::allocator< gen_op > > & Hs, double t) -> std::vector< gen_op,std::allocator< gen_op > >
    """
    return _pygamma.Props(*args)

def evolve(*args):
    r"""
    evolve(gen_op sigma, gen_op ham, double time) -> gen_op
    evolve(gen_op sigma, gen_op U) -> gen_op
    evolve(gen_op sigma0, std::vector< gen_op,std::allocator< gen_op > > & Hs, double t) -> std::vector< gen_op,std::allocator< gen_op > >
    evolve(gen_op sigma0, std::vector< gen_op,std::allocator< gen_op > > & Us) -> std::vector< gen_op,std::allocator< gen_op > >
    evolve(gen_op sigma0, std::vector< gen_op,std::allocator< gen_op > > & Hs, RBasic R, double t) -> std::vector< gen_op,std::allocator< gen_op > >
    evolve(std::vector< gen_op,std::allocator< gen_op > > & sigmas0, gen_op H, double t) -> std::vector< gen_op,std::allocator< gen_op > >
    evolve(std::vector< gen_op,std::allocator< gen_op > > & sigmas0, gen_op U) -> std::vector< gen_op,std::allocator< gen_op > >
    evolve(std::vector< gen_op,std::allocator< gen_op > > & sigma0, std::vector< gen_op,std::allocator< gen_op > > & H, double t) -> std::vector< gen_op,std::allocator< gen_op > >
    evolve(std::vector< gen_op,std::allocator< gen_op > > & sigma0, std::vector< gen_op,std::allocator< gen_op > > & U) -> std::vector< gen_op,std::allocator< gen_op > >
    evolve(std::vector< gen_op,std::allocator< gen_op > > & sigma0, std::vector< gen_op,std::allocator< gen_op > > & Hs, RBasic R, double t) -> std::vector< gen_op,std::allocator< gen_op > >
    """
    return _pygamma.evolve(*args)

def Ixpulse_Us(sys, I, angle):
    r"""Ixpulse_Us(sys_gradz sys, std::string const & I, double angle) -> std::vector< gen_op,std::allocator< gen_op > >"""
    return _pygamma.Ixpulse_Us(sys, I, angle)

def Iypulse_Us(sys, I, angle):
    r"""Iypulse_Us(sys_gradz sys, std::string const & I, double angle) -> std::vector< gen_op,std::allocator< gen_op > >"""
    return _pygamma.Iypulse_Us(sys, I, angle)

def Sxpuls_U(*args):
    r"""
    Sxpuls_U(spin_sys sys, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double theta=90.0) -> gen_op
    Sxpuls_U(sys_gradz sys, std::vector< gen_op,std::allocator< gen_op > > & Hs, std::string const & I, double offset, double tp, double angle) -> std::vector< gen_op,std::allocator< gen_op > >
    """
    return _pygamma.Sxpuls_U(*args)

def Sypuls_U(*args):
    r"""
    Sypuls_U(spin_sys sys, gen_op H, std::string const & iso, double freq=0.0, double tp=1.e-5, double theta=90.0) -> gen_op
    Sypuls_U(sys_gradz sys, std::vector< gen_op,std::allocator< gen_op > > & Hs, std::string const & I, double offset, double tp, double angle) -> std::vector< gen_op,std::allocator< gen_op > >
    """
    return _pygamma.Sypuls_U(*args)

def Gxpulse_U(sys, Hs, I, tp, angle, N, cutoff):
    r"""Gxpulse_U(sys_gradz sys, std::vector< gen_op,std::allocator< gen_op > > & Hs, std::string const & I, double tp, double angle, int N, double cutoff) -> std::vector< gen_op,std::allocator< gen_op > >"""
    return _pygamma.Gxpulse_U(sys, Hs, I, tp, angle, N, cutoff)

def Gypulse_U(sys, Hs, I, tp, angle, N, cutoff):
    r"""Gypulse_U(sys_gradz sys, std::vector< gen_op,std::allocator< gen_op > > & Hs, std::string const & I, double tp, double angle, int N, double cutoff) -> std::vector< gen_op,std::allocator< gen_op > >"""
    return _pygamma.Gypulse_U(sys, Hs, I, tp, angle, N, cutoff)

def SincPulseXUs(sys, Hs, I, tp, angle, N, NN):
    r"""SincPulseXUs(sys_gradz sys, std::vector< gen_op,std::allocator< gen_op > > & Hs, std::string const & I, double tp, double angle, int N, int NN) -> std::vector< gen_op,std::allocator< gen_op > >"""
    return _pygamma.SincPulseXUs(sys, Hs, I, tp, angle, N, NN)

def SincPulseYUs(sys, Hs, I, tp, angle, N, NN):
    r"""SincPulseYUs(sys_gradz sys, std::vector< gen_op,std::allocator< gen_op > > & Hs, std::string const & I, double tp, double angle, int N, int NN) -> std::vector< gen_op,std::allocator< gen_op > >"""
    return _pygamma.SincPulseYUs(sys, Hs, I, tp, angle, N, NN)
class sys_gradz(spin_system):
    r"""Proxy of C++ sys_gradz class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(sys_gradz self, int spins=0) -> sys_gradz
        __init__(sys_gradz self, sys_gradz sys) -> sys_gradz
        """
        if self.__class__ == sys_gradz:
            _self = None
        else:
            _self = self
        _pygamma.sys_gradz_swiginit(self, _pygamma.new_sys_gradz(_self, *args))
    __swig_destroy__ = _pygamma.delete_sys_gradz

    def NSS(self, *args):
        r"""
        NSS(sys_gradz self, int nss)
        NSS(sys_gradz self) -> int
        """
        return _pygamma.sys_gradz_NSS(self, *args)

    def BoGrad(self, *args):
        r"""
        BoGrad(sys_gradz self, double bgrad)
        BoGrad(sys_gradz self) -> double
        """
        return _pygamma.sys_gradz_BoGrad(self, *args)

    def GradVal(self, dist):
        r"""GradVal(sys_gradz self, double dist) -> double"""
        return _pygamma.sys_gradz_GradVal(self, dist)

    def SysLen(self, *args):
        r"""
        SysLen(sys_gradz self, double len)
        SysLen(sys_gradz self) -> double
        """
        return _pygamma.sys_gradz_SysLen(self, *args)

    def SysDist(self, nss):
        r"""SysDist(sys_gradz self, int nss) -> double"""
        return _pygamma.sys_gradz_SysDist(self, nss)

    def SubSys(self, nss):
        r"""SubSys(sys_gradz self, int nss) -> spin_system"""
        return _pygamma.sys_gradz_SubSys(self, nss)

    def SubSysShift(self, *args):
        r"""
        SubSysShift(sys_gradz self, int nss, int spin) -> double
        SubSysShift(sys_gradz self, double dist, int spin) -> double
        """
        return _pygamma.sys_gradz_SubSysShift(self, *args)

    def SubSysPPM(self, *args):
        r"""
        SubSysPPM(sys_gradz self, int nss, int spin) -> double
        SubSysPPM(sys_gradz self, double dist, int spin) -> double
        """
        return _pygamma.sys_gradz_SubSysPPM(self, *args)

    def PSetAdd(self, pset, idx=-1):
        r"""PSetAdd(sys_gradz self, ParameterSet pset, int idx=-1)"""
        return _pygamma.sys_gradz_PSetAdd(self, pset, idx)

    def setSubSys(self, pset):
        r"""setSubSys(sys_gradz self, ParameterSet pset)"""
        return _pygamma.sys_gradz_setSubSys(self, pset)

    def setBoGrad(self, pset):
        r"""setBoGrad(sys_gradz self, ParameterSet pset)"""
        return _pygamma.sys_gradz_setBoGrad(self, pset)

    def setLength(self, pset):
        r"""setLength(sys_gradz self, ParameterSet pset)"""
        return _pygamma.sys_gradz_setLength(self, pset)

    def __assign__(self, *args):
        r"""
        __assign__(sys_gradz self, sys_gradz sys) -> sys_gradz
        __assign__(sys_gradz self, ParameterSet pset)
        """
        return _pygamma.sys_gradz___assign__(self, *args)

    def write(self, *args):
        r"""
        write(sys_gradz self, std::string const & filename, int idx=-1, int warn=2) -> int
        write(sys_gradz self, std::ofstream & ofstr, int idx=-1, int warn=2) -> int
        """
        return _pygamma.sys_gradz_write(self, *args)

    def read(self, *args):
        r"""
        read(sys_gradz self, std::string const & filename, int idx=-1, int warn=2) -> int
        read(sys_gradz self, ParameterSet pset, int idx=-1, int warn=2) -> int
        """
        return _pygamma.sys_gradz_read(self, *args)

    def ask_read(self, *args):
        r"""
        ask_read(sys_gradz self, int argc, char *[] argv, int argn) -> std::string
        ask_read(sys_gradz self, int argc, char *[] argv, int argn, std::string const & _def) -> std::string
        """
        return _pygamma.sys_gradz_ask_read(self, *args)
    def __disown__(self):
        self.this.disown()
        _pygamma.disown_sys_gradz(self)
        return weakref.proxy(self)

# Register sys_gradz in _pygamma:
_pygamma.sys_gradz_swigregister(sys_gradz)


def RCCrf(*args):
    r"""
    RCCrf(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, double * taus, double chi, int type=0, int level=4)
    RCCrf(sys_dynamic sys, gen_op Heff, double Wrf, int type=0, int level=4) -> super_op
    """
    return _pygamma.RCCrf(*args)

def RCCds(*args):
    r"""
    RCCds(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int type=0, int level=4)
    RCCds(sys_dynamic sys, gen_op Ho, int type=0, int level=4) -> super_op
    """
    return _pygamma.RCCds(*args)

def RCCrfds(*args):
    r"""
    RCCrfds(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, double * taus, double chi, int type=0, int level=4)
    RCCrfds(sys_dynamic sys, gen_op Heff, double Wrf, int type=0, int level=4) -> super_op
    """
    return _pygamma.RCCrfds(*args)

def R1_CC(*args):
    r"""
    R1_CC(sys_dynamic sys) -> row_vector
    R1_CC(sys_dynamic sys, int I) -> double
    """
    return _pygamma.R1_CC(*args)

def R1_CC_max(*args):
    r"""
    R1_CC_max(sys_dynamic sys, int i) -> double
    R1_CC_max(sys_dynamic sys, std::string const & Iso) -> double
    R1_CC_max(sys_dynamic sys) -> double
    """
    return _pygamma.R1_CC_max(*args)

def T1_CC(*args):
    r"""
    T1_CC(sys_dynamic sys) -> row_vector
    T1_CC(sys_dynamic sys, int I) -> double
    """
    return _pygamma.T1_CC(*args)

def T1_CC_max(*args):
    r"""
    T1_CC_max(sys_dynamic sys, int i) -> double
    T1_CC_max(sys_dynamic sys, std::string const & Iso) -> double
    T1_CC_max(sys_dynamic sys) -> double
    """
    return _pygamma.T1_CC_max(*args)

def R2_CC(*args):
    r"""
    R2_CC(sys_dynamic sys) -> row_vector
    R2_CC(sys_dynamic sys, int I) -> double
    """
    return _pygamma.R2_CC(*args)

def R2_CC_max(*args):
    r"""
    R2_CC_max(sys_dynamic sys, int i) -> double
    R2_CC_max(sys_dynamic sys, std::string const & Iso) -> double
    R2_CC_max(sys_dynamic sys) -> double
    """
    return _pygamma.R2_CC_max(*args)

def T2_CC(*args):
    r"""
    T2_CC(sys_dynamic sys) -> row_vector
    T2_CC(sys_dynamic sys, int I) -> double
    """
    return _pygamma.T2_CC(*args)

def T2_CC_max(*args):
    r"""
    T2_CC_max(sys_dynamic sys, int i) -> double
    T2_CC_max(sys_dynamic sys, std::string const & Iso) -> double
    T2_CC_max(sys_dynamic sys) -> double
    """
    return _pygamma.T2_CC_max(*args)

def LWhh_CC(*args):
    r"""
    LWhh_CC(sys_dynamic sys) -> row_vector
    LWhh_CC(sys_dynamic sys, int I) -> double
    """
    return _pygamma.LWhh_CC(*args)

def LWhh_CC_max(*args):
    r"""
    LWhh_CC_max(sys_dynamic sys, int i) -> double
    LWhh_CC_max(sys_dynamic sys, std::string const & Iso) -> double
    LWhh_CC_max(sys_dynamic sys) -> double
    """
    return _pygamma.LWhh_CC_max(*args)

def xiCSA(*args):
    r"""
    xiCSA(sys_dynamic dsys) -> matrix
    xiCSA(sys_dynamic dsys, int i) -> double
    xiCSA(spin_system sys, double * CSAs) -> matrix
    xiCSA(spin_system sys, int i, double csa) -> double
    """
    return _pygamma.xiCSA(*args)

def CSA(*args):
    r"""
    CSA(sys_dynamic dsys) -> row_vector
    CSA(sys_dynamic dsys, int i) -> double
    """
    return _pygamma.CSA(*args)

def RDCX(*args):
    r"""
    RDCX(sys_dynamic sys, gen_op Ho, int level=4) -> super_op
    RDCX(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int level=4)
    """
    return _pygamma.RDCX(*args)

def RDC(*args):
    r"""
    RDC(sys_dynamic sys, gen_op Ho, int level=4) -> super_op
    RDC(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int level=4)
    """
    return _pygamma.RDC(*args)

def RCD(*args):
    r"""
    RCD(sys_dynamic sys, gen_op Ho, int level=4) -> super_op
    RCD(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int level=4)
    """
    return _pygamma.RCD(*args)

def RCDrf(*args):
    r"""
    RCDrf(sys_dynamic sys, gen_op Heff, double Wrflab, int level=4) -> super_op
    RCDrf(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, double * taus, double chi, int level=4)
    """
    return _pygamma.RCDrf(*args)

def RDD_Jgen(sys, Ho, type=0, level=4):
    r"""RDD_Jgen(sys_dynamic sys, gen_op Ho, int type=0, int level=4) -> super_op"""
    return _pygamma.RDD_Jgen(sys, Ho, type, level)

def RDDrf(*args):
    r"""
    RDDrf(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double Wrflab, double * taus, double chi, int type=0, int level=4)
    RDDrf(sys_dynamic sys, gen_op Heff, double Wrf, int type=0, int level=4) -> super_op
    """
    return _pygamma.RDDrf(*args)

def RDDds(*args):
    r"""
    RDDds(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int type=0, int level=4)
    RDDds(sys_dynamic sys, gen_op Ho, int type=0, int level=4) -> super_op
    """
    return _pygamma.RDDds(*args)

def RDDrfds(*args):
    r"""
    RDDrfds(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, double * taus, double chi, int type=0, int level=4)
    RDDrfds(sys_dynamic sys, gen_op Heff, double Wrf, int type=0, int level=4) -> super_op
    """
    return _pygamma.RDDrfds(*args)

def xiD(*args):
    r"""
    xiD(sys_dynamic dsys, double cutoff=0.0) -> matrix
    xiD(sys_dynamic dsys, int i, int j) -> double
    xiD(spin_system sys, matrix dist, int angs=0, double cutoff=0.0) -> matrix
    xiD(double gi, double gj, double rij, int angs=0) -> double
    """
    return _pygamma.xiD(*args)

def DCC(*args):
    r"""
    DCC(sys_dynamic dsys) -> matrix
    DCC(sys_dynamic dsys, int i, int j) -> double
    DCC(double gi, double gj, double rij, int angs=0) -> double
    """
    return _pygamma.DCC(*args)

def R1_DD(*args):
    r"""
    R1_DD(sys_dynamic sys) -> row_vector
    R1_DD(sys_dynamic sys, int i) -> double
    R1_DD(sys_dynamic sys, int i, int j) -> double
    """
    return _pygamma.R1_DD(*args)

def R1_DD_max(*args):
    r"""
    R1_DD_max(sys_dynamic sys) -> double
    R1_DD_max(sys_dynamic sys, int i) -> double
    R1_DD_max(sys_dynamic sys, std::string const & Iso) -> double
    """
    return _pygamma.R1_DD_max(*args)

def T1_DD(*args):
    r"""
    T1_DD(sys_dynamic sys) -> row_vector
    T1_DD(sys_dynamic sys, int i) -> double
    T1_DD(sys_dynamic sys, int i, int j) -> double
    """
    return _pygamma.T1_DD(*args)

def T1_DD_max(*args):
    r"""
    T1_DD_max(sys_dynamic sys) -> double
    T1_DD_max(sys_dynamic sys, int i) -> double
    T1_DD_max(sys_dynamic sys, std::string const & Iso) -> double
    """
    return _pygamma.T1_DD_max(*args)

def R2_DD(*args):
    r"""
    R2_DD(sys_dynamic sys) -> row_vector
    R2_DD(sys_dynamic sys, int i) -> double
    R2_DD(sys_dynamic sys, int i, int j) -> double
    """
    return _pygamma.R2_DD(*args)

def R2_DD_max(*args):
    r"""
    R2_DD_max(sys_dynamic sys) -> double
    R2_DD_max(sys_dynamic sys, int i) -> double
    R2_DD_max(sys_dynamic sys, std::string const & Iso) -> double
    """
    return _pygamma.R2_DD_max(*args)

def T2_DD(*args):
    r"""
    T2_DD(sys_dynamic sys) -> row_vector
    T2_DD(sys_dynamic sys, int i) -> double
    T2_DD(sys_dynamic sys, int i, int j) -> double
    """
    return _pygamma.T2_DD(*args)

def T2_DD_max(*args):
    r"""
    T2_DD_max(sys_dynamic sys, int i) -> double
    T2_DD_max(sys_dynamic sys, std::string const & Iso) -> double
    T2_DD_max(sys_dynamic sys) -> double
    """
    return _pygamma.T2_DD_max(*args)

def LWhh_DD(*args):
    r"""
    LWhh_DD(sys_dynamic sys) -> row_vector
    LWhh_DD(sys_dynamic sys, int i) -> double
    LWhh_DD(sys_dynamic sys, int i, int j) -> double
    """
    return _pygamma.LWhh_DD(*args)

def LWhh_DD_max(*args):
    r"""
    LWhh_DD_max(sys_dynamic sys) -> double
    LWhh_DD_max(sys_dynamic sys, int i) -> double
    LWhh_DD_max(sys_dynamic sys, std::string const & Iso) -> double
    """
    return _pygamma.LWhh_DD_max(*args)

def NOE(sys, i, j, eta=0):
    r"""NOE(sys_dynamic sys, int i, int j, double eta=0) -> double"""
    return _pygamma.NOE(sys, i, j, eta)

def R2_DDMQT(*args):
    r"""
    R2_DDMQT(sys_dynamic sys, int MQC) -> row_vector
    R2_DDMQT(sys_dynamic sys, int MQC, int i) -> double
    R2_DDMQT(sys_dynamic sys, int MQC, int i, int j) -> double
    """
    return _pygamma.R2_DDMQT(*args)

def Rex(*args):
    r"""
    Rex(sys_dynamic sys) -> super_op
    Rex(sys_dynamic sys, gen_op Op) -> super_op
    """
    return _pygamma.Rex(*args)

def J_error(i):
    r"""J_error(int i)"""
    return _pygamma.J_error(i)

def J_fatality(error):
    r"""J_fatality(int error) -> void volatile"""
    return _pygamma.J_fatality(error)

def J_gen(*args):
    r"""
    J_gen(double tau, double omega, int hertz=0) -> double
    J_gen(double tau, double * w, int hs, int hertz=0) -> matrix
    """
    return _pygamma.J_gen(*args)

def J_gen_shft(tau, w, shift, hs, hertz=0):
    r"""J_gen_shft(double tau, double * w, double shift, int hs, int hertz=0) -> matrix"""
    return _pygamma.J_gen_shft(tau, w, shift, hs, hertz)

def tausD(*args):
    r"""
    tausD(double * tau, double Dx, double Dy, double Dz)
    tausD(double * tau, coord Ds)
    """
    return _pygamma.tausD(*args)

def chiD(*args):
    r"""
    chiD(double Dx, double Dy, double Dz) -> double
    chiD(coord Ds) -> double
    """
    return _pygamma.chiD(*args)

def taust(*args):
    r"""
    taust(double * tau, double taux, double tauy, double tauz)
    taust(double * tau, coord taus)
    """
    return _pygamma.taust(*args)

def chit(*args):
    r"""
    chit(double taux, double tauy, double tauz) -> double
    chit(coord taus) -> double
    """
    return _pygamma.chit(*args)

def Jcoeffs(*args):
    r"""
    Jcoeffs(double * c, double alpha, double beta, double gamma, double chi=0, double eta=0)
    Jcoeffs(double * c, coord EA, double chi=0, double eta=0)
    """
    return _pygamma.Jcoeffs(*args)

def J_red_shft(*args):
    r"""
    J_red_shft(double * w, double shift, int size, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    J_red_shft(row_vector w, double shift, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    """
    return _pygamma.J_red_shft(*args)

def J_reduced(*args):
    r"""
    J_reduced(double * tau, double * c1, double * c2, double omega, int hertz=0) -> double
    J_reduced(gen_op Op, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    J_reduced(double * w, int size, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    J_reduced(row_vector w, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    J_reduced(coord taus, coord EA1, double eta1, coord EA2, double eta2, double omega, int hertz=0) -> double
    J_reduced(coord taus, space_T T1, space_T T2, double omega, int hertz=0) -> double
    """
    return _pygamma.J_reduced(*args)

def Q_red_shft(*args):
    r"""
    Q_red_shft(double * w, double shift, int size, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    Q_red_shft(row_vector w, double shift, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    """
    return _pygamma.Q_red_shft(*args)

def Q_reduced(*args):
    r"""
    Q_reduced(double * tau, double * c1, double * c2, double omega, int hertz=0) -> double
    Q_reduced(gen_op Op, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    Q_reduced(double * w, int size, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    Q_reduced(row_vector w, double * tau, double * c1, double * c2, int hertz=0) -> matrix
    Q_reduced(coord taus, coord EA1, double eta1, coord EA2, double eta2, double omega, int hertz=0) -> double
    Q_reduced(coord taus, space_T T1, space_T T2, double omega, int hertz=0) -> double
    """
    return _pygamma.Q_reduced(*args)

def J_LZ_iso(S, tauM, taue, omega):
    r"""J_LZ_iso(double S, double tauM, double taue, double omega) -> double"""
    return _pygamma.J_LZ_iso(S, tauM, taue, omega)

def J_LZ_aniso(S, A, tau1, tau2, taue, omega):
    r"""J_LZ_aniso(double S, double A, double tau1, double tau2, double taue, double omega) -> double"""
    return _pygamma.J_LZ_aniso(S, A, tau1, tau2, taue, omega)

def RQCX(*args):
    r"""
    RQCX(sys_dynamic sys, gen_op Ho, int level=4) -> super_op
    RQCX(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int level=4)
    """
    return _pygamma.RQCX(*args)

def RCQrf(*args):
    r"""
    RCQrf(sys_dynamic sys, gen_op Heff, double Wrflab, int level=4) -> super_op
    RCQrf(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, double * taus, double chi, int level=4)
    """
    return _pygamma.RCQrf(*args)

def RQQrf(*args):
    r"""
    RQQrf(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, double * taus, double chi, int type=0, int level=4)
    RQQrf(sys_dynamic sys, gen_op Heff, double Wrf, int type=0, int level=4) -> super_op
    """
    return _pygamma.RQQrf(*args)

def RQQds(*args):
    r"""
    RQQds(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int type=0, int level=4)
    RQQds(sys_dynamic sys, gen_op Ho, int type=0, int level=4) -> super_op
    """
    return _pygamma.RQQds(*args)

def RQQrfds(sys, Heff, Wrf, type=0, level=4):
    r"""RQQrfds(sys_dynamic sys, gen_op Heff, double Wrf, int type=0, int level=4) -> super_op"""
    return _pygamma.RQQrfds(sys, Heff, Wrf, type, level)

def R1_QQ(*args):
    r"""
    R1_QQ(sys_dynamic sys) -> row_vector
    R1_QQ(sys_dynamic sys, int i) -> double
    """
    return _pygamma.R1_QQ(*args)

def R1_QQ_max(*args):
    r"""
    R1_QQ_max(sys_dynamic sys, int i) -> double
    R1_QQ_max(sys_dynamic sys, std::string const & Iso) -> double
    R1_QQ_max(sys_dynamic sys) -> double
    """
    return _pygamma.R1_QQ_max(*args)

def T1_QQ(*args):
    r"""
    T1_QQ(sys_dynamic sys) -> row_vector
    T1_QQ(sys_dynamic sys, int i) -> double
    """
    return _pygamma.T1_QQ(*args)

def T1_QQ_max(*args):
    r"""
    T1_QQ_max(sys_dynamic sys, int i) -> double
    T1_QQ_max(sys_dynamic sys, std::string const & Iso) -> double
    T1_QQ_max(sys_dynamic sys) -> double
    """
    return _pygamma.T1_QQ_max(*args)

def R2_QQ(*args):
    r"""
    R2_QQ(sys_dynamic sys) -> row_vector
    R2_QQ(sys_dynamic sys, int i) -> double
    """
    return _pygamma.R2_QQ(*args)

def R2_QQ_max(*args):
    r"""
    R2_QQ_max(sys_dynamic sys, int i) -> double
    R2_QQ_max(sys_dynamic sys, std::string const & Iso) -> double
    """
    return _pygamma.R2_QQ_max(*args)

def T2_QQ(*args):
    r"""
    T2_QQ(sys_dynamic sys) -> row_vector
    T2_QQ(sys_dynamic sys, int i) -> double
    """
    return _pygamma.T2_QQ(*args)

def T2_QQ_max(*args):
    r"""
    T2_QQ_max(sys_dynamic sys, int i) -> double
    T2_QQ_max(sys_dynamic sys, std::string const & Iso) -> double
    T2_QQ_max(sys_dynamic sys) -> double
    """
    return _pygamma.T2_QQ_max(*args)

def LWhh_QQ(*args):
    r"""
    LWhh_QQ(sys_dynamic sys) -> row_vector
    LWhh_QQ(sys_dynamic sys, int i) -> double
    """
    return _pygamma.LWhh_QQ(*args)

def LWhh_QQ_max(*args):
    r"""
    LWhh_QQ_max(sys_dynamic sys, int i) -> double
    LWhh_QQ_max(sys_dynamic sys, std::string const & Iso) -> double
    LWhh_QQ_max(sys_dynamic sys) -> double
    """
    return _pygamma.LWhh_QQ_max(*args)

def xiQ(*args):
    r"""
    xiQ(sys_dynamic sys) -> matrix
    xiQ(sys_dynamic sys, int i) -> double
    """
    return _pygamma.xiQ(*args)

def RRRx(*args):
    r"""
    RRRx(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double tau, int type=0, int level=4)
    RRRx(sys_dynamic sys, gen_op Ho, int type=0, int level=4) -> super_op
    """
    return _pygamma.RRRx(*args)

def RRR(*args):
    r"""
    RRR(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int type=0, int level=4)
    RRR(sys_dynamic sys, gen_op Ho, int type=0, int level=4) -> super_op
    """
    return _pygamma.RRR(*args)

def Rij_rdm(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rij_rdm(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rij_rdm(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rmumu_rdm(LOp, T1s, T2s, w, hs, taus, c1s, c2s, xi1xi2, w0, w1, w2, level=4, autoc=0):
    r"""Rmumu_rdm(super_op LOp, gen_op T1s, gen_op T2s, double * w, int hs, double * taus, double * c1s, double * c2s, double xi1xi2, double w0, double w1, double w2, int level=4, int autoc=0)"""
    return _pygamma.Rmumu_rdm(LOp, T1s, T2s, w, hs, taus, c1s, c2s, xi1xi2, w0, w1, w2, level, autoc)

def R1_RR(*args):
    r"""
    R1_RR(sys_dynamic sys) -> row_vector
    R1_RR(sys_dynamic sys, int i) -> double
    """
    return _pygamma.R1_RR(*args)

def R1_RR_max(sys):
    r"""R1_RR_max(sys_dynamic sys) -> double"""
    return _pygamma.R1_RR_max(sys)

def T1_RR(*args):
    r"""
    T1_RR(sys_dynamic sys) -> row_vector
    T1_RR(sys_dynamic sys, int i) -> double
    """
    return _pygamma.T1_RR(*args)

def T1_RR_max(sys):
    r"""T1_RR_max(sys_dynamic sys) -> double"""
    return _pygamma.T1_RR_max(sys)

def R2_RR(*args):
    r"""
    R2_RR(sys_dynamic sys) -> row_vector
    R2_RR(sys_dynamic sys, int i) -> double
    """
    return _pygamma.R2_RR(*args)

def R2_RR_max(sys):
    r"""R2_RR_max(sys_dynamic sys) -> double"""
    return _pygamma.R2_RR_max(sys)

def T2_RR(*args):
    r"""
    T2_RR(sys_dynamic sys) -> row_vector
    T2_RR(sys_dynamic sys, int i) -> double
    """
    return _pygamma.T2_RR(*args)

def T2_RR_max(sys):
    r"""T2_RR_max(sys_dynamic sys) -> double"""
    return _pygamma.T2_RR_max(sys)

def LWhh_RR(*args):
    r"""
    LWhh_RR(sys_dynamic sys) -> row_vector
    LWhh_RR(sys_dynamic sys, int i) -> double
    """
    return _pygamma.LWhh_RR(*args)

def LWhh_RR_max(*args):
    r"""
    LWhh_RR_max(sys_dynamic sys, int i) -> double
    LWhh_RR_max(sys_dynamic sys, std::string const & Iso) -> double
    LWhh_RR_max(sys_dynamic sys) -> double
    """
    return _pygamma.LWhh_RR_max(*args)

def xiRDM(*args):
    r"""
    xiRDM(sys_dynamic dsys) -> matrix
    xiRDM(sys_dynamic dsys, int i) -> double
    """
    return _pygamma.xiRDM(*args)

def RlxNMRerror(eidx, noret=0):
    r"""RlxNMRerror(int eidx, int noret=0)"""
    return _pygamma.RlxNMRerror(eidx, noret)

def RlxNMRfatal(eidx):
    r"""RlxNMRfatal(int eidx) -> void volatile"""
    return _pygamma.RlxNMRfatal(eidx)

def R_4(*args):
    r"""
    R_4(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12)
    R_4(int hs, gen_op T1s, gen_op T2s, matrix J12, int rank, int a, int b, int aa, int bb) -> double
    """
    return _pygamma.R_4(*args)

def R_3(LOp, w, rank, T1s, T2s, J12, cutoff=1.e-2):
    r"""R_3(super_op LOp, double * w, int rank, gen_op T1s, gen_op T2s, matrix J12, double cutoff=1.e-2)"""
    return _pygamma.R_3(LOp, w, rank, T1s, T2s, J12, cutoff)

def R_2(*args):
    r"""
    R_2(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12)
    R_2(int hs, gen_op T1s, gen_op T2s, matrix J12, int rank, int a, int b, int aa, int bb) -> double
    """
    return _pygamma.R_2(*args)

def Rodiag_2(hs, T1s, T2s, J12, rank, a, b):
    r"""Rodiag_2(int hs, gen_op T1s, gen_op T2s, matrix J12, int rank, int a, int b) -> double"""
    return _pygamma.Rodiag_2(hs, T1s, T2s, J12, rank, a, b)

def Rdiag_2(hs, T1s, T2s, J12, rank, a, aa):
    r"""Rdiag_2(int hs, gen_op T1s, gen_op T2s, matrix J12, int rank, int a, int aa) -> double"""
    return _pygamma.Rdiag_2(hs, T1s, T2s, J12, rank, a, aa)

def R_0(*args):
    r"""
    R_0(super_op LOp, int rank, gen_op T1s, gen_op T2s, complex J12)
    R_0(int hs, gen_op T1s, gen_op T2s, int rank, int a, int b, int aa, int bb) -> double
    """
    return _pygamma.R_0(*args)

def R_4s(LOp, rank, T1s, T2s, J12):
    r"""R_4s(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12)"""
    return _pygamma.R_4s(LOp, rank, T1s, T2s, J12)

def R_3s(LOp, w, rank, T1s, T2s, J12):
    r"""R_3s(super_op LOp, double * w, int rank, gen_op T1s, gen_op T2s, matrix J12)"""
    return _pygamma.R_3s(LOp, w, rank, T1s, T2s, J12)

def R_2s(LOp, rank, T1s, T2s, J12):
    r"""R_2s(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12)"""
    return _pygamma.R_2s(LOp, rank, T1s, T2s, J12)

def R_AC_0(*args):
    r"""
    R_AC_0(spin_T T) -> super_op
    R_AC_0(spin_T T, super_op LOp1, gen_op Op, double xisq=1)
    R_AC_0(gen_op Ts, super_op LOp, int rank=2, double xisq=1)
    """
    return _pygamma.R_AC_0(*args)

def R_CC_0(*args):
    r"""
    R_CC_0(spin_T T1, spin_T T2, super_op LOp1, gen_op Op, double xisq=1)
    R_CC_0(gen_op T1s, gen_op T2s, super_op LOp1, int rank=2, double xisq=1)
    """
    return _pygamma.R_CC_0(*args)

def R_CC_0_trans(T1s, T2s, LOp1, rank=2, xisq=1):
    r"""R_CC_0_trans(gen_op T1s, gen_op T2s, super_op LOp1, int rank=2, double xisq=1)"""
    return _pygamma.R_CC_0_trans(T1s, T2s, LOp1, rank, xisq)

def R_AC_1(*args):
    r"""
    R_AC_1(spin_T T, super_op LOp1, gen_op Op, double J0, double J1, double J2)
    R_AC_1(gen_op Ts, super_op LOp1, int rank, double J0, double J1, double J2)
    """
    return _pygamma.R_AC_1(*args)

def R_CC_1(*args):
    r"""
    R_CC_1(spin_T T1, spin_T T2, super_op LOp1, gen_op Op, double J0, double J1, double J2)
    R_CC_1(gen_op T1s, gen_op T2s, super_op LOp1, int rank, double J0, double J1, double J2)
    """
    return _pygamma.R_CC_1(*args)

def Rmumu(*args):
    r"""
    Rmumu(super_op LOp, gen_op T1s, gen_op T2s, double * w, int hs, double * taus, double * c1s, double * c2s, double xi1xi2, double w0, double w1, double w2, int l, int level=4, int autoc=0, int het=0)
    Rmumu(super_op LOp, gen_op T1s, gen_op T2s, double * w, int hs, double tau, double xi1xi2, double w0, double w1, double w2, int l, int level=4, int autoc=0)
    """
    return _pygamma.Rmumu(*args)

def Rmu1mu2(LOp, sys, Ho, w, xi1s, n1, xi2s, n2, A1, A2, T1, T2, taus, chi, l, type=0, level=4):
    r"""Rmu1mu2(super_op LOp, spin_system sys, gen_op Ho, double * w, double * xi1s, double n1, double * xi2s, double n2, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int l, int type=0, int level=4)"""
    return _pygamma.Rmu1mu2(LOp, sys, Ho, w, xi1s, n1, xi2s, n2, A1, A2, T1, T2, taus, chi, l, type, level)

def Rijkl(*args):
    r"""
    Rijkl(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)
    Rijkl(super_op LOp, spin_system sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, spin_T T1, spin_T T2, double tau, int type=0, int level=4)
    """
    return _pygamma.Rijkl(*args)

def Rij(*args):
    r"""
    Rij(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)
    Rij(super_op LOp, spin_system sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, spin_T T1, spin_T T2, double tau, int l, int type=0, int level=4)
    """
    return _pygamma.Rij(*args)

def Rijk(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rijk(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rijk(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rkij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rkij(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rkij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rmumuds(LOp, T1s, T2s, w, hs, taus, c1s, c2s, xi1xi2, w0, w1, w2, level=4, autoc=0, het=0):
    r"""Rmumuds(super_op LOp, gen_op T1s, gen_op T2s, double * w, int hs, double * taus, double * c1s, double * c2s, double xi1xi2, double w0, double w1, double w2, int level=4, int autoc=0, int het=0)"""
    return _pygamma.Rmumuds(LOp, T1s, T2s, w, hs, taus, c1s, c2s, xi1xi2, w0, w1, w2, level, autoc, het)

def Rijklds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rijklds(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rijklds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rijds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rijds(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rijds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rijkds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rijkds(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rijkds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rkijds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rkijds(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rkijds(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def LOp_sigma(sigma):
    r"""LOp_sigma(gen_op sigma) -> super_op"""
    return _pygamma.LOp_sigma(sigma)

def Rrf_4(*args):
    r"""
    Rrf_4(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12)
    Rrf_4(int hs, gen_op T1s, gen_op T2s, matrix J12, int rank, int a, int b, int aa, int bb) -> complex
    """
    return _pygamma.Rrf_4(*args)

def Rrf_3(LOp, w, rank, T1s, T2s, J12, cutoff=1.e-2):
    r"""Rrf_3(super_op LOp, double * w, int rank, gen_op T1s, gen_op T2s, matrix J12, double cutoff=1.e-2)"""
    return _pygamma.Rrf_3(LOp, w, rank, T1s, T2s, J12, cutoff)

def Rrf_2(*args):
    r"""
    Rrf_2(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12)
    Rrf_2(int hs, gen_op T1s, gen_op T2s, matrix J12, int rank, int a, int b, int aa, int bb) -> double
    """
    return _pygamma.Rrf_2(*args)

def Rrf_0(*args):
    r"""
    Rrf_0(super_op LOp, int rank, gen_op T1s, gen_op T2s, complex J12)
    Rrf_0(int hs, gen_op T1s, gen_op T2s, int rank, int a, int b, int aa, int bb) -> double
    """
    return _pygamma.Rrf_0(*args)

def Rrf_4s(LOp, rank, T1s, T2s, J12):
    r"""Rrf_4s(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12)"""
    return _pygamma.Rrf_4s(LOp, rank, T1s, T2s, J12)

def Rrf_3s(LOp, w, rank, T1s, T2s, J12):
    r"""Rrf_3s(super_op LOp, double * w, int rank, gen_op T1s, gen_op T2s, matrix J12)"""
    return _pygamma.Rrf_3s(LOp, w, rank, T1s, T2s, J12)

def Rrf_2s(LOp, rank, T1s, T2s, J12):
    r"""Rrf_2s(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12)"""
    return _pygamma.Rrf_2s(LOp, rank, T1s, T2s, J12)

def Rrfmumu(LOp, T1s, T2s, J12, J, w, rank=2, level=4, autoc=0, het=0):
    r"""Rrfmumu(super_op LOp, gen_op T1s, gen_op T2s, matrix J12, double * J, double * w, int rank=2, int level=4, int autoc=0, int het=0)"""
    return _pygamma.Rrfmumu(LOp, T1s, T2s, J12, J, w, rank, level, autoc, het)

def Rrfijkl(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rrfijkl(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rrfijkl(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rrfij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rrfij(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rrfij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rrfijk(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rrfijk(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rrfijk(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rrfkij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rrfkij(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rrfkij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rrfijklds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rrfijklds(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rrfijklds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rrfijds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type=0, level=4):
    r"""Rrfijds(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type=0, int level=4)"""
    return _pygamma.Rrfijds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rrfijkds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level):
    r"""Rrfijkds(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level)"""
    return _pygamma.Rrfijkds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def Rrfkijds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level):
    r"""Rrfkijds(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level)"""
    return _pygamma.Rrfkijds(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level)

def sigma_ss(sys, L, R):
    r"""sigma_ss(spin_system sys, super_op L, super_op R) -> gen_op"""
    return _pygamma.sigma_ss(sys, L, R)

def sigma_ss_it(sys, L, Heff, R):
    r"""sigma_ss_it(spin_system sys, super_op L, super_op Heff, super_op R) -> gen_op"""
    return _pygamma.sigma_ss_it(sys, L, Heff, R)

def REXijkl(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    r"""REXijkl(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level, int DFS=0)"""
    return _pygamma.REXijkl(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)

def REXijk(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    r"""REXijk(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level, int DFS=0)"""
    return _pygamma.REXijk(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)

def REXkij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    r"""REXkij(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level, int DFS=0)"""
    return _pygamma.REXkij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)

def REXij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    r"""REXij(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level, int DFS=0)"""
    return _pygamma.REXij(LOp, sys, Ho, w, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)

def REXmumu(*args):
    r"""
    REXmumu(super_op LOp, gen_op T1s, gen_op T2s, double * w, int hs, double * taus, double * c1s, double * c2s, double xi1xi2, double w0, double w1, double w2, int l, int level, int autoc, int DFS=0, int het=0)
    REXmumu(super_op LOp, gen_op T1s, gen_op T2s, double * w, int hs, double * taus, double * c1s, double * c2s, double xi1xi2, double w0, double w1, double w2, int l, int level, int autoc, int DFS, int het, gen_op Fz11, double W11, gen_op Fz12, double W12, gen_op Fz21, double W21, gen_op Fz22, double W22)
    """
    return _pygamma.REXmumu(*args)

def REXrfijkl(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    r"""REXrfijkl(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level, int DFS=0)"""
    return _pygamma.REXrfijkl(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)

def REXrfijk(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    r"""REXrfijk(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level, int DFS=0)"""
    return _pygamma.REXrfijk(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)

def REXrfkij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    r"""REXrfkij(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level, int DFS=0)"""
    return _pygamma.REXrfkij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)

def REXrfij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS=0):
    r"""REXrfij(super_op LOp, sys_dynamic sys, gen_op Heff, double * w, double Wrflab, matrix xi1s, matrix xi2s, space_T A1, space_T A2, spin_T T1, spin_T T2, double * taus, double chi, int type, int level, int DFS=0)"""
    return _pygamma.REXrfij(LOp, sys, Heff, w, Wrflab, xi1s, xi2s, A1, A2, T1, T2, taus, chi, type, level, DFS)

def REXrfmumu(LOp, T1s, T2s, J12, J, w, rank, level, autoc, DFS=0, het=0):
    r"""REXrfmumu(super_op LOp, gen_op T1s, gen_op T2s, matrix J12, double * J, double * w, int rank, int level, int autoc, int DFS=0, int het=0)"""
    return _pygamma.REXrfmumu(LOp, T1s, T2s, J12, J, w, rank, level, autoc, DFS, het)

def REX_4(*args):
    r"""
    REX_4(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12)
    REX_4(int hs, gen_op T1s, gen_op T2s, matrix J12, int rank, int a, int b, int aa, int bb) -> complex
    REX_4(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12, gen_op Fz11, double W11, gen_op Fz12, double W12, gen_op Fz21, double W21, gen_op Fz22, double W22)
    REX_4(int hs, gen_op T1s, gen_op T2s, matrix J12, int rank, int a, int b, int aa, int bb, gen_op Fz1, double W1, gen_op Fz2, double W2) -> complex
    """
    return _pygamma.REX_4(*args)

def REX_3(LOp, w, rank, T1s, T2s, J12, cutoff=1.e-2):
    r"""REX_3(super_op LOp, double * w, int rank, gen_op T1s, gen_op T2s, matrix J12, double cutoff=1.e-2)"""
    return _pygamma.REX_3(LOp, w, rank, T1s, T2s, J12, cutoff)

def REXrf_4(*args):
    r"""
    REXrf_4(super_op LOp, int rank, gen_op T1s, gen_op T2s, matrix J12a)
    REXrf_4(int hs, gen_op T1s, gen_op T2s, matrix J12, int rank, int a, int b, int aa, int bb) -> complex
    """
    return _pygamma.REXrf_4(*args)

def REXrf_3(LOp, w, rank, T1s, T2s, J12, cutoff=1.e-6):
    r"""REXrf_3(super_op LOp, double * w, int rank, gen_op T1s, gen_op T2s, matrix J12, double cutoff=1.e-6)"""
    return _pygamma.REXrf_3(LOp, w, rank, T1s, T2s, J12, cutoff)
class WBRExch(object):
    r"""Proxy of C++ WBRExch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(WBRExch self) -> WBRExch
        __init__(WBRExch self, WBRExch WBRE) -> WBRExch
        """
        _pygamma.WBRExch_swiginit(self, _pygamma.new_WBRExch(*args))
    __swig_destroy__ = _pygamma.delete_WBRExch

    def Level(self, *args):
        r"""
        Level(WBRExch self, int i)
        Level(WBRExch self) -> int
        """
        return _pygamma.WBRExch_Level(self, *args)

    def Type(self, *args):
        r"""
        Type(WBRExch self, int i)
        Type(WBRExch self) -> int
        """
        return _pygamma.WBRExch_Type(self, *args)

    def Dip(self, i=1):
        r"""Dip(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_Dip(self, i)

    def DipDFS(self, i=1):
        r"""DipDFS(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_DipDFS(self, i)

    def DipCSA(self, i=1):
        r"""DipCSA(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_DipCSA(self, i)

    def DipCSADFS(self, i=1):
        r"""DipCSADFS(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_DipCSADFS(self, i)

    def DipQuad(self, i=1):
        r"""DipQuad(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_DipQuad(self, i)

    def DipQuadDFS(self, i=1):
        r"""DipQuadDFS(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_DipQuadDFS(self, i)

    def CSA(self, i=1):
        r"""CSA(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_CSA(self, i)

    def CSADFS(self, i=1):
        r"""CSADFS(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_CSADFS(self, i)

    def CSADip(self, i=1):
        r"""CSADip(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_CSADip(self, i)

    def CSADipDFS(self, i=1):
        r"""CSADipDFS(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_CSADipDFS(self, i)

    def CSAQuad(self, i=1):
        r"""CSAQuad(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_CSAQuad(self, i)

    def CSAQuadDFS(self, i=1):
        r"""CSAQuadDFS(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_CSAQuadDFS(self, i)

    def Quad(self, i=1):
        r"""Quad(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_Quad(self, i)

    def QuadDFS(self, i=1):
        r"""QuadDFS(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_QuadDFS(self, i)

    def QuadDip(self, i=1):
        r"""QuadDip(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_QuadDip(self, i)

    def QuadDipDFSQuad(self, i=1):
        r"""QuadDipDFSQuad(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_QuadDipDFSQuad(self, i)

    def QuadCSA(self, i=1):
        r"""QuadCSA(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_QuadCSA(self, i)

    def QuadCSADFS(self, i=1):
        r"""QuadCSADFS(WBRExch self, int i=1)"""
        return _pygamma.WBRExch_QuadCSADFS(self, i)

    def LWhh(self, sys, Iso):
        r"""LWhh(WBRExch self, sys_dynamic sys, std::string const & Iso) -> double"""
        return _pygamma.WBRExch_LWhh(self, sys, Iso)

    def SetZero(self):
        r"""SetZero(WBRExch self)"""
        return _pygamma.WBRExch_SetZero(self)

    def SetLevel(self, pset):
        r"""SetLevel(WBRExch self, ParameterSet pset)"""
        return _pygamma.WBRExch_SetLevel(self, pset)

    def SetType(self, pset):
        r"""SetType(WBRExch self, ParameterSet pset)"""
        return _pygamma.WBRExch_SetType(self, pset)

    def SetDip(self, pset):
        r"""SetDip(WBRExch self, ParameterSet pset)"""
        return _pygamma.WBRExch_SetDip(self, pset)

    def SetSA(self, pset):
        r"""SetSA(WBRExch self, ParameterSet pset)"""
        return _pygamma.WBRExch_SetSA(self, pset)

    def SetQuad(self, pset):
        r"""SetQuad(WBRExch self, ParameterSet pset)"""
        return _pygamma.WBRExch_SetQuad(self, pset)

    def SetDCX(self, pset):
        r"""SetDCX(WBRExch self, ParameterSet pset)"""
        return _pygamma.WBRExch_SetDCX(self, pset)

    def SetDQX(self, pset):
        r"""SetDQX(WBRExch self, ParameterSet pset)"""
        return _pygamma.WBRExch_SetDQX(self, pset)

    def SetQCX(self, pset):
        r"""SetQCX(WBRExch self, ParameterSet pset)"""
        return _pygamma.WBRExch_SetQCX(self, pset)

    def __assign__(self, *args):
        r"""
        __assign__(WBRExch self, WBRExch WBRE) -> WBRExch
        __assign__(WBRExch self, ParameterSet pset) -> WBRExch
        """
        return _pygamma.WBRExch___assign__(self, *args)

    def prepQuad(self, sys, Xis, Ts, As):
        r"""prepQuad(WBRExch self, sys_dynamic sys, matrix Xis, spin_T Ts, space_T As)"""
        return _pygamma.WBRExch_prepQuad(self, sys, Xis, Ts, As)

    def read(self, *args):
        r"""
        read(WBRExch self, std::string const & filename)
        read(WBRExch self, std::string const & filename, sys_dynamic sys)
        """
        return _pygamma.WBRExch_read(self, *args)

    def ask_read(self, *args):
        r"""
        ask_read(WBRExch self, int argc, char *[] argv, int argn)
        ask_read(WBRExch self, int argc, char *[] argv, int argn, sys_dynamic sys)
        """
        return _pygamma.WBRExch_ask_read(self, *args)

    def ask(self, argc, argv, argn):
        r"""ask(WBRExch self, int argc, char *[] argv, int & argn)"""
        return _pygamma.WBRExch_ask(self, argc, argv, argn)

    def REX(self, sys, Ho, fext=0):
        r"""REX(WBRExch self, sys_dynamic sys, gen_op Ho, int fext=0) -> super_op"""
        return _pygamma.WBRExch_REX(self, sys, Ho, fext)

    def REXrf(self, sys, Heff, Wrf, fext=0):
        r"""REXrf(WBRExch self, sys_dynamic sys, gen_op Heff, double Wrf, int fext=0) -> super_op"""
        return _pygamma.WBRExch_REXrf(self, sys, Heff, Wrf, fext)

# Register WBRExch in _pygamma:
_pygamma.WBRExch_swigregister(WBRExch)


def RDDel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RDDel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RDDel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def RSSel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RSSel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RSSel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def RDSel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RDSel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RDSel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def RSDel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RSDel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RSDel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def RRRel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RRRel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RRRel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def RQQel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RQQel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RQQel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def RQSel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RQSel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RQSel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def RSQel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RSQel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RSQel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def RQDel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RQDel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RQDel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def RDQel(sys, Ho, T1, T2, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""RDQel(sys_dynamic sys, gen_op Ho, spin_T T1, spin_T T2, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.RDQel(sys, Ho, T1, T2, a, aa, b, bb, DFS, Windex, Sindex)

def Rijkl_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""Rijkl_el(sys_dynamic sys, gen_op Ho, int rank, spin_T T1, spin_T T2, std::string & Mlabel, std::string * line1, std::string * line2, std::string * line3, int * signs, int & Jterms, int & Lterms, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.Rijkl_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS, Windex, Sindex)

def Rij_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""Rij_el(sys_dynamic sys, gen_op Ho, int rank, spin_T T1, spin_T T2, std::string & Mlabel, std::string * line1, std::string * line2, std::string * line3, int * signs, int & Jterms, int & Lterms, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.Rij_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS, Windex, Sindex)

def Rijk_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""Rijk_el(sys_dynamic sys, gen_op Ho, int rank, spin_T T1, spin_T T2, std::string & Mlabel, std::string * line1, std::string * line2, std::string * line3, int * signs, int & Jterms, int & Lterms, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.Rijk_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS, Windex, Sindex)

def Rkij_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS=0, Windex=-1, Sindex=0):
    r"""Rkij_el(sys_dynamic sys, gen_op Ho, int rank, spin_T T1, spin_T T2, std::string & Mlabel, std::string * line1, std::string * line2, std::string * line3, int * signs, int & Jterms, int & Lterms, int a, int aa, int b, int bb, int DFS=0, int Windex=-1, int Sindex=0)"""
    return _pygamma.Rkij_el(sys, Ho, rank, T1, T2, Mlabel, line1, line2, line3, signs, Jterms, Lterms, a, aa, b, bb, DFS, Windex, Sindex)

def Rel_12(*args):
    r"""
    Rel_12(int hs, int rank, gen_op T1s, gen_op T2s, int & Jterms, complex strsJ, int * trnsJ, int & Lterms, complex strsL, int * trnsL, std::string * wlabs, int a, int aa, int b, int bb, double cutoff=1.e-4)
    Rel_12(int hs, int rank, gen_op T1s, gen_op T2s, int & nterms, complex strs, int * trns, int a, int aa, int b, int bb, double cutoff=1.e-4)
    """
    return _pygamma.Rel_12(*args)

def Rel_12_condense(*args):
    r"""
    Rel_12_condense(int hs, int ntermsi, int & nterms, complex strs, int * trns, int anti=0, double cutoff=1.e-4)
    Rel_12_condense(int hs, int ntermi, int & nterms, complex strs, int * trns, std::string * wlabs, int anti=0)
    """
    return _pygamma.Rel_12_condense(*args)

def Spin_labels(Lbls, sys, index=0):
    r"""Spin_labels(std::string * Lbls, spin_sys sys, int index=0)"""
    return _pygamma.Spin_labels(Lbls, sys, index)

def W_labels(Wlabels, sys, Op, index=-1):
    r"""W_labels(std::string * Wlabels, spin_sys sys, gen_op Op, int index=-1)"""
    return _pygamma.W_labels(Wlabels, sys, Op, index)

def Elem_labels(Lbls, R, M, S, a, aa, b, bb, la=0, laa=0, lb=0, lbb=0):
    r"""Elem_labels(std::string * Lbls, std::string & R, std::string & M, std::string & S, int a, int aa, int b, int bb, int la=0, int laa=0, int lb=0, int lbb=0)"""
    return _pygamma.Elem_labels(Lbls, R, M, S, a, aa, b, bb, la, laa, lb, lbb)

def Rel_clean(T1s, T2s, rank):
    r"""Rel_clean(gen_op T1s, gen_op T2s, int rank)"""
    return _pygamma.Rel_clean(T1s, T2s, rank)

def Rel(*args):
    r"""
    Rel(int ntermi, int & nterms, int npairs, complex strs, int * trns, std::string * wlabs, int * cont, std::string * spns, std::string * Jlbs, std::string & Mlabel, std::string * line1, std::string * line2, std::string * line3, int * signs)
    Rel(std::ostream & ostr, int nterms, std::string * line1, std::string * line2, std::string * line3, int * signs, std::string * Elabel, int add=0, int ncols=4)
    """
    return _pygamma.Rel(*args)

def sort(indx, mx, k, type=0, colf=0):
    r"""sort(int * indx, matrix mx, int k, int type=0, int colf=0)"""
    return _pygamma.sort(indx, mx, k, type, colf)
class ExchProc(object):
    r"""Proxy of C++ ExchProc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KRate = property(_pygamma.ExchProc_KRate_get, _pygamma.ExchProc_KRate_set, doc=r"""KRate : double""")
    LHSComps = property(_pygamma.ExchProc_LHSComps_get, _pygamma.ExchProc_LHSComps_set, doc=r"""LHSComps : std::vector<(int,std::allocator<(int)>)>""")
    RHSComps = property(_pygamma.ExchProc_RHSComps_get, _pygamma.ExchProc_RHSComps_set, doc=r"""RHSComps : std::vector<(int,std::allocator<(int)>)>""")
    SpinMaps = property(_pygamma.ExchProc_SpinMaps_get, _pygamma.ExchProc_SpinMaps_set, doc=r"""SpinMaps : std::vector<(SpinMap,std::allocator<(SpinMap)>)>""")

    def XPerror(self, *args):
        r"""
        XPerror(ExchProc self, int eidx, int noret=0)
        XPerror(ExchProc self, int eidx, std::string const & pname, int noret=0)
        """
        return _pygamma.ExchProc_XPerror(self, *args)

    def XPfatal(self, *args):
        r"""
        XPfatal(ExchProc self, int eidx) -> void volatile
        XPfatal(ExchProc self, int eidx, std::string const & pname) -> void volatile
        """
        return _pygamma.ExchProc_XPfatal(self, *args)

    def getExch(self, pset, idx, exch, warn=True):
        r"""getExch(ExchProc self, ParameterSet pset, int idx, std::string & exch, bool warn=True) -> bool"""
        return _pygamma.ExchProc_getExch(self, pset, idx, exch, warn)

    def parseExch(self, Exval, lhs, rhs, warn=True):
        r"""parseExch(ExchProc self, std::string & Exval, IntVector lhs, IntVector rhs, bool warn=True) -> bool"""
        return _pygamma.ExchProc_parseExch(self, Exval, lhs, rhs, warn)

    def getComps(self, pset, idx, lhs, rhs, warn=True):
        r"""getComps(ExchProc self, ParameterSet pset, int idx, IntVector lhs, IntVector rhs, bool warn=True) -> bool"""
        return _pygamma.ExchProc_getComps(self, pset, idx, lhs, rhs, warn)

    def getRate(self, pset, idx, rate, warn=True):
        r"""getRate(ExchProc self, ParameterSet pset, int idx, double & rate, bool warn=True) -> bool"""
        return _pygamma.ExchProc_getRate(self, pset, idx, rate, warn)

    def getMappings(self, pset, idx, smaps, warn=True):
        r"""getMappings(ExchProc self, ParameterSet pset, int idx, std::vector< SpinMap,std::allocator< SpinMap > > & smaps, bool warn=True) -> bool"""
        return _pygamma.ExchProc_getMappings(self, pset, idx, smaps, warn)

    def getXP(self, pset, rate, lhsc, rhsc, smaps, idx, warn=True):
        r"""getXP(ExchProc self, ParameterSet pset, double & rate, IntVector lhsc, IntVector rhsc, std::vector< SpinMap,std::allocator< SpinMap > > & smaps, int idx, bool warn=True) -> bool"""
        return _pygamma.ExchProc_getXP(self, pset, rate, lhsc, rhsc, smaps, idx, warn)

    def setXP(self, pset, idx, warn=True):
        r"""setXP(ExchProc self, ParameterSet pset, int idx, bool warn=True) -> bool"""
        return _pygamma.ExchProc_setXP(self, pset, idx, warn)

    def CheckLHS(self, comp, warn=True):
        r"""CheckLHS(ExchProc self, int comp, bool warn=True) -> bool"""
        return _pygamma.ExchProc_CheckLHS(self, comp, warn)

    def CheckRHS(self, comp, warn=True):
        r"""CheckRHS(ExchProc self, int comp, bool warn=True) -> bool"""
        return _pygamma.ExchProc_CheckRHS(self, comp, warn)

    def __assign__(self, pr):
        r"""__assign__(ExchProc self, ExchProc pr) -> ExchProc"""
        return _pygamma.ExchProc___assign__(self, pr)
    __swig_destroy__ = _pygamma.delete_ExchProc

    def __init__(self, *args):
        r"""
        __init__(ExchProc self) -> ExchProc
        __init__(ExchProc self, ExchProc proc) -> ExchProc
        __init__(ExchProc self, std::string const & PROC, double Kex=0, int maxcomp=20) -> ExchProc
        __init__(ExchProc self, ParameterSet pset, int ip=-1, int warn=2) -> ExchProc
        __init__(ExchProc self, int N_lhs, int N_rhs) -> ExchProc
        """
        _pygamma.ExchProc_swiginit(self, _pygamma.new_ExchProc(*args))

    def intra_default(self, ic1, ic2, nspins, k):
        r"""intra_default(ExchProc self, int ic1, int ic2, int nspins, double k)"""
        return _pygamma.ExchProc_intra_default(self, ic1, ic2, nspins, k)

    def Kex(self, *args):
        r"""
        Kex(ExchProc self) -> double
        Kex(ExchProc self, double k)
        """
        return _pygamma.ExchProc_Kex(self, *args)

    def LHSComp(self, comp):
        r"""LHSComp(ExchProc self, int comp) -> int"""
        return _pygamma.ExchProc_LHSComp(self, comp)

    def RHSComp(self, comp):
        r"""RHSComp(ExchProc self, int comp) -> int"""
        return _pygamma.ExchProc_RHSComp(self, comp)

    def NCompsLHS(self):
        r"""NCompsLHS(ExchProc self) -> int"""
        return _pygamma.ExchProc_NCompsLHS(self)

    def NCompsRHS(self):
        r"""NCompsRHS(ExchProc self) -> int"""
        return _pygamma.ExchProc_NCompsRHS(self)

    def mixes(self, comp, comp1):
        r"""mixes(ExchProc self, int comp, int comp1) -> bool"""
        return _pygamma.ExchProc_mixes(self, comp, comp1)

    def CompInLHS(self, comp):
        r"""CompInLHS(ExchProc self, int comp) -> bool"""
        return _pygamma.ExchProc_CompInLHS(self, comp)

    def CompInRHS(self, comp):
        r"""CompInRHS(ExchProc self, int comp) -> bool"""
        return _pygamma.ExchProc_CompInRHS(self, comp)

    def involves(self, comp, lr=0):
        r"""involves(ExchProc self, int comp, int lr=0) -> bool"""
        return _pygamma.ExchProc_involves(self, comp, lr)

    def NSpinMaps(self):
        r"""NSpinMaps(ExchProc self) -> int"""
        return _pygamma.ExchProc_NSpinMaps(self)

    def SMap(self, *args):
        r"""
        SMap(ExchProc self, int i) -> SpinMap
        SMap(ExchProc self, int comp1, int sp1, int & comp2, int & sp2) -> bool
        """
        return _pygamma.ExchProc_SMap(self, *args)

    def add_pair(self, arg2):
        r"""add_pair(ExchProc self, SpinMap arg2)"""
        return _pygamma.ExchProc_add_pair(self, arg2)

    def mapped(self, *args):
        r"""
        mapped(ExchProc self, int comp1, int s1, int comp2, int s2) -> bool
        mapped(ExchProc self, int comp1, int comp2) -> bool
        """
        return _pygamma.ExchProc_mapped(self, *args)

    def mapping(self, spair):
        r"""mapping(ExchProc self, std::string const & spair)"""
        return _pygamma.ExchProc_mapping(self, spair)

    def read(self, *args):
        r"""
        read(ExchProc self, std::string const & filename, int idx=-1, int warn=2) -> bool
        read(ExchProc self, ParameterSet pset, int idx=-1, int warn=2) -> bool
        """
        return _pygamma.ExchProc_read(self, *args)

    @staticmethod
    def Label(i):
        r"""Label(int i) -> char"""
        return _pygamma.ExchProc_Label(i)

    def LHSStr(self):
        r"""LHSStr(ExchProc self) -> std::string"""
        return _pygamma.ExchProc_LHSStr(self)

    def RHSStr(self):
        r"""RHSStr(ExchProc self) -> std::string"""
        return _pygamma.ExchProc_RHSStr(self)

    def SpinMapStrs(self):
        r"""SpinMapStrs(ExchProc self) -> StringVector"""
        return _pygamma.ExchProc_SpinMapStrs(self)

    def lsprint(self, ostr, full=0):
        r"""lsprint(ExchProc self, std::ostream & ostr, int full=0) -> std::ostream"""
        return _pygamma.ExchProc_lsprint(self, ostr, full)

# Register ExchProc in _pygamma:
_pygamma.ExchProc_swigregister(ExchProc)

def ExchProc_Label(i):
    r"""ExchProc_Label(int i) -> char"""
    return _pygamma.ExchProc_Label(i)

class multi_sys(object):
    r"""Proxy of C++ multi_sys class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multi_sys self) -> multi_sys
        __init__(multi_sys self, multi_sys msys) -> multi_sys
        __init__(multi_sys self, double pop1, sys_dynamic sys1, double pop2, sys_dynamic sys2, double krate=0) -> multi_sys
        """
        _pygamma.multi_sys_swiginit(self, _pygamma.new_multi_sys(*args))

    def __assign__(self, msys):
        r"""__assign__(multi_sys self, multi_sys msys) -> multi_sys"""
        return _pygamma.multi_sys___assign__(self, msys)
    __swig_destroy__ = _pygamma.delete_multi_sys

    def name(self, *args):
        r"""
        name(multi_sys self, std::string const & sysname)
        name(multi_sys self) -> std::string const &
        """
        return _pygamma.multi_sys_name(self, *args)

    def pop(self, *args):
        r"""
        pop(multi_sys self, int icomp, double npop)
        pop(multi_sys self, int icomp) -> double
        """
        return _pygamma.multi_sys_pop(self, *args)

    def popmin(self):
        r"""popmin(multi_sys self) -> double"""
        return _pygamma.multi_sys_popmin(self)

    def popmax(self):
        r"""popmax(multi_sys self) -> double"""
        return _pygamma.multi_sys_popmax(self)

    def NComps(self):
        r"""NComps(multi_sys self) -> int"""
        return _pygamma.multi_sys_NComps(self)

    def Comp(self, *args):
        r"""
        Comp(multi_sys self, int icomp, sys_dynamic sys)
        Comp(multi_sys self, int icomp) -> sys_dynamic
        """
        return _pygamma.multi_sys_Comp(self, *args)

    def AddComp(self, sys, pop=0):
        r"""AddComp(multi_sys self, sys_dynamic sys, double pop=0)"""
        return _pygamma.multi_sys_AddComp(self, sys, pop)

    def CheckComp(self, n):
        r"""CheckComp(multi_sys self, unsigned int n)"""
        return _pygamma.multi_sys_CheckComp(self, n)

    def NExProcs(self):
        r"""NExProcs(multi_sys self) -> int"""
        return _pygamma.multi_sys_NExProcs(self)

    def ExProc(self, *args):
        r"""
        ExProc(multi_sys self, int iex) -> ExchProc
        ExProc(multi_sys self, ExchProc pr, int iex)
        """
        return _pygamma.multi_sys_ExProc(self, *args)

    def Kex(self, *args):
        r"""
        Kex(multi_sys self, int iex) -> double
        Kex(multi_sys self, double K, int iex)
        """
        return _pygamma.multi_sys_Kex(self, *args)

    def NCompsLHS(self, iex):
        r"""NCompsLHS(multi_sys self, int iex) -> int"""
        return _pygamma.multi_sys_NCompsLHS(self, iex)

    def NCompsRHS(self, iex):
        r"""NCompsRHS(multi_sys self, int iex) -> int"""
        return _pygamma.multi_sys_NCompsRHS(self, iex)

    def homonuclear(self, cmp=-1):
        r"""homonuclear(multi_sys self, int cmp=-1) -> bool"""
        return _pygamma.multi_sys_homonuclear(self, cmp)

    def heteronuclear(self, cmp=-1):
        r"""heteronuclear(multi_sys self, int cmp=-1) -> bool"""
        return _pygamma.multi_sys_heteronuclear(self, cmp)

    def HS(self, comp=-1):
        r"""HS(multi_sys self, int comp=-1) -> int"""
        return _pygamma.multi_sys_HS(self, comp)

    def LS(self, comp=-1):
        r"""LS(multi_sys self, int comp=-1) -> int"""
        return _pygamma.multi_sys_LS(self, comp)

    def HSs(self):
        r"""HSs(multi_sys self) -> IntVector"""
        return _pygamma.multi_sys_HSs(self)

    def LSs(self):
        r"""LSs(multi_sys self) -> IntVector"""
        return _pygamma.multi_sys_LSs(self)

    def symbol(self, comp, spin):
        r"""symbol(multi_sys self, int comp, int spin) -> std::string const"""
        return _pygamma.multi_sys_symbol(self, comp, spin)

    def Omega(self, *args):
        r"""
        Omega(multi_sys self, double freq)
        Omega(multi_sys self, double freq, std::string const & iso)
        Omega(multi_sys self) -> double
        Omega(multi_sys self, std::string const & iso) -> double
        """
        return _pygamma.multi_sys_Omega(self, *args)

    def write(self, *args):
        r"""write(multi_sys self, std::string & filename, std::string basename="comp")"""
        return _pygamma.multi_sys_write(self, *args)

    def read(self, *args):
        r"""
        read(multi_sys self, std::string const & filename, int warn=2) -> bool
        read(multi_sys self, ParameterSet pset, int warn=2) -> bool
        """
        return _pygamma.multi_sys_read(self, *args)

    def ask_read(self, *args):
        r"""
        ask_read(multi_sys self, int argc, char *[] argv, int argn) -> std::string
        ask_read(multi_sys self, int argc, char *[] argv, int argn, std::string const & _def) -> std::string
        """
        return _pygamma.multi_sys_ask_read(self, *args)

    def SpinMapStrs(self, exp):
        r"""SpinMapStrs(multi_sys self, int exp) -> StringVector"""
        return _pygamma.multi_sys_SpinMapStrs(self, exp)

    def LHSStrs(self):
        r"""LHSStrs(multi_sys self) -> StringVector"""
        return _pygamma.multi_sys_LHSStrs(self)

    def RHSStrs(self):
        r"""RHSStrs(multi_sys self) -> StringVector"""
        return _pygamma.multi_sys_RHSStrs(self)

    def EXPStrs(self):
        r"""EXPStrs(multi_sys self) -> StringVector"""
        return _pygamma.multi_sys_EXPStrs(self)

# Register multi_sys in _pygamma:
_pygamma.multi_sys_swigregister(multi_sys)


def multize(*args):
    r"""
    multize(gen_op Op, multi_sys msys, int icomp) -> gen_op
    multize(super_op SOp, multi_sys msys, int icomp) -> super_op
    """
    return _pygamma.multize(*args)

def D_basis(msys):
    r"""D_basis(multi_sys msys) -> basis"""
    return _pygamma.D_basis(msys)

def qStateLS(msys, I):
    r"""qStateLS(multi_sys msys, int I) -> DoubleVector"""
    return _pygamma.qStateLS(msys, I)

def LS_qState_bra(msys, i):
    r"""LS_qState_bra(multi_sys msys, int i) -> row_vector"""
    return _pygamma.LS_qState_bra(msys, i)

def LS_qState_ket(msys, i):
    r"""LS_qState_ket(multi_sys msys, int i) -> row_vector"""
    return _pygamma.LS_qState_ket(msys, i)

def Fx(*args):
    r"""
    Fx(spin_sys sys, int spin) -> spin_op
    Fx(spin_sys sys) -> spin_op
    Fx(spin_sys sys, std::string const & iso) -> spin_op
    Fx(spin_sys sys, flagvec const & sflags) -> spin_op
    Fx(multi_sys msys) -> gen_op
    Fx(multi_sys msys, std::string const & iso) -> gen_op
    """
    return _pygamma.Fx(*args)

def Fy(*args):
    r"""
    Fy(spin_sys sys, int spin) -> spin_op
    Fy(spin_sys sys) -> spin_op
    Fy(spin_sys sys, std::string const & iso) -> spin_op
    Fy(spin_sys sys, flagvec const & sflags) -> spin_op
    Fy(multi_sys msys) -> gen_op
    Fy(multi_sys msys, std::string const & iso) -> gen_op
    """
    return _pygamma.Fy(*args)

def Fz(*args):
    r"""
    Fz(spin_sys sys, int spin) -> spin_op
    Fz(spin_sys sys) -> spin_op
    Fz(spin_sys sys, std::string const & iso) -> spin_op
    Fz(spin_sys sys, flagvec const & sflags) -> spin_op
    Fz(multi_sys msys) -> gen_op
    Fz(multi_sys msys, std::string const & iso) -> gen_op
    """
    return _pygamma.Fz(*args)

def Fe(*args):
    r"""
    Fe(spin_sys sys, int spin) -> spin_op
    Fe(spin_sys sys) -> spin_op
    Fe(spin_sys sys, std::string const & iso) -> spin_op
    Fe(spin_sys sys, flagvec const & sflags) -> spin_op
    Fe(multi_sys msys) -> gen_op
    Fe(multi_sys msys, std::string const & iso) -> gen_op
    """
    return _pygamma.Fe(*args)

def Fm(*args):
    r"""
    Fm(spin_sys sys, int spin) -> spin_op
    Fm(spin_sys sys) -> spin_op
    Fm(spin_sys sys, std::string const & iso) -> spin_op
    Fm(spin_sys sys, flagvec const & sflags) -> spin_op
    Fm(spin_sys sys, int spin, double theta) -> spin_op
    Fm(spin_sys sys, std::string const & iso, double theta) -> spin_op
    Fm(spin_sys sys, double theta) -> spin_op
    Fm(multi_sys msys) -> gen_op
    Fm(multi_sys msys, std::string const & iso) -> gen_op
    """
    return _pygamma.Fm(*args)

def Fp(*args):
    r"""
    Fp(spin_sys sys, int spin) -> spin_op
    Fp(spin_sys sys) -> spin_op
    Fp(spin_sys sys, std::string const & iso) -> spin_op
    Fp(spin_sys sys, flagvec const & sflags) -> spin_op
    Fp(spin_sys sys, int spin, double theta) -> spin_op
    Fp(spin_sys sys, std::string const & iso, double theta) -> spin_op
    Fp(spin_sys sys, flagvec const & flags, double theta) -> spin_op
    Fp(spin_sys sys, double theta) -> spin_op
    Fp(multi_sys msys) -> gen_op
    Fp(multi_sys msys, std::string const & iso) -> gen_op
    """
    return _pygamma.Fp(*args)

def Rz(*args):
    r"""
    Rz(spin_sys sys, int spin, double beta) -> spin_op
    Rz(spin_sys sys, std::string const & iso, double beta) -> spin_op
    Rz(spin_sys sys, double beta) -> spin_op
    Rz(spin_sys sys, flagvec const & flags, double beta) -> spin_op
    Rz(multi_sys msys, double beta, int icomp=-1) -> gen_op
    """
    return _pygamma.Rz(*args)

def Ho(*args):
    r"""
    Ho(spin_system ss) -> gen_op
    Ho(multi_sys msys) -> gen_op
    """
    return _pygamma.Ho(*args)

def Hcs(*args):
    r"""
    Hcs(spin_system sys) -> gen_op
    Hcs(multi_sys msys) -> gen_op
    """
    return _pygamma.Hcs(*args)

def HJ(*args):
    r"""
    HJ(spin_system sys) -> gen_op
    HJ(multi_sys msys) -> gen_op
    """
    return _pygamma.HJ(*args)

def Hcs_lab(*args):
    r"""
    Hcs_lab(spin_system sys) -> gen_op
    Hcs_lab(multi_sys msys) -> gen_op
    """
    return _pygamma.Hcs_lab(*args)

def Iypuls(*args):
    r"""
    Iypuls(spin_sys sys, gen_op sigma, int spin, double beta) -> gen_op
    Iypuls(spin_sys sys, gen_op sigma, std::string const & iso, double beta) -> gen_op
    Iypuls(spin_sys sys, gen_op sigma, double beta) -> gen_op
    Iypuls(multi_sys msys, gen_op sigma, double beta, int icomp=-1) -> gen_op
    Iypuls(multi_sys msys, gen_op sigma, int nspin, double beta, int icomp=-1) -> gen_op
    Iypuls(multi_sys msys, gen_op sigma, std::string const & iso, double beta, int icomp=-1) -> gen_op
    """
    return _pygamma.Iypuls(*args)

def Ixpuls_U(*args):
    r"""
    Ixpuls_U(spin_sys sys, int spin, double beta) -> gen_op
    Ixpuls_U(spin_sys sys, std::string const & iso, double beta) -> gen_op
    Ixpuls_U(spin_sys sys, double beta) -> gen_op
    Ixpuls_U(multi_sys mys, int spin, double beta, int icomp=-1) -> gen_op
    Ixpuls_U(multi_sys mys, double beta, int icomp=-1) -> gen_op
    """
    return _pygamma.Ixpuls_U(*args)

def Iypuls_U(*args):
    r"""
    Iypuls_U(spin_sys sys, int spin, double beta) -> gen_op
    Iypuls_U(spin_sys sys, std::string const & iso, double beta) -> gen_op
    Iypuls_U(spin_sys sys, double beta) -> gen_op
    Iypuls_U(multi_sys mys, int spin, double beta, int icomp=-1) -> gen_op
    Iypuls_U(multi_sys mys, std::string const & iso, double beta, int icomp=-1) -> gen_op
    Iypuls_U(multi_sys mys, double beta, int icomp=-1) -> gen_op
    """
    return _pygamma.Iypuls_U(*args)

def Ixypuls_U(*args):
    r"""
    Ixypuls_U(spin_sys sys, int spin, double phi, double beta) -> gen_op
    Ixypuls_U(spin_sys sys, std::string const & I, double phi, double beta) -> gen_op
    Ixypuls_U(spin_sys sys, double phi, double beta) -> gen_op
    Ixypuls_U(multi_sys msys, double phi, double beta, int icomp=-1) -> gen_op
    """
    return _pygamma.Ixypuls_U(*args)

def sigma_eq(*args):
    r"""
    sigma_eq(spin_sys sys) -> gen_op
    sigma_eq(spin_sys sys, Isotope I) -> gen_op
    sigma_eq(multi_sys msys) -> gen_op
    """
    return _pygamma.sigma_eq(*args)

def Hsuper(*args):
    r"""
    Hsuper(gen_op Heff) -> super_op
    Hsuper(multi_sys msys, gen_op Heff) -> super_op
    """
    return _pygamma.Hsuper(*args)

def Lo(msys):
    r"""Lo(multi_sys msys) -> super_op"""
    return _pygamma.Lo(msys)

def U_LS(H):
    r"""U_LS(gen_op H) -> super_op"""
    return _pygamma.U_LS(H)

def Uinv_LS(H):
    r"""Uinv_LS(gen_op H) -> super_op"""
    return _pygamma.Uinv_LS(H)

def Op_Ebase(L, H):
    r"""Op_Ebase(super_op L, gen_op H) -> super_op"""
    return _pygamma.Op_Ebase(L, H)

def RQQ(*args):
    r"""
    RQQ(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int type=0, int level=4)
    RQQ(sys_dynamic sys, gen_op Ho, int type=0, int level=4) -> super_op
    RQQ(multi_sys msys, gen_op H, int type=0, int level=4) -> super_op
    """
    return _pygamma.RQQ(*args)

def RCC(*args):
    r"""
    RCC(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int type=0, int level=4)
    RCC(sys_dynamic sys, gen_op Ho, int type=0, int level=4) -> super_op
    RCC(multi_sys msys, gen_op H, int type=0, int level=4) -> super_op
    """
    return _pygamma.RCC(*args)

def RDD(*args):
    r"""
    RDD(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int type=0, int level=4)
    RDD(sys_dynamic sys, gen_op Ho, int type=0, int level=4) -> super_op
    RDD(spin_system sys, gen_op Ho, double tau, matrix dist, int type=0, int level=4) -> super_op
    RDD(multi_sys msys, gen_op H, int type=0, int level=4) -> super_op
    """
    return _pygamma.RDD(*args)

def RCQ(*args):
    r"""
    RCQ(sys_dynamic sys, gen_op Ho, int level=4) -> super_op
    RCQ(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int level=4)
    RCQ(multi_sys msys, gen_op H, int level=4) -> super_op
    """
    return _pygamma.RCQ(*args)

def RQC(*args):
    r"""
    RQC(sys_dynamic sys, gen_op Ho, int level=4) -> super_op
    RQC(super_op LOp, sys_dynamic sys, gen_op Ho, double * w, double * taus, double chi, int level=4)
    RQC(multi_sys msys, gen_op H, int level=4) -> super_op
    """
    return _pygamma.RQC(*args)

def Xm(msys):
    r"""Xm(multi_sys msys) -> super_op"""
    return _pygamma.Xm(msys)

def Xnm(*args):
    r"""
    Xnm(multi_sys msys) -> super_op
    Xnm(std::ostream & ostr, multi_sys sys)
    """
    return _pygamma.Xnm(*args)

def Xnmp(*args):
    r"""
    Xnmp(multi_sys msys, int p) -> matrix
    Xnmp(std::ostream & ostr, multi_sys msys, int p)
    """
    return _pygamma.Xnmp(*args)

def Xnmpdblk(ostr, msys, K, Io, Iend):
    r"""Xnmpdblk(std::ostream & ostr, multi_sys msys, double K, int Io, int Iend)"""
    return _pygamma.Xnmpdblk(ostr, msys, K, Io, Iend)

def Xnmpblk(ostr, msys, Pro, K, cmpI, cmpJ, Io, Iend, Jo, Jend):
    r"""Xnmpblk(std::ostream & ostr, multi_sys msys, ExchProc Pro, double K, int cmpI, int cmpJ, int Io, int Iend, int Jo, int Jend)"""
    return _pygamma.Xnmpblk(ostr, msys, Pro, K, cmpI, cmpJ, Io, Iend, Jo, Jend)

def XXnm(msys):
    r"""XXnm(multi_sys msys) -> super_op"""
    return _pygamma.XXnm(msys)
class SpinMap(object):
    r"""Proxy of C++ SpinMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sub1 = property(_pygamma.SpinMap_sub1_get, _pygamma.SpinMap_sub1_set, doc=r"""sub1 : int""")
    sp1 = property(_pygamma.SpinMap_sp1_get, _pygamma.SpinMap_sp1_set, doc=r"""sp1 : int""")
    sub2 = property(_pygamma.SpinMap_sub2_get, _pygamma.SpinMap_sub2_set, doc=r"""sub2 : int""")
    sp2 = property(_pygamma.SpinMap_sp2_get, _pygamma.SpinMap_sp2_set, doc=r"""sp2 : int""")

    def SMfatal(self, eidx):
        r"""SMfatal(SpinMap self, int eidx) -> void volatile"""
        return _pygamma.SpinMap_SMfatal(self, eidx)

    def SMerror(self, *args):
        r"""
        SMerror(SpinMap self, int eidx, int nr=0)
        SMerror(SpinMap self, int eidx, std::string const & pn, int nr=0)
        """
        return _pygamma.SpinMap_SMerror(self, *args)

    def getSMStr(self, pset, idx, mdx, sm, warn=True):
        r"""getSMStr(SpinMap self, ParameterSet pset, int idx, int mdx, std::string & sm, bool warn=True) -> bool"""
        return _pygamma.SpinMap_getSMStr(self, pset, idx, mdx, sm, warn)

    def getSM(self, pset, idx, mdx, comp1, spin1, comp2, spin2, warn=True):
        r"""getSM(SpinMap self, ParameterSet pset, int idx, int mdx, int & comp1, int & spin1, int & comp2, int & spin2, bool warn=True) -> bool"""
        return _pygamma.SpinMap_getSM(self, pset, idx, mdx, comp1, spin1, comp2, spin2, warn)

    def setSM(self, pset, idx, mdx, warn=True):
        r"""setSM(SpinMap self, ParameterSet pset, int idx, int mdx, bool warn=True) -> bool"""
        return _pygamma.SpinMap_setSM(self, pset, idx, mdx, warn)

    def Check(self, *args):
        r"""
        Check(SpinMap self, bool warn=True) -> bool
        Check(SpinMap self, int c1, int s1, int c2, int s2, bool warn=True) -> bool
        """
        return _pygamma.SpinMap_Check(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SpinMap self) -> SpinMap
        __init__(SpinMap self, int c1, int s1, int c2, int s2) -> SpinMap
        __init__(SpinMap self, SpinMap SM) -> SpinMap
        __init__(SpinMap self, std::string const & SM) -> SpinMap
        """
        _pygamma.SpinMap_swiginit(self, _pygamma.new_SpinMap(*args))

    def __assign__(self, SM):
        r"""__assign__(SpinMap self, SpinMap SM) -> SpinMap"""
        return _pygamma.SpinMap___assign__(self, SM)
    __swig_destroy__ = _pygamma.delete_SpinMap

    def Sub1(self):
        r"""Sub1(SpinMap self) -> int"""
        return _pygamma.SpinMap_Sub1(self)

    def Sub2(self):
        r"""Sub2(SpinMap self) -> int"""
        return _pygamma.SpinMap_Sub2(self)

    def Spin1(self):
        r"""Spin1(SpinMap self) -> int"""
        return _pygamma.SpinMap_Spin1(self)

    def Spin2(self):
        r"""Spin2(SpinMap self) -> int"""
        return _pygamma.SpinMap_Spin2(self)

    def read(self, *args):
        r"""
        read(SpinMap self, std::string const & filename, int idx, int mdx, int warn=2) -> bool
        read(SpinMap self, ParameterSet pset, int idx, int mdx, int warn=2) -> bool
        """
        return _pygamma.SpinMap_read(self, *args)

    def lsprint(self):
        r"""lsprint(SpinMap self)"""
        return _pygamma.SpinMap_lsprint(self)

# Register SpinMap in _pygamma:
_pygamma.SpinMap_swigregister(SpinMap)



