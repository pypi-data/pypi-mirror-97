# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sasrl_env.common.python.envp_pb2 as envp__pb2


class EnvpStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Handshakep = channel.unary_unary(
                '/Envp/Handshakep',
                request_serializer=envp__pb2.Emptyp.SerializeToString,
                response_deserializer=envp__pb2.MetaDatap.FromString,
                )
        self.Makep = channel.unary_unary(
                '/Envp/Makep',
                request_serializer=envp__pb2.Namep.SerializeToString,
                response_deserializer=envp__pb2.Infop.FromString,
                )
        self.Resetp = channel.unary_unary(
                '/Envp/Resetp',
                request_serializer=envp__pb2.EnvIDsp.SerializeToString,
                response_deserializer=envp__pb2.Observationsp.FromString,
                )
        self.Renderp = channel.unary_unary(
                '/Envp/Renderp',
                request_serializer=envp__pb2.RenderModesp.SerializeToString,
                response_deserializer=envp__pb2.RenderOutsp.FromString,
                )
        self.Seedp = channel.unary_unary(
                '/Envp/Seedp',
                request_serializer=envp__pb2.EnvSeedsp.SerializeToString,
                response_deserializer=envp__pb2.Emptyp.FromString,
                )
        self.Stepp = channel.unary_unary(
                '/Envp/Stepp',
                request_serializer=envp__pb2.Actionsp.SerializeToString,
                response_deserializer=envp__pb2.Transitionsp.FromString,
                )
        self.Samplep = channel.unary_unary(
                '/Envp/Samplep',
                request_serializer=envp__pb2.Emptyp.SerializeToString,
                response_deserializer=envp__pb2.Actionsp.FromString,
                )
        self.Closep = channel.unary_unary(
                '/Envp/Closep',
                request_serializer=envp__pb2.EnvIDsp.SerializeToString,
                response_deserializer=envp__pb2.Emptyp.FromString,
                )


class EnvpServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Handshakep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Makep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Resetp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Renderp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Seedp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stepp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Samplep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Closep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnvpServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Handshakep': grpc.unary_unary_rpc_method_handler(
                    servicer.Handshakep,
                    request_deserializer=envp__pb2.Emptyp.FromString,
                    response_serializer=envp__pb2.MetaDatap.SerializeToString,
            ),
            'Makep': grpc.unary_unary_rpc_method_handler(
                    servicer.Makep,
                    request_deserializer=envp__pb2.Namep.FromString,
                    response_serializer=envp__pb2.Infop.SerializeToString,
            ),
            'Resetp': grpc.unary_unary_rpc_method_handler(
                    servicer.Resetp,
                    request_deserializer=envp__pb2.EnvIDsp.FromString,
                    response_serializer=envp__pb2.Observationsp.SerializeToString,
            ),
            'Renderp': grpc.unary_unary_rpc_method_handler(
                    servicer.Renderp,
                    request_deserializer=envp__pb2.RenderModesp.FromString,
                    response_serializer=envp__pb2.RenderOutsp.SerializeToString,
            ),
            'Seedp': grpc.unary_unary_rpc_method_handler(
                    servicer.Seedp,
                    request_deserializer=envp__pb2.EnvSeedsp.FromString,
                    response_serializer=envp__pb2.Emptyp.SerializeToString,
            ),
            'Stepp': grpc.unary_unary_rpc_method_handler(
                    servicer.Stepp,
                    request_deserializer=envp__pb2.Actionsp.FromString,
                    response_serializer=envp__pb2.Transitionsp.SerializeToString,
            ),
            'Samplep': grpc.unary_unary_rpc_method_handler(
                    servicer.Samplep,
                    request_deserializer=envp__pb2.Emptyp.FromString,
                    response_serializer=envp__pb2.Actionsp.SerializeToString,
            ),
            'Closep': grpc.unary_unary_rpc_method_handler(
                    servicer.Closep,
                    request_deserializer=envp__pb2.EnvIDsp.FromString,
                    response_serializer=envp__pb2.Emptyp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Envp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Envp(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Handshakep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Handshakep',
            envp__pb2.Emptyp.SerializeToString,
            envp__pb2.MetaDatap.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Makep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Makep',
            envp__pb2.Namep.SerializeToString,
            envp__pb2.Infop.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Resetp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Resetp',
            envp__pb2.EnvIDsp.SerializeToString,
            envp__pb2.Observationsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Renderp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Renderp',
            envp__pb2.RenderModesp.SerializeToString,
            envp__pb2.RenderOutsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Seedp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Seedp',
            envp__pb2.EnvSeedsp.SerializeToString,
            envp__pb2.Emptyp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stepp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Stepp',
            envp__pb2.Actionsp.SerializeToString,
            envp__pb2.Transitionsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Samplep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Samplep',
            envp__pb2.Emptyp.SerializeToString,
            envp__pb2.Actionsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Closep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Envp/Closep',
            envp__pb2.EnvIDsp.SerializeToString,
            envp__pb2.Emptyp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
