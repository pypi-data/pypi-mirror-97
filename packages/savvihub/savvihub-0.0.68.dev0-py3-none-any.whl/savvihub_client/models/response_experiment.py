# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from savvihub_client.configuration import Configuration


class ResponseExperiment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_by': 'ModelUser',
        'created_by_id': 'int',
        'created_dt': 'datetime',
        'env_vars': 'list[ModelEnvVar]',
        'git_diff_file': 'ResponseFileMetadata',
        'git_ref': 'str',
        'histories': 'list[ResponseExperimentHistory]',
        'id': 'int',
        'kernel_cluster': 'ResponseExperimentKernelCluster',
        'kernel_cluster_node': 'ResponseKernelClusterNode',
        'kernel_image': 'ModelKernelImage',
        'kernel_image_id': 'int',
        'kernel_resource_spec': 'ResponseKernelResourceSpec',
        'kernel_resource_spec_id': 'int',
        'message': 'str',
        'metrics_summary': 'ModelExperimentMetricsSummary',
        'name': 'str',
        'number': 'int',
        'project_id': 'int',
        'reproduce_command': 'str',
        'slug': 'str',
        'source_code_link': 'list[ResponseProjectLink]',
        'start_command': 'str',
        'status': 'str',
        'tensorboard': 'ResponseService',
        'updated_dt': 'datetime',
        'volumes': 'list[ResponseVolumeMountInfo]',
        'workspace_id': 'int'
    }

    attribute_map = {
        'created_by': 'created_by',
        'created_by_id': 'created_by_id',
        'created_dt': 'created_dt',
        'env_vars': 'env_vars',
        'git_diff_file': 'git_diff_file',
        'git_ref': 'git_ref',
        'histories': 'histories',
        'id': 'id',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_node': 'kernel_cluster_node',
        'kernel_image': 'kernel_image',
        'kernel_image_id': 'kernel_image_id',
        'kernel_resource_spec': 'kernel_resource_spec',
        'kernel_resource_spec_id': 'kernel_resource_spec_id',
        'message': 'message',
        'metrics_summary': 'metrics_summary',
        'name': 'name',
        'number': 'number',
        'project_id': 'project_id',
        'reproduce_command': 'reproduce_command',
        'slug': 'slug',
        'source_code_link': 'source_code_link',
        'start_command': 'start_command',
        'status': 'status',
        'tensorboard': 'tensorboard',
        'updated_dt': 'updated_dt',
        'volumes': 'volumes',
        'workspace_id': 'workspace_id'
    }

    def __init__(self, created_by=None, created_by_id=None, created_dt=None, env_vars=None, git_diff_file=None, git_ref=None, histories=None, id=None, kernel_cluster=None, kernel_cluster_node=None, kernel_image=None, kernel_image_id=None, kernel_resource_spec=None, kernel_resource_spec_id=None, message=None, metrics_summary=None, name=None, number=None, project_id=None, reproduce_command=None, slug=None, source_code_link=None, start_command=None, status=None, tensorboard=None, updated_dt=None, volumes=None, workspace_id=None, local_vars_configuration=None):  # noqa: E501
        """ResponseExperiment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by = None
        self._created_by_id = None
        self._created_dt = None
        self._env_vars = None
        self._git_diff_file = None
        self._git_ref = None
        self._histories = None
        self._id = None
        self._kernel_cluster = None
        self._kernel_cluster_node = None
        self._kernel_image = None
        self._kernel_image_id = None
        self._kernel_resource_spec = None
        self._kernel_resource_spec_id = None
        self._message = None
        self._metrics_summary = None
        self._name = None
        self._number = None
        self._project_id = None
        self._reproduce_command = None
        self._slug = None
        self._source_code_link = None
        self._start_command = None
        self._status = None
        self._tensorboard = None
        self._updated_dt = None
        self._volumes = None
        self._workspace_id = None
        self.discriminator = None

        self.created_by = created_by
        self.created_by_id = created_by_id
        self.created_dt = created_dt
        self.env_vars = env_vars
        if git_diff_file is not None:
            self.git_diff_file = git_diff_file
        if git_ref is not None:
            self.git_ref = git_ref
        self.histories = histories
        self.id = id
        if kernel_cluster is not None:
            self.kernel_cluster = kernel_cluster
        if kernel_cluster_node is not None:
            self.kernel_cluster_node = kernel_cluster_node
        self.kernel_image = kernel_image
        self.kernel_image_id = kernel_image_id
        self.kernel_resource_spec = kernel_resource_spec
        self.kernel_resource_spec_id = kernel_resource_spec_id
        self.message = message
        self.metrics_summary = metrics_summary
        self.name = name
        self.number = number
        self.project_id = project_id
        if reproduce_command is not None:
            self.reproduce_command = reproduce_command
        self.slug = slug
        self.source_code_link = source_code_link
        self.start_command = start_command
        self.status = status
        self.tensorboard = tensorboard
        self.updated_dt = updated_dt
        self.volumes = volumes
        self.workspace_id = workspace_id

    @property
    def created_by(self):
        """Gets the created_by of this ResponseExperiment.  # noqa: E501


        :return: The created_by of this ResponseExperiment.  # noqa: E501
        :rtype: ModelUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponseExperiment.


        :param created_by: The created_by of this ResponseExperiment.  # noqa: E501
        :type created_by: ModelUser
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ResponseExperiment.  # noqa: E501


        :return: The created_by_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ResponseExperiment.


        :param created_by_id: The created_by_id of this ResponseExperiment.  # noqa: E501
        :type created_by_id: int
        """
        if self.local_vars_configuration.client_side_validation and created_by_id is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by_id`, must not be `None`")  # noqa: E501

        self._created_by_id = created_by_id

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseExperiment.  # noqa: E501


        :return: The created_dt of this ResponseExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseExperiment.


        :param created_dt: The created_dt of this ResponseExperiment.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def env_vars(self):
        """Gets the env_vars of this ResponseExperiment.  # noqa: E501


        :return: The env_vars of this ResponseExperiment.  # noqa: E501
        :rtype: list[ModelEnvVar]
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this ResponseExperiment.


        :param env_vars: The env_vars of this ResponseExperiment.  # noqa: E501
        :type env_vars: list[ModelEnvVar]
        """
        if self.local_vars_configuration.client_side_validation and env_vars is None:  # noqa: E501
            raise ValueError("Invalid value for `env_vars`, must not be `None`")  # noqa: E501

        self._env_vars = env_vars

    @property
    def git_diff_file(self):
        """Gets the git_diff_file of this ResponseExperiment.  # noqa: E501


        :return: The git_diff_file of this ResponseExperiment.  # noqa: E501
        :rtype: ResponseFileMetadata
        """
        return self._git_diff_file

    @git_diff_file.setter
    def git_diff_file(self, git_diff_file):
        """Sets the git_diff_file of this ResponseExperiment.


        :param git_diff_file: The git_diff_file of this ResponseExperiment.  # noqa: E501
        :type git_diff_file: ResponseFileMetadata
        """

        self._git_diff_file = git_diff_file

    @property
    def git_ref(self):
        """Gets the git_ref of this ResponseExperiment.  # noqa: E501


        :return: The git_ref of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._git_ref

    @git_ref.setter
    def git_ref(self, git_ref):
        """Sets the git_ref of this ResponseExperiment.


        :param git_ref: The git_ref of this ResponseExperiment.  # noqa: E501
        :type git_ref: str
        """

        self._git_ref = git_ref

    @property
    def histories(self):
        """Gets the histories of this ResponseExperiment.  # noqa: E501


        :return: The histories of this ResponseExperiment.  # noqa: E501
        :rtype: list[ResponseExperimentHistory]
        """
        return self._histories

    @histories.setter
    def histories(self, histories):
        """Sets the histories of this ResponseExperiment.


        :param histories: The histories of this ResponseExperiment.  # noqa: E501
        :type histories: list[ResponseExperimentHistory]
        """
        if self.local_vars_configuration.client_side_validation and histories is None:  # noqa: E501
            raise ValueError("Invalid value for `histories`, must not be `None`")  # noqa: E501

        self._histories = histories

    @property
    def id(self):
        """Gets the id of this ResponseExperiment.  # noqa: E501


        :return: The id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseExperiment.


        :param id: The id of this ResponseExperiment.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this ResponseExperiment.  # noqa: E501


        :return: The kernel_cluster of this ResponseExperiment.  # noqa: E501
        :rtype: ResponseExperimentKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this ResponseExperiment.


        :param kernel_cluster: The kernel_cluster of this ResponseExperiment.  # noqa: E501
        :type kernel_cluster: ResponseExperimentKernelCluster
        """

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_node(self):
        """Gets the kernel_cluster_node of this ResponseExperiment.  # noqa: E501


        :return: The kernel_cluster_node of this ResponseExperiment.  # noqa: E501
        :rtype: ResponseKernelClusterNode
        """
        return self._kernel_cluster_node

    @kernel_cluster_node.setter
    def kernel_cluster_node(self, kernel_cluster_node):
        """Sets the kernel_cluster_node of this ResponseExperiment.


        :param kernel_cluster_node: The kernel_cluster_node of this ResponseExperiment.  # noqa: E501
        :type kernel_cluster_node: ResponseKernelClusterNode
        """

        self._kernel_cluster_node = kernel_cluster_node

    @property
    def kernel_image(self):
        """Gets the kernel_image of this ResponseExperiment.  # noqa: E501


        :return: The kernel_image of this ResponseExperiment.  # noqa: E501
        :rtype: ModelKernelImage
        """
        return self._kernel_image

    @kernel_image.setter
    def kernel_image(self, kernel_image):
        """Sets the kernel_image of this ResponseExperiment.


        :param kernel_image: The kernel_image of this ResponseExperiment.  # noqa: E501
        :type kernel_image: ModelKernelImage
        """
        if self.local_vars_configuration.client_side_validation and kernel_image is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_image`, must not be `None`")  # noqa: E501

        self._kernel_image = kernel_image

    @property
    def kernel_image_id(self):
        """Gets the kernel_image_id of this ResponseExperiment.  # noqa: E501


        :return: The kernel_image_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._kernel_image_id

    @kernel_image_id.setter
    def kernel_image_id(self, kernel_image_id):
        """Sets the kernel_image_id of this ResponseExperiment.


        :param kernel_image_id: The kernel_image_id of this ResponseExperiment.  # noqa: E501
        :type kernel_image_id: int
        """
        if self.local_vars_configuration.client_side_validation and kernel_image_id is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_image_id`, must not be `None`")  # noqa: E501

        self._kernel_image_id = kernel_image_id

    @property
    def kernel_resource_spec(self):
        """Gets the kernel_resource_spec of this ResponseExperiment.  # noqa: E501


        :return: The kernel_resource_spec of this ResponseExperiment.  # noqa: E501
        :rtype: ResponseKernelResourceSpec
        """
        return self._kernel_resource_spec

    @kernel_resource_spec.setter
    def kernel_resource_spec(self, kernel_resource_spec):
        """Sets the kernel_resource_spec of this ResponseExperiment.


        :param kernel_resource_spec: The kernel_resource_spec of this ResponseExperiment.  # noqa: E501
        :type kernel_resource_spec: ResponseKernelResourceSpec
        """
        if self.local_vars_configuration.client_side_validation and kernel_resource_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_resource_spec`, must not be `None`")  # noqa: E501

        self._kernel_resource_spec = kernel_resource_spec

    @property
    def kernel_resource_spec_id(self):
        """Gets the kernel_resource_spec_id of this ResponseExperiment.  # noqa: E501


        :return: The kernel_resource_spec_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._kernel_resource_spec_id

    @kernel_resource_spec_id.setter
    def kernel_resource_spec_id(self, kernel_resource_spec_id):
        """Sets the kernel_resource_spec_id of this ResponseExperiment.


        :param kernel_resource_spec_id: The kernel_resource_spec_id of this ResponseExperiment.  # noqa: E501
        :type kernel_resource_spec_id: int
        """

        self._kernel_resource_spec_id = kernel_resource_spec_id

    @property
    def message(self):
        """Gets the message of this ResponseExperiment.  # noqa: E501


        :return: The message of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseExperiment.


        :param message: The message of this ResponseExperiment.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def metrics_summary(self):
        """Gets the metrics_summary of this ResponseExperiment.  # noqa: E501


        :return: The metrics_summary of this ResponseExperiment.  # noqa: E501
        :rtype: ModelExperimentMetricsSummary
        """
        return self._metrics_summary

    @metrics_summary.setter
    def metrics_summary(self, metrics_summary):
        """Sets the metrics_summary of this ResponseExperiment.


        :param metrics_summary: The metrics_summary of this ResponseExperiment.  # noqa: E501
        :type metrics_summary: ModelExperimentMetricsSummary
        """
        if self.local_vars_configuration.client_side_validation and metrics_summary is None:  # noqa: E501
            raise ValueError("Invalid value for `metrics_summary`, must not be `None`")  # noqa: E501

        self._metrics_summary = metrics_summary

    @property
    def name(self):
        """Gets the name of this ResponseExperiment.  # noqa: E501


        :return: The name of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseExperiment.


        :param name: The name of this ResponseExperiment.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def number(self):
        """Gets the number of this ResponseExperiment.  # noqa: E501


        :return: The number of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ResponseExperiment.


        :param number: The number of this ResponseExperiment.  # noqa: E501
        :type number: int
        """
        if self.local_vars_configuration.client_side_validation and number is None:  # noqa: E501
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def project_id(self):
        """Gets the project_id of this ResponseExperiment.  # noqa: E501


        :return: The project_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ResponseExperiment.


        :param project_id: The project_id of this ResponseExperiment.  # noqa: E501
        :type project_id: int
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def reproduce_command(self):
        """Gets the reproduce_command of this ResponseExperiment.  # noqa: E501


        :return: The reproduce_command of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._reproduce_command

    @reproduce_command.setter
    def reproduce_command(self, reproduce_command):
        """Sets the reproduce_command of this ResponseExperiment.


        :param reproduce_command: The reproduce_command of this ResponseExperiment.  # noqa: E501
        :type reproduce_command: str
        """

        self._reproduce_command = reproduce_command

    @property
    def slug(self):
        """Gets the slug of this ResponseExperiment.  # noqa: E501


        :return: The slug of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ResponseExperiment.


        :param slug: The slug of this ResponseExperiment.  # noqa: E501
        :type slug: str
        """
        if self.local_vars_configuration.client_side_validation and slug is None:  # noqa: E501
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def source_code_link(self):
        """Gets the source_code_link of this ResponseExperiment.  # noqa: E501


        :return: The source_code_link of this ResponseExperiment.  # noqa: E501
        :rtype: list[ResponseProjectLink]
        """
        return self._source_code_link

    @source_code_link.setter
    def source_code_link(self, source_code_link):
        """Sets the source_code_link of this ResponseExperiment.


        :param source_code_link: The source_code_link of this ResponseExperiment.  # noqa: E501
        :type source_code_link: list[ResponseProjectLink]
        """
        if self.local_vars_configuration.client_side_validation and source_code_link is None:  # noqa: E501
            raise ValueError("Invalid value for `source_code_link`, must not be `None`")  # noqa: E501

        self._source_code_link = source_code_link

    @property
    def start_command(self):
        """Gets the start_command of this ResponseExperiment.  # noqa: E501


        :return: The start_command of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this ResponseExperiment.


        :param start_command: The start_command of this ResponseExperiment.  # noqa: E501
        :type start_command: str
        """
        if self.local_vars_configuration.client_side_validation and start_command is None:  # noqa: E501
            raise ValueError("Invalid value for `start_command`, must not be `None`")  # noqa: E501

        self._start_command = start_command

    @property
    def status(self):
        """Gets the status of this ResponseExperiment.  # noqa: E501


        :return: The status of this ResponseExperiment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseExperiment.


        :param status: The status of this ResponseExperiment.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def tensorboard(self):
        """Gets the tensorboard of this ResponseExperiment.  # noqa: E501


        :return: The tensorboard of this ResponseExperiment.  # noqa: E501
        :rtype: ResponseService
        """
        return self._tensorboard

    @tensorboard.setter
    def tensorboard(self, tensorboard):
        """Sets the tensorboard of this ResponseExperiment.


        :param tensorboard: The tensorboard of this ResponseExperiment.  # noqa: E501
        :type tensorboard: ResponseService
        """
        if self.local_vars_configuration.client_side_validation and tensorboard is None:  # noqa: E501
            raise ValueError("Invalid value for `tensorboard`, must not be `None`")  # noqa: E501

        self._tensorboard = tensorboard

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseExperiment.  # noqa: E501


        :return: The updated_dt of this ResponseExperiment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseExperiment.


        :param updated_dt: The updated_dt of this ResponseExperiment.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def volumes(self):
        """Gets the volumes of this ResponseExperiment.  # noqa: E501


        :return: The volumes of this ResponseExperiment.  # noqa: E501
        :rtype: list[ResponseVolumeMountInfo]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ResponseExperiment.


        :param volumes: The volumes of this ResponseExperiment.  # noqa: E501
        :type volumes: list[ResponseVolumeMountInfo]
        """
        if self.local_vars_configuration.client_side_validation and volumes is None:  # noqa: E501
            raise ValueError("Invalid value for `volumes`, must not be `None`")  # noqa: E501

        self._volumes = volumes

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ResponseExperiment.  # noqa: E501


        :return: The workspace_id of this ResponseExperiment.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ResponseExperiment.


        :param workspace_id: The workspace_id of this ResponseExperiment.  # noqa: E501
        :type workspace_id: int
        """
        if self.local_vars_configuration.client_side_validation and workspace_id is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseExperiment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseExperiment):
            return True

        return self.to_dict() != other.to_dict()
