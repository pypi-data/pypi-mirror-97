# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from savvihub_client.configuration import Configuration


class ResponseProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'default_branch': 'str',
        'default_open_file_path': 'str',
        'description': 'str',
        'experiment_summary': 'ResponseProjectExperimentSummary',
        'git_http_url_to_repo': 'str',
        'git_owner_slug': 'str',
        'git_provider': 'str',
        'git_repo_slug': 'str',
        'git_ssh_url_to_repo': 'str',
        'id': 'int',
        'is_public': 'bool',
        'name': 'str',
        'primary_owner_id': 'int',
        'type': 'str',
        'updated_dt': 'datetime',
        'volume_id': 'int',
        'workspace': 'ResponseWorkspace',
        'workspace_id': 'int'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'default_branch': 'default_branch',
        'default_open_file_path': 'default_open_file_path',
        'description': 'description',
        'experiment_summary': 'experiment_summary',
        'git_http_url_to_repo': 'git_http_url_to_repo',
        'git_owner_slug': 'git_owner_slug',
        'git_provider': 'git_provider',
        'git_repo_slug': 'git_repo_slug',
        'git_ssh_url_to_repo': 'git_ssh_url_to_repo',
        'id': 'id',
        'is_public': 'is_public',
        'name': 'name',
        'primary_owner_id': 'primary_owner_id',
        'type': 'type',
        'updated_dt': 'updated_dt',
        'volume_id': 'volume_id',
        'workspace': 'workspace',
        'workspace_id': 'workspace_id'
    }

    def __init__(self, created_dt=None, default_branch=None, default_open_file_path=None, description=None, experiment_summary=None, git_http_url_to_repo=None, git_owner_slug=None, git_provider=None, git_repo_slug=None, git_ssh_url_to_repo=None, id=None, is_public=None, name=None, primary_owner_id=None, type=None, updated_dt=None, volume_id=None, workspace=None, workspace_id=None, local_vars_configuration=None):  # noqa: E501
        """ResponseProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._default_branch = None
        self._default_open_file_path = None
        self._description = None
        self._experiment_summary = None
        self._git_http_url_to_repo = None
        self._git_owner_slug = None
        self._git_provider = None
        self._git_repo_slug = None
        self._git_ssh_url_to_repo = None
        self._id = None
        self._is_public = None
        self._name = None
        self._primary_owner_id = None
        self._type = None
        self._updated_dt = None
        self._volume_id = None
        self._workspace = None
        self._workspace_id = None
        self.discriminator = None

        self.created_dt = created_dt
        self.default_branch = default_branch
        self.default_open_file_path = default_open_file_path
        self.description = description
        self.experiment_summary = experiment_summary
        self.git_http_url_to_repo = git_http_url_to_repo
        self.git_owner_slug = git_owner_slug
        self.git_provider = git_provider
        self.git_repo_slug = git_repo_slug
        self.git_ssh_url_to_repo = git_ssh_url_to_repo
        self.id = id
        self.is_public = is_public
        self.name = name
        self.primary_owner_id = primary_owner_id
        self.type = type
        self.updated_dt = updated_dt
        if volume_id is not None:
            self.volume_id = volume_id
        self.workspace = workspace
        self.workspace_id = workspace_id

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseProject.  # noqa: E501


        :return: The created_dt of this ResponseProject.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseProject.


        :param created_dt: The created_dt of this ResponseProject.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def default_branch(self):
        """Gets the default_branch of this ResponseProject.  # noqa: E501


        :return: The default_branch of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this ResponseProject.


        :param default_branch: The default_branch of this ResponseProject.  # noqa: E501
        :type default_branch: str
        """
        if self.local_vars_configuration.client_side_validation and default_branch is None:  # noqa: E501
            raise ValueError("Invalid value for `default_branch`, must not be `None`")  # noqa: E501

        self._default_branch = default_branch

    @property
    def default_open_file_path(self):
        """Gets the default_open_file_path of this ResponseProject.  # noqa: E501


        :return: The default_open_file_path of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._default_open_file_path

    @default_open_file_path.setter
    def default_open_file_path(self, default_open_file_path):
        """Sets the default_open_file_path of this ResponseProject.


        :param default_open_file_path: The default_open_file_path of this ResponseProject.  # noqa: E501
        :type default_open_file_path: str
        """
        if self.local_vars_configuration.client_side_validation and default_open_file_path is None:  # noqa: E501
            raise ValueError("Invalid value for `default_open_file_path`, must not be `None`")  # noqa: E501

        self._default_open_file_path = default_open_file_path

    @property
    def description(self):
        """Gets the description of this ResponseProject.  # noqa: E501


        :return: The description of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResponseProject.


        :param description: The description of this ResponseProject.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def experiment_summary(self):
        """Gets the experiment_summary of this ResponseProject.  # noqa: E501


        :return: The experiment_summary of this ResponseProject.  # noqa: E501
        :rtype: ResponseProjectExperimentSummary
        """
        return self._experiment_summary

    @experiment_summary.setter
    def experiment_summary(self, experiment_summary):
        """Sets the experiment_summary of this ResponseProject.


        :param experiment_summary: The experiment_summary of this ResponseProject.  # noqa: E501
        :type experiment_summary: ResponseProjectExperimentSummary
        """
        if self.local_vars_configuration.client_side_validation and experiment_summary is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_summary`, must not be `None`")  # noqa: E501

        self._experiment_summary = experiment_summary

    @property
    def git_http_url_to_repo(self):
        """Gets the git_http_url_to_repo of this ResponseProject.  # noqa: E501


        :return: The git_http_url_to_repo of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._git_http_url_to_repo

    @git_http_url_to_repo.setter
    def git_http_url_to_repo(self, git_http_url_to_repo):
        """Sets the git_http_url_to_repo of this ResponseProject.


        :param git_http_url_to_repo: The git_http_url_to_repo of this ResponseProject.  # noqa: E501
        :type git_http_url_to_repo: str
        """

        self._git_http_url_to_repo = git_http_url_to_repo

    @property
    def git_owner_slug(self):
        """Gets the git_owner_slug of this ResponseProject.  # noqa: E501


        :return: The git_owner_slug of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._git_owner_slug

    @git_owner_slug.setter
    def git_owner_slug(self, git_owner_slug):
        """Sets the git_owner_slug of this ResponseProject.


        :param git_owner_slug: The git_owner_slug of this ResponseProject.  # noqa: E501
        :type git_owner_slug: str
        """
        if self.local_vars_configuration.client_side_validation and git_owner_slug is None:  # noqa: E501
            raise ValueError("Invalid value for `git_owner_slug`, must not be `None`")  # noqa: E501

        self._git_owner_slug = git_owner_slug

    @property
    def git_provider(self):
        """Gets the git_provider of this ResponseProject.  # noqa: E501


        :return: The git_provider of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._git_provider

    @git_provider.setter
    def git_provider(self, git_provider):
        """Sets the git_provider of this ResponseProject.


        :param git_provider: The git_provider of this ResponseProject.  # noqa: E501
        :type git_provider: str
        """

        self._git_provider = git_provider

    @property
    def git_repo_slug(self):
        """Gets the git_repo_slug of this ResponseProject.  # noqa: E501


        :return: The git_repo_slug of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._git_repo_slug

    @git_repo_slug.setter
    def git_repo_slug(self, git_repo_slug):
        """Sets the git_repo_slug of this ResponseProject.


        :param git_repo_slug: The git_repo_slug of this ResponseProject.  # noqa: E501
        :type git_repo_slug: str
        """
        if self.local_vars_configuration.client_side_validation and git_repo_slug is None:  # noqa: E501
            raise ValueError("Invalid value for `git_repo_slug`, must not be `None`")  # noqa: E501

        self._git_repo_slug = git_repo_slug

    @property
    def git_ssh_url_to_repo(self):
        """Gets the git_ssh_url_to_repo of this ResponseProject.  # noqa: E501


        :return: The git_ssh_url_to_repo of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._git_ssh_url_to_repo

    @git_ssh_url_to_repo.setter
    def git_ssh_url_to_repo(self, git_ssh_url_to_repo):
        """Sets the git_ssh_url_to_repo of this ResponseProject.


        :param git_ssh_url_to_repo: The git_ssh_url_to_repo of this ResponseProject.  # noqa: E501
        :type git_ssh_url_to_repo: str
        """

        self._git_ssh_url_to_repo = git_ssh_url_to_repo

    @property
    def id(self):
        """Gets the id of this ResponseProject.  # noqa: E501


        :return: The id of this ResponseProject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseProject.


        :param id: The id of this ResponseProject.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_public(self):
        """Gets the is_public of this ResponseProject.  # noqa: E501


        :return: The is_public of this ResponseProject.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ResponseProject.


        :param is_public: The is_public of this ResponseProject.  # noqa: E501
        :type is_public: bool
        """
        if self.local_vars_configuration.client_side_validation and is_public is None:  # noqa: E501
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    @property
    def name(self):
        """Gets the name of this ResponseProject.  # noqa: E501


        :return: The name of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseProject.


        :param name: The name of this ResponseProject.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def primary_owner_id(self):
        """Gets the primary_owner_id of this ResponseProject.  # noqa: E501


        :return: The primary_owner_id of this ResponseProject.  # noqa: E501
        :rtype: int
        """
        return self._primary_owner_id

    @primary_owner_id.setter
    def primary_owner_id(self, primary_owner_id):
        """Sets the primary_owner_id of this ResponseProject.


        :param primary_owner_id: The primary_owner_id of this ResponseProject.  # noqa: E501
        :type primary_owner_id: int
        """
        if self.local_vars_configuration.client_side_validation and primary_owner_id is None:  # noqa: E501
            raise ValueError("Invalid value for `primary_owner_id`, must not be `None`")  # noqa: E501

        self._primary_owner_id = primary_owner_id

    @property
    def type(self):
        """Gets the type of this ResponseProject.  # noqa: E501


        :return: The type of this ResponseProject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseProject.


        :param type: The type of this ResponseProject.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseProject.  # noqa: E501


        :return: The updated_dt of this ResponseProject.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseProject.


        :param updated_dt: The updated_dt of this ResponseProject.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def volume_id(self):
        """Gets the volume_id of this ResponseProject.  # noqa: E501


        :return: The volume_id of this ResponseProject.  # noqa: E501
        :rtype: int
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this ResponseProject.


        :param volume_id: The volume_id of this ResponseProject.  # noqa: E501
        :type volume_id: int
        """

        self._volume_id = volume_id

    @property
    def workspace(self):
        """Gets the workspace of this ResponseProject.  # noqa: E501


        :return: The workspace of this ResponseProject.  # noqa: E501
        :rtype: ResponseWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this ResponseProject.


        :param workspace: The workspace of this ResponseProject.  # noqa: E501
        :type workspace: ResponseWorkspace
        """
        if self.local_vars_configuration.client_side_validation and workspace is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace`, must not be `None`")  # noqa: E501

        self._workspace = workspace

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ResponseProject.  # noqa: E501


        :return: The workspace_id of this ResponseProject.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ResponseProject.


        :param workspace_id: The workspace_id of this ResponseProject.  # noqa: E501
        :type workspace_id: int
        """
        if self.local_vars_configuration.client_side_validation and workspace_id is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseProject):
            return True

        return self.to_dict() != other.to_dict()
