# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from savvihub_client.configuration import Configuration


class ResponseSnapshot(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'file_count': 'int',
        'id': 'int',
        'name': 'str',
        'size': 'int',
        'source_volume_id': 'int',
        'status': 'str',
        'updated_dt': 'datetime',
        'used_experiment_count': 'int',
        'workspace_id': 'int'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'file_count': 'file_count',
        'id': 'id',
        'name': 'name',
        'size': 'size',
        'source_volume_id': 'source_volume_id',
        'status': 'status',
        'updated_dt': 'updated_dt',
        'used_experiment_count': 'used_experiment_count',
        'workspace_id': 'workspace_id'
    }

    def __init__(self, created_dt=None, file_count=None, id=None, name=None, size=None, source_volume_id=None, status=None, updated_dt=None, used_experiment_count=None, workspace_id=None, local_vars_configuration=None):  # noqa: E501
        """ResponseSnapshot - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._file_count = None
        self._id = None
        self._name = None
        self._size = None
        self._source_volume_id = None
        self._status = None
        self._updated_dt = None
        self._used_experiment_count = None
        self._workspace_id = None
        self.discriminator = None

        self.created_dt = created_dt
        self.file_count = file_count
        self.id = id
        self.name = name
        self.size = size
        self.source_volume_id = source_volume_id
        self.status = status
        self.updated_dt = updated_dt
        self.used_experiment_count = used_experiment_count
        self.workspace_id = workspace_id

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseSnapshot.  # noqa: E501


        :return: The created_dt of this ResponseSnapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseSnapshot.


        :param created_dt: The created_dt of this ResponseSnapshot.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def file_count(self):
        """Gets the file_count of this ResponseSnapshot.  # noqa: E501


        :return: The file_count of this ResponseSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._file_count

    @file_count.setter
    def file_count(self, file_count):
        """Sets the file_count of this ResponseSnapshot.


        :param file_count: The file_count of this ResponseSnapshot.  # noqa: E501
        :type file_count: int
        """
        if self.local_vars_configuration.client_side_validation and file_count is None:  # noqa: E501
            raise ValueError("Invalid value for `file_count`, must not be `None`")  # noqa: E501

        self._file_count = file_count

    @property
    def id(self):
        """Gets the id of this ResponseSnapshot.  # noqa: E501


        :return: The id of this ResponseSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseSnapshot.


        :param id: The id of this ResponseSnapshot.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ResponseSnapshot.  # noqa: E501


        :return: The name of this ResponseSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseSnapshot.


        :param name: The name of this ResponseSnapshot.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def size(self):
        """Gets the size of this ResponseSnapshot.  # noqa: E501


        :return: The size of this ResponseSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResponseSnapshot.


        :param size: The size of this ResponseSnapshot.  # noqa: E501
        :type size: int
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def source_volume_id(self):
        """Gets the source_volume_id of this ResponseSnapshot.  # noqa: E501


        :return: The source_volume_id of this ResponseSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._source_volume_id

    @source_volume_id.setter
    def source_volume_id(self, source_volume_id):
        """Sets the source_volume_id of this ResponseSnapshot.


        :param source_volume_id: The source_volume_id of this ResponseSnapshot.  # noqa: E501
        :type source_volume_id: int
        """
        if self.local_vars_configuration.client_side_validation and source_volume_id is None:  # noqa: E501
            raise ValueError("Invalid value for `source_volume_id`, must not be `None`")  # noqa: E501

        self._source_volume_id = source_volume_id

    @property
    def status(self):
        """Gets the status of this ResponseSnapshot.  # noqa: E501


        :return: The status of this ResponseSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseSnapshot.


        :param status: The status of this ResponseSnapshot.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseSnapshot.  # noqa: E501


        :return: The updated_dt of this ResponseSnapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseSnapshot.


        :param updated_dt: The updated_dt of this ResponseSnapshot.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def used_experiment_count(self):
        """Gets the used_experiment_count of this ResponseSnapshot.  # noqa: E501


        :return: The used_experiment_count of this ResponseSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._used_experiment_count

    @used_experiment_count.setter
    def used_experiment_count(self, used_experiment_count):
        """Sets the used_experiment_count of this ResponseSnapshot.


        :param used_experiment_count: The used_experiment_count of this ResponseSnapshot.  # noqa: E501
        :type used_experiment_count: int
        """
        if self.local_vars_configuration.client_side_validation and used_experiment_count is None:  # noqa: E501
            raise ValueError("Invalid value for `used_experiment_count`, must not be `None`")  # noqa: E501

        self._used_experiment_count = used_experiment_count

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ResponseSnapshot.  # noqa: E501


        :return: The workspace_id of this ResponseSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ResponseSnapshot.


        :param workspace_id: The workspace_id of this ResponseSnapshot.  # noqa: E501
        :type workspace_id: int
        """
        if self.local_vars_configuration.client_side_validation and workspace_id is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseSnapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseSnapshot):
            return True

        return self.to_dict() != other.to_dict()
