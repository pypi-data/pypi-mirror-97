# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from savvihub_client.configuration import Configuration


class ResponseVolume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_path': 'str',
        'bucket_name': 'str',
        'created_dt': 'datetime',
        'dataset': 'ResponseVolumeDataset',
        'deleted_dt': 'datetime',
        'experiment': 'ResponseVolumeExperiment',
        'file_count': 'int',
        'id': 'int',
        'is_read_only': 'bool',
        'last_sync_time': 'datetime',
        'owner_ref': 'int',
        'project': 'ResponseVolumeDataset',
        'role_type': 'str',
        'size': 'int',
        'snapshot_volume_id': 'int',
        'status': 'str',
        'storage_id': 'int',
        'updated_dt': 'datetime',
        'workspace': 'ResponseWorkspace',
        'workspace_id': 'int'
    }

    attribute_map = {
        'base_path': 'base_path',
        'bucket_name': 'bucket_name',
        'created_dt': 'created_dt',
        'dataset': 'dataset',
        'deleted_dt': 'deleted_dt',
        'experiment': 'experiment',
        'file_count': 'file_count',
        'id': 'id',
        'is_read_only': 'is_read_only',
        'last_sync_time': 'last_sync_time',
        'owner_ref': 'owner_ref',
        'project': 'project',
        'role_type': 'role_type',
        'size': 'size',
        'snapshot_volume_id': 'snapshot_volume_id',
        'status': 'status',
        'storage_id': 'storage_id',
        'updated_dt': 'updated_dt',
        'workspace': 'workspace',
        'workspace_id': 'workspace_id'
    }

    def __init__(self, base_path=None, bucket_name=None, created_dt=None, dataset=None, deleted_dt=None, experiment=None, file_count=None, id=None, is_read_only=None, last_sync_time=None, owner_ref=None, project=None, role_type=None, size=None, snapshot_volume_id=None, status=None, storage_id=None, updated_dt=None, workspace=None, workspace_id=None, local_vars_configuration=None):  # noqa: E501
        """ResponseVolume - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._base_path = None
        self._bucket_name = None
        self._created_dt = None
        self._dataset = None
        self._deleted_dt = None
        self._experiment = None
        self._file_count = None
        self._id = None
        self._is_read_only = None
        self._last_sync_time = None
        self._owner_ref = None
        self._project = None
        self._role_type = None
        self._size = None
        self._snapshot_volume_id = None
        self._status = None
        self._storage_id = None
        self._updated_dt = None
        self._workspace = None
        self._workspace_id = None
        self.discriminator = None

        self.base_path = base_path
        if bucket_name is not None:
            self.bucket_name = bucket_name
        self.created_dt = created_dt
        if dataset is not None:
            self.dataset = dataset
        self.deleted_dt = deleted_dt
        if experiment is not None:
            self.experiment = experiment
        self.file_count = file_count
        self.id = id
        if is_read_only is not None:
            self.is_read_only = is_read_only
        self.last_sync_time = last_sync_time
        if owner_ref is not None:
            self.owner_ref = owner_ref
        if project is not None:
            self.project = project
        self.role_type = role_type
        self.size = size
        self.snapshot_volume_id = snapshot_volume_id
        self.status = status
        self.storage_id = storage_id
        self.updated_dt = updated_dt
        self.workspace = workspace
        self.workspace_id = workspace_id

    @property
    def base_path(self):
        """Gets the base_path of this ResponseVolume.  # noqa: E501


        :return: The base_path of this ResponseVolume.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this ResponseVolume.


        :param base_path: The base_path of this ResponseVolume.  # noqa: E501
        :type base_path: str
        """
        if self.local_vars_configuration.client_side_validation and base_path is None:  # noqa: E501
            raise ValueError("Invalid value for `base_path`, must not be `None`")  # noqa: E501

        self._base_path = base_path

    @property
    def bucket_name(self):
        """Gets the bucket_name of this ResponseVolume.  # noqa: E501


        :return: The bucket_name of this ResponseVolume.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this ResponseVolume.


        :param bucket_name: The bucket_name of this ResponseVolume.  # noqa: E501
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseVolume.  # noqa: E501


        :return: The created_dt of this ResponseVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseVolume.


        :param created_dt: The created_dt of this ResponseVolume.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def dataset(self):
        """Gets the dataset of this ResponseVolume.  # noqa: E501


        :return: The dataset of this ResponseVolume.  # noqa: E501
        :rtype: ResponseVolumeDataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ResponseVolume.


        :param dataset: The dataset of this ResponseVolume.  # noqa: E501
        :type dataset: ResponseVolumeDataset
        """

        self._dataset = dataset

    @property
    def deleted_dt(self):
        """Gets the deleted_dt of this ResponseVolume.  # noqa: E501


        :return: The deleted_dt of this ResponseVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_dt

    @deleted_dt.setter
    def deleted_dt(self, deleted_dt):
        """Sets the deleted_dt of this ResponseVolume.


        :param deleted_dt: The deleted_dt of this ResponseVolume.  # noqa: E501
        :type deleted_dt: datetime
        """

        self._deleted_dt = deleted_dt

    @property
    def experiment(self):
        """Gets the experiment of this ResponseVolume.  # noqa: E501


        :return: The experiment of this ResponseVolume.  # noqa: E501
        :rtype: ResponseVolumeExperiment
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this ResponseVolume.


        :param experiment: The experiment of this ResponseVolume.  # noqa: E501
        :type experiment: ResponseVolumeExperiment
        """

        self._experiment = experiment

    @property
    def file_count(self):
        """Gets the file_count of this ResponseVolume.  # noqa: E501


        :return: The file_count of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._file_count

    @file_count.setter
    def file_count(self, file_count):
        """Sets the file_count of this ResponseVolume.


        :param file_count: The file_count of this ResponseVolume.  # noqa: E501
        :type file_count: int
        """
        if self.local_vars_configuration.client_side_validation and file_count is None:  # noqa: E501
            raise ValueError("Invalid value for `file_count`, must not be `None`")  # noqa: E501

        self._file_count = file_count

    @property
    def id(self):
        """Gets the id of this ResponseVolume.  # noqa: E501


        :return: The id of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseVolume.


        :param id: The id of this ResponseVolume.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_read_only(self):
        """Gets the is_read_only of this ResponseVolume.  # noqa: E501


        :return: The is_read_only of this ResponseVolume.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this ResponseVolume.


        :param is_read_only: The is_read_only of this ResponseVolume.  # noqa: E501
        :type is_read_only: bool
        """

        self._is_read_only = is_read_only

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this ResponseVolume.  # noqa: E501


        :return: The last_sync_time of this ResponseVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this ResponseVolume.


        :param last_sync_time: The last_sync_time of this ResponseVolume.  # noqa: E501
        :type last_sync_time: datetime
        """

        self._last_sync_time = last_sync_time

    @property
    def owner_ref(self):
        """Gets the owner_ref of this ResponseVolume.  # noqa: E501


        :return: The owner_ref of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._owner_ref

    @owner_ref.setter
    def owner_ref(self, owner_ref):
        """Sets the owner_ref of this ResponseVolume.


        :param owner_ref: The owner_ref of this ResponseVolume.  # noqa: E501
        :type owner_ref: int
        """

        self._owner_ref = owner_ref

    @property
    def project(self):
        """Gets the project of this ResponseVolume.  # noqa: E501


        :return: The project of this ResponseVolume.  # noqa: E501
        :rtype: ResponseVolumeDataset
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ResponseVolume.


        :param project: The project of this ResponseVolume.  # noqa: E501
        :type project: ResponseVolumeDataset
        """

        self._project = project

    @property
    def role_type(self):
        """Gets the role_type of this ResponseVolume.  # noqa: E501


        :return: The role_type of this ResponseVolume.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this ResponseVolume.


        :param role_type: The role_type of this ResponseVolume.  # noqa: E501
        :type role_type: str
        """
        if self.local_vars_configuration.client_side_validation and role_type is None:  # noqa: E501
            raise ValueError("Invalid value for `role_type`, must not be `None`")  # noqa: E501

        self._role_type = role_type

    @property
    def size(self):
        """Gets the size of this ResponseVolume.  # noqa: E501


        :return: The size of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResponseVolume.


        :param size: The size of this ResponseVolume.  # noqa: E501
        :type size: int
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def snapshot_volume_id(self):
        """Gets the snapshot_volume_id of this ResponseVolume.  # noqa: E501


        :return: The snapshot_volume_id of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_volume_id

    @snapshot_volume_id.setter
    def snapshot_volume_id(self, snapshot_volume_id):
        """Sets the snapshot_volume_id of this ResponseVolume.


        :param snapshot_volume_id: The snapshot_volume_id of this ResponseVolume.  # noqa: E501
        :type snapshot_volume_id: int
        """

        self._snapshot_volume_id = snapshot_volume_id

    @property
    def status(self):
        """Gets the status of this ResponseVolume.  # noqa: E501


        :return: The status of this ResponseVolume.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseVolume.


        :param status: The status of this ResponseVolume.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def storage_id(self):
        """Gets the storage_id of this ResponseVolume.  # noqa: E501


        :return: The storage_id of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this ResponseVolume.


        :param storage_id: The storage_id of this ResponseVolume.  # noqa: E501
        :type storage_id: int
        """
        if self.local_vars_configuration.client_side_validation and storage_id is None:  # noqa: E501
            raise ValueError("Invalid value for `storage_id`, must not be `None`")  # noqa: E501

        self._storage_id = storage_id

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseVolume.  # noqa: E501


        :return: The updated_dt of this ResponseVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseVolume.


        :param updated_dt: The updated_dt of this ResponseVolume.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def workspace(self):
        """Gets the workspace of this ResponseVolume.  # noqa: E501


        :return: The workspace of this ResponseVolume.  # noqa: E501
        :rtype: ResponseWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this ResponseVolume.


        :param workspace: The workspace of this ResponseVolume.  # noqa: E501
        :type workspace: ResponseWorkspace
        """
        if self.local_vars_configuration.client_side_validation and workspace is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace`, must not be `None`")  # noqa: E501

        self._workspace = workspace

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ResponseVolume.  # noqa: E501


        :return: The workspace_id of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ResponseVolume.


        :param workspace_id: The workspace_id of this ResponseVolume.  # noqa: E501
        :type workspace_id: int
        """
        if self.local_vars_configuration.client_side_validation and workspace_id is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")  # noqa: E501

        self._workspace_id = workspace_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVolume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseVolume):
            return True

        return self.to_dict() != other.to_dict()
