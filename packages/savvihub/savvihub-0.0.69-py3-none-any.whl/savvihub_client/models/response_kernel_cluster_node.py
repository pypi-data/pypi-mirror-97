# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from savvihub_client.configuration import Configuration


class ResponseKernelClusterNode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'gpu_count': 'int',
        'gpu_product_name': 'str',
        'id': 'int',
        'kernel_cluster_id': 'int',
        'name': 'str',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'gpu_count': 'gpu_count',
        'gpu_product_name': 'gpu_product_name',
        'id': 'id',
        'kernel_cluster_id': 'kernel_cluster_id',
        'name': 'name',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, created_dt=None, gpu_count=None, gpu_product_name=None, id=None, kernel_cluster_id=None, name=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """ResponseKernelClusterNode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._gpu_count = None
        self._gpu_product_name = None
        self._id = None
        self._kernel_cluster_id = None
        self._name = None
        self._updated_dt = None
        self.discriminator = None

        self.created_dt = created_dt
        self.gpu_count = gpu_count
        self.gpu_product_name = gpu_product_name
        self.id = id
        self.kernel_cluster_id = kernel_cluster_id
        self.name = name
        self.updated_dt = updated_dt

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseKernelClusterNode.  # noqa: E501


        :return: The created_dt of this ResponseKernelClusterNode.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseKernelClusterNode.


        :param created_dt: The created_dt of this ResponseKernelClusterNode.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def gpu_count(self):
        """Gets the gpu_count of this ResponseKernelClusterNode.  # noqa: E501


        :return: The gpu_count of this ResponseKernelClusterNode.  # noqa: E501
        :rtype: int
        """
        return self._gpu_count

    @gpu_count.setter
    def gpu_count(self, gpu_count):
        """Sets the gpu_count of this ResponseKernelClusterNode.


        :param gpu_count: The gpu_count of this ResponseKernelClusterNode.  # noqa: E501
        :type gpu_count: int
        """

        self._gpu_count = gpu_count

    @property
    def gpu_product_name(self):
        """Gets the gpu_product_name of this ResponseKernelClusterNode.  # noqa: E501


        :return: The gpu_product_name of this ResponseKernelClusterNode.  # noqa: E501
        :rtype: str
        """
        return self._gpu_product_name

    @gpu_product_name.setter
    def gpu_product_name(self, gpu_product_name):
        """Sets the gpu_product_name of this ResponseKernelClusterNode.


        :param gpu_product_name: The gpu_product_name of this ResponseKernelClusterNode.  # noqa: E501
        :type gpu_product_name: str
        """

        self._gpu_product_name = gpu_product_name

    @property
    def id(self):
        """Gets the id of this ResponseKernelClusterNode.  # noqa: E501


        :return: The id of this ResponseKernelClusterNode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseKernelClusterNode.


        :param id: The id of this ResponseKernelClusterNode.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kernel_cluster_id(self):
        """Gets the kernel_cluster_id of this ResponseKernelClusterNode.  # noqa: E501


        :return: The kernel_cluster_id of this ResponseKernelClusterNode.  # noqa: E501
        :rtype: int
        """
        return self._kernel_cluster_id

    @kernel_cluster_id.setter
    def kernel_cluster_id(self, kernel_cluster_id):
        """Sets the kernel_cluster_id of this ResponseKernelClusterNode.


        :param kernel_cluster_id: The kernel_cluster_id of this ResponseKernelClusterNode.  # noqa: E501
        :type kernel_cluster_id: int
        """
        if self.local_vars_configuration.client_side_validation and kernel_cluster_id is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_cluster_id`, must not be `None`")  # noqa: E501

        self._kernel_cluster_id = kernel_cluster_id

    @property
    def name(self):
        """Gets the name of this ResponseKernelClusterNode.  # noqa: E501


        :return: The name of this ResponseKernelClusterNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseKernelClusterNode.


        :param name: The name of this ResponseKernelClusterNode.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseKernelClusterNode.  # noqa: E501


        :return: The updated_dt of this ResponseKernelClusterNode.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseKernelClusterNode.


        :param updated_dt: The updated_dt of this ResponseKernelClusterNode.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseKernelClusterNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseKernelClusterNode):
            return True

        return self.to_dict() != other.to_dict()
