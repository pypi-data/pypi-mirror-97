from abc import ABC, abstractmethod

import numpy

from simses.analysis.data.energy_management import EnergyManagementData
from simses.analysis.data.system import SystemData
from simses.analysis.evaluation.result import EvaluationResult
from simses.commons.config.analysis.economic import EconomicAnalysisConfig


class RevenueStream(ABC):
    """Calculates the cashflow for each project year that is generated by the given RevenueStream.
    A RevenueStream can be seen as the financial impact of the various applications of a BESS such as peak shaving,
    self-consumption, frequency containment reserve, etc.. """

    def __init__(self, energy_management_data: EnergyManagementData, system_data: SystemData,
                 economic_analysis_config: EconomicAnalysisConfig):
        self._energy_management_data: EnergyManagementData = energy_management_data
        self._system_data: SystemData = system_data
        self._economic_analysis_config: EconomicAnalysisConfig = economic_analysis_config
        self._investment_cost: float = 0.0

    @abstractmethod
    def get_cashflow(self) -> numpy.ndarray:
        """
        Returns non-discounted cashflow for every project year for the given RevenueStream.

        Returns
        -------
        list of float
            List of cashflow for every project year
        """
        pass

    @abstractmethod
    def get_evaluation_results(self) -> [EvaluationResult]:
        """
        Returns list of EvaluationResults for the given RevenueStream.

        Returns
        -------
        list of EvaluationResult
            List of EvaluationResults
        """
        pass

    @abstractmethod
    def get_assumptions(self) -> [EvaluationResult]:
        """
        Returns list of assumptions for the given RevenueStream. Assumptions are handled with the
        EvaluationResults class.

        Returns
        -------
        list of EvaluationResult
            List of EvaluationResults, representing assumptions
        """
        pass

    def set_investment_cost(self, value: float) -> None:
        self._investment_cost = value

    @abstractmethod
    def close(self):
        pass
