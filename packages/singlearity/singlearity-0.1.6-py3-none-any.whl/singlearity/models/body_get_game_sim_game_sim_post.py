# coding: utf-8

"""
    Singlearity Baseball API

    Baseball optimization API using machine learning  # noqa: E501

    The version of the OpenAPI document: 0.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from singlearity.configuration import Configuration


class BodyGetGameSimGameSimPost(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'game': 'Game',
        'start_state': 'State'
    }

    attribute_map = {
        'game': 'game',
        'start_state': 'start_state'
    }

    def __init__(self, game=None, start_state=None, local_vars_configuration=None):  # noqa: E501
        """BodyGetGameSimGameSimPost - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._game = None
        self._start_state = None
        self.discriminator = None

        self.game = game
        if start_state is not None:
            self.start_state = start_state

    @property
    def game(self):
        """Gets the game of this BodyGetGameSimGameSimPost.  # noqa: E501


        :return: The game of this BodyGetGameSimGameSimPost.  # noqa: E501
        :rtype: Game
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this BodyGetGameSimGameSimPost.


        :param game: The game of this BodyGetGameSimGameSimPost.  # noqa: E501
        :type: Game
        """
        if self.local_vars_configuration.client_side_validation and game is None:  # noqa: E501
            raise ValueError("Invalid value for `game`, must not be `None`")  # noqa: E501

        self._game = game

    @property
    def start_state(self):
        """Gets the start_state of this BodyGetGameSimGameSimPost.  # noqa: E501


        :return: The start_state of this BodyGetGameSimGameSimPost.  # noqa: E501
        :rtype: State
        """
        return self._start_state

    @start_state.setter
    def start_state(self, start_state):
        """Sets the start_state of this BodyGetGameSimGameSimPost.


        :param start_state: The start_state of this BodyGetGameSimGameSimPost.  # noqa: E501
        :type: State
        """

        self._start_state = start_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyGetGameSimGameSimPost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BodyGetGameSimGameSimPost):
            return True

        return self.to_dict() != other.to_dict()
