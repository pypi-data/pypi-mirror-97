# coding: utf-8

"""
    Singlearity Baseball API

    Baseball optimization API using machine learning  # noqa: E501

    The version of the OpenAPI document: 0.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from singlearity.configuration import Configuration


class Game(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'home_lineup': 'Lineup',
        'visit_lineup': 'Lineup',
        'atmosphere': 'Atmosphere',
        'date': 'str'
    }

    attribute_map = {
        'home_lineup': 'home_lineup',
        'visit_lineup': 'visit_lineup',
        'atmosphere': 'atmosphere',
        'date': 'date'
    }

    def __init__(self, home_lineup=None, visit_lineup=None, atmosphere=None, date='2019-09-29', local_vars_configuration=None):  # noqa: E501
        """Game - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._home_lineup = None
        self._visit_lineup = None
        self._atmosphere = None
        self._date = None
        self.discriminator = None

        self.home_lineup = home_lineup
        self.visit_lineup = visit_lineup
        self.atmosphere = atmosphere
        if date is not None:
            self.date = date

    @property
    def home_lineup(self):
        """Gets the home_lineup of this Game.  # noqa: E501


        :return: The home_lineup of this Game.  # noqa: E501
        :rtype: Lineup
        """
        return self._home_lineup

    @home_lineup.setter
    def home_lineup(self, home_lineup):
        """Sets the home_lineup of this Game.


        :param home_lineup: The home_lineup of this Game.  # noqa: E501
        :type: Lineup
        """
        if self.local_vars_configuration.client_side_validation and home_lineup is None:  # noqa: E501
            raise ValueError("Invalid value for `home_lineup`, must not be `None`")  # noqa: E501

        self._home_lineup = home_lineup

    @property
    def visit_lineup(self):
        """Gets the visit_lineup of this Game.  # noqa: E501


        :return: The visit_lineup of this Game.  # noqa: E501
        :rtype: Lineup
        """
        return self._visit_lineup

    @visit_lineup.setter
    def visit_lineup(self, visit_lineup):
        """Sets the visit_lineup of this Game.


        :param visit_lineup: The visit_lineup of this Game.  # noqa: E501
        :type: Lineup
        """
        if self.local_vars_configuration.client_side_validation and visit_lineup is None:  # noqa: E501
            raise ValueError("Invalid value for `visit_lineup`, must not be `None`")  # noqa: E501

        self._visit_lineup = visit_lineup

    @property
    def atmosphere(self):
        """Gets the atmosphere of this Game.  # noqa: E501


        :return: The atmosphere of this Game.  # noqa: E501
        :rtype: Atmosphere
        """
        return self._atmosphere

    @atmosphere.setter
    def atmosphere(self, atmosphere):
        """Sets the atmosphere of this Game.


        :param atmosphere: The atmosphere of this Game.  # noqa: E501
        :type: Atmosphere
        """
        if self.local_vars_configuration.client_side_validation and atmosphere is None:  # noqa: E501
            raise ValueError("Invalid value for `atmosphere`, must not be `None`")  # noqa: E501

        self._atmosphere = atmosphere

    @property
    def date(self):
        """Gets the date of this Game.  # noqa: E501


        :return: The date of this Game.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Game.


        :param date: The date of this Game.  # noqa: E501
        :type: str
        """

        self._date = date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Game):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Game):
            return True

        return self.to_dict() != other.to_dict()
