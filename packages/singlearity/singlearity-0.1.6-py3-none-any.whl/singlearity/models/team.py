# coding: utf-8

"""
    Singlearity Baseball API

    Baseball optimization API using machine learning  # noqa: E501

    The version of the OpenAPI document: 0.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from singlearity.configuration import Configuration


class Team(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abbreviation': 'str',
        'division': 'str',
        'league': 'str',
        'id': 'int',
        'name': 'str',
        'team_name': 'str',
        'venue': 'Venue'
    }

    attribute_map = {
        'abbreviation': 'abbreviation',
        'division': 'division',
        'league': 'league',
        'id': 'id',
        'name': 'name',
        'team_name': 'team_name',
        'venue': 'venue'
    }

    def __init__(self, abbreviation=None, division=None, league=None, id=None, name=None, team_name=None, venue=None, local_vars_configuration=None):  # noqa: E501
        """Team - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._abbreviation = None
        self._division = None
        self._league = None
        self._id = None
        self._name = None
        self._team_name = None
        self._venue = None
        self.discriminator = None

        self.abbreviation = abbreviation
        self.division = division
        self.league = league
        self.id = id
        self.name = name
        self.team_name = team_name
        self.venue = venue

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Team.  # noqa: E501


        :return: The abbreviation of this Team.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Team.


        :param abbreviation: The abbreviation of this Team.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and abbreviation is None:  # noqa: E501
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def division(self):
        """Gets the division of this Team.  # noqa: E501


        :return: The division of this Team.  # noqa: E501
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this Team.


        :param division: The division of this Team.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and division is None:  # noqa: E501
            raise ValueError("Invalid value for `division`, must not be `None`")  # noqa: E501

        self._division = division

    @property
    def league(self):
        """Gets the league of this Team.  # noqa: E501


        :return: The league of this Team.  # noqa: E501
        :rtype: str
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this Team.


        :param league: The league of this Team.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and league is None:  # noqa: E501
            raise ValueError("Invalid value for `league`, must not be `None`")  # noqa: E501

        self._league = league

    @property
    def id(self):
        """Gets the id of this Team.  # noqa: E501


        :return: The id of this Team.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.


        :param id: The id of this Team.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Team.  # noqa: E501


        :return: The name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.


        :param name: The name of this Team.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def team_name(self):
        """Gets the team_name of this Team.  # noqa: E501


        :return: The team_name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this Team.


        :param team_name: The team_name of this Team.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and team_name is None:  # noqa: E501
            raise ValueError("Invalid value for `team_name`, must not be `None`")  # noqa: E501

        self._team_name = team_name

    @property
    def venue(self):
        """Gets the venue of this Team.  # noqa: E501


        :return: The venue of this Team.  # noqa: E501
        :rtype: Venue
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this Team.


        :param venue: The venue of this Team.  # noqa: E501
        :type: Venue
        """
        if self.local_vars_configuration.client_side_validation and venue is None:  # noqa: E501
            raise ValueError("Invalid value for `venue`, must not be `None`")  # noqa: E501

        self._venue = venue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Team):
            return True

        return self.to_dict() != other.to_dict()
