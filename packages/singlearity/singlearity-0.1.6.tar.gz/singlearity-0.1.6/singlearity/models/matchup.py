# coding: utf-8

"""
    Singlearity Baseball API

    Baseball optimization API using machine learning  # noqa: E501

    The version of the OpenAPI document: 0.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from singlearity.configuration import Configuration


class Matchup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batter': 'Player',
        'pitcher': 'Player',
        'atmosphere': 'Atmosphere',
        'state': 'State',
        'date': 'date'
    }

    attribute_map = {
        'batter': 'batter',
        'pitcher': 'pitcher',
        'atmosphere': 'atmosphere',
        'state': 'state',
        'date': 'date'
    }

    def __init__(self, batter=None, pitcher=None, atmosphere=None, state=None, date=None, local_vars_configuration=None):  # noqa: E501
        """Matchup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._batter = None
        self._pitcher = None
        self._atmosphere = None
        self._state = None
        self._date = None
        self.discriminator = None

        self.batter = batter
        self.pitcher = pitcher
        self.atmosphere = atmosphere
        self.state = state
        if date is not None:
            self.date = date

    @property
    def batter(self):
        """Gets the batter of this Matchup.  # noqa: E501


        :return: The batter of this Matchup.  # noqa: E501
        :rtype: Player
        """
        return self._batter

    @batter.setter
    def batter(self, batter):
        """Sets the batter of this Matchup.


        :param batter: The batter of this Matchup.  # noqa: E501
        :type: Player
        """
        if self.local_vars_configuration.client_side_validation and batter is None:  # noqa: E501
            raise ValueError("Invalid value for `batter`, must not be `None`")  # noqa: E501

        self._batter = batter

    @property
    def pitcher(self):
        """Gets the pitcher of this Matchup.  # noqa: E501


        :return: The pitcher of this Matchup.  # noqa: E501
        :rtype: Player
        """
        return self._pitcher

    @pitcher.setter
    def pitcher(self, pitcher):
        """Sets the pitcher of this Matchup.


        :param pitcher: The pitcher of this Matchup.  # noqa: E501
        :type: Player
        """
        if self.local_vars_configuration.client_side_validation and pitcher is None:  # noqa: E501
            raise ValueError("Invalid value for `pitcher`, must not be `None`")  # noqa: E501

        self._pitcher = pitcher

    @property
    def atmosphere(self):
        """Gets the atmosphere of this Matchup.  # noqa: E501


        :return: The atmosphere of this Matchup.  # noqa: E501
        :rtype: Atmosphere
        """
        return self._atmosphere

    @atmosphere.setter
    def atmosphere(self, atmosphere):
        """Sets the atmosphere of this Matchup.


        :param atmosphere: The atmosphere of this Matchup.  # noqa: E501
        :type: Atmosphere
        """
        if self.local_vars_configuration.client_side_validation and atmosphere is None:  # noqa: E501
            raise ValueError("Invalid value for `atmosphere`, must not be `None`")  # noqa: E501

        self._atmosphere = atmosphere

    @property
    def state(self):
        """Gets the state of this Matchup.  # noqa: E501


        :return: The state of this Matchup.  # noqa: E501
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Matchup.


        :param state: The state of this Matchup.  # noqa: E501
        :type: State
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def date(self):
        """Gets the date of this Matchup.  # noqa: E501


        :return: The date of this Matchup.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Matchup.


        :param date: The date of this Matchup.  # noqa: E501
        :type: date
        """

        self._date = date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Matchup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Matchup):
            return True

        return self.to_dict() != other.to_dict()
