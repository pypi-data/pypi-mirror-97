<?xml version="1.0"?>
<regs:peripheral xmlns:regs="http://swtools.freescale.net/XSD/registers/3.0/regsPeripheral.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://swtools.freescale.net/XSD/registers/3.0/regsPeripheral.xsd http://swtools.freescale.net/XSD/registers/3.0/regsPeripheral.xsd">
  <register offset="0" width="32" name="BOOT_CFG" description=".">
    <alias type="CMSIS" value="BOOT_CFG"/>
    <reserved_bit_field offset="0" width="4" reset_value="0"/>
    <bit_field offset="4" width="3" name="DEFAULT_ISP_MODE" access="RW" reset_value="0" description="Default ISP mode:">
      <alias type="CMSIS" value="FLASH_CMPA_BOOT_CFG_DEFAULT_ISP_MODE(x)"/>
      <bit_field_value name="BOOT_CFG_DEFAULT_ISP_MODE_VALUE_0" value="0b000" description="Auto ISP"/>
      <bit_field_value name="BOOT_CFG_DEFAULT_ISP_MODE_VALUE_1" value="0b001" description="USB_HID_MSC"/>
      <bit_field_value name="BOOT_CFG_DEFAULT_ISP_MODE_VALUE_2" value="0b010" description="SPI Slave ISP"/>
      <bit_field_value name="BOOT_CFG_DEFAULT_ISP_MODE_VALUE_3" value="0b011" description="I2C Slave ISP"/>
      <bit_field_value name="BOOT_CFG_DEFAULT_ISP_MODE_VALUE_7" value="0b111" description="Disable ISP fall through"/>
    </bit_field>
    <bit_field offset="7" width="2" name="BOOT_SPEED" access="RW" reset_value="0" description="Core clock:">
      <alias type="CMSIS" value="FLASH_CMPA_BOOT_CFG_BOOT_SPEED(x)"/>
      <bit_field_value name="BOOT_CFG_BOOT_SPEED_VALUE_0" value="0b00" description="Defined by NMPA.SYSTEM_SPEED_CODE"/>
      <bit_field_value name="BOOT_CFG_BOOT_SPEED_VALUE_1" value="0b01" description="96MHz FRO"/>
      <bit_field_value name="BOOT_CFG_BOOT_SPEED_VALUE_2" value="0b10" description="48MHz FRO"/>
    </bit_field>
    <reserved_bit_field offset="9" width="15" reset_value="0"/>
    <bit_field offset="24" width="8" name="BOOT_FAILURE_PIN" access="RW" reset_value="0" description="GPIO port and pin number to use for indicating failure reason. The toggle rate of the pin is used to decode the error type. [2:0] - Defines GPIO port [7:3] - Defines GPIO pin">
      <alias type="CMSIS" value="FLASH_CMPA_BOOT_CFG_BOOT_FAILURE_PIN(x)"/>
    </bit_field>
  </register>
  <register offset="0x4" width="32" name="SPI_FLASH_CFG" description=".">
    <alias type="CMSIS" value="SPI_FLASH_CFG"/>
    <bit_field offset="0" width="5" name="SPI_RECOVERY_BOOT_EN" access="RW" reset_value="0" description="SPI flash recovery boot is enabled, if non-zero value is written to this field.">
      <alias type="CMSIS" value="FLASH_CMPA_SPI_FLASH_CFG_SPI_RECOVERY_BOOT_EN(x)"/>
    </bit_field>
    <reserved_bit_field offset="5" width="27" reset_value="0"/>
  </register>
  <register offset="0x8" width="32" name="USB_ID" description=".">
    <alias type="CMSIS" value="USB_ID"/>
    <bit_field offset="0" width="16" name="USB_VENDOR_ID" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_USB_ID_USB_VENDOR_ID(x)"/>
    </bit_field>
    <bit_field offset="16" width="16" name="USB_PRODUCT_ID" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_USB_ID_USB_PRODUCT_ID(x)"/>
    </bit_field>
  </register>
  <register offset="0xC" width="32" name="SDIO_CFG" description=".">
    <alias type="CMSIS" value="SDIO_CFG"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_SDIO_CFG_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x10" width="32" name="CC_SOCU_PIN" description=".">
    <alias type="CMSIS" value="CC_SOCU_PIN"/>
    <bit_field offset="0" width="1" name="NIDEN" access="RW" reset_value="0" description="Non Secure non-invasive debug enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_NIDEN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_NIDEN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_NIDEN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <bit_field offset="1" width="1" name="DBGEN" access="RW" reset_value="0" description="Non Secure debug enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_DBGEN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_DBGEN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_DBGEN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <bit_field offset="2" width="1" name="SPNIDEN" access="RW" reset_value="0" description="Secure non-invasive debug enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_SPNIDEN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_SPNIDEN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_SPNIDEN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <bit_field offset="3" width="1" name="SPIDEN" access="RW" reset_value="0" description="Secure invasive debug enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_SPIDEN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_SPIDEN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_SPIDEN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <bit_field offset="4" width="1" name="TAPEN" access="RW" reset_value="0" description="JTAG TAP enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_TAPEN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_TAPEN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_TAPEN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <bit_field offset="5" width="1" name="CPU1_DBGEN" access="RW" reset_value="0" description="CPU1 (Micro cortex M33) invasive debug enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_CPU1_DBGEN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_CPU1_DBGEN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_CPU1_DBGEN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <bit_field offset="6" width="1" name="ISP_CMD_EN" access="RW" reset_value="0" description="ISP Boot Command enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_ISP_CMD_EN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_ISP_CMD_EN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_ISP_CMD_EN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <bit_field offset="7" width="1" name="FA_CMD_EN" access="RW" reset_value="0" description="FA Command enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_FA_CMD_EN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_FA_CMD_EN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_FA_CMD_EN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <bit_field offset="8" width="1" name="ME_CMD_EN" access="RW" reset_value="0" description="Flash Mass Erase Command enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_ME_CMD_EN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_ME_CMD_EN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_ME_CMD_EN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <bit_field offset="9" width="1" name="CPU1_NIDEN" access="RW" reset_value="0" description="CPU1 (Micro cortex M33) non-invasive debug enable">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_CPU1_NIDEN(x)"/>
      <bit_field_value name="CC_SOCU_PIN_CPU1_NIDEN_VALUE_0" value="0b0" description="Use DAP to enable"/>
      <bit_field_value name="CC_SOCU_PIN_CPU1_NIDEN_VALUE_1" value="0b1" description="Fixed state"/>
    </bit_field>
    <reserved_bit_field offset="10" width="5" reset_value="0"/>
    <bit_field offset="15" width="1" name="UUID_CHECK" access="RW" reset_value="0" description="Enforce UUID match during Debug authentication.">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_UUID_CHECK(x)"/>
    </bit_field>
    <bit_field offset="16" width="16" name="INVERSE_VALUE" access="RW" reset_value="0" description="inverse value of bits [15:0]">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_PIN_INVERSE_VALUE(x)"/>
    </bit_field>
  </register>
  <register offset="0x14" width="32" name="CC_SOCU_DFLT" description=".">
    <alias type="CMSIS" value="CC_SOCU_DFLT"/>
    <bit_field offset="0" width="1" name="NIDEN" access="RW" reset_value="0" description="Non Secure non-invasive debug fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_NIDEN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_NIDEN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_NIDEN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <bit_field offset="1" width="1" name="DBGEN" access="RW" reset_value="0" description="Non Secure debug fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_DBGEN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_DBGEN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_DBGEN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <bit_field offset="2" width="1" name="SPNIDEN" access="RW" reset_value="0" description="Secure non-invasive debug fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_SPNIDEN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_SPNIDEN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_SPNIDEN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <bit_field offset="3" width="1" name="SPIDEN" access="RW" reset_value="0" description="Secure invasive debug fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_SPIDEN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_SPIDEN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_SPIDEN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <bit_field offset="4" width="1" name="TAPEN" access="RW" reset_value="0" description="JTAG TAP fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_TAPEN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_TAPEN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_TAPEN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <bit_field offset="5" width="1" name="CPU1_DBGEN" access="RW" reset_value="0" description="CPU1 (Micro cortex M33) invasive debug fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_CPU1_DBGEN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_CPU1_DBGEN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_CPU1_DBGEN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <bit_field offset="6" width="1" name="ISP_CMD_EN" access="RW" reset_value="0" description="ISP Boot Command fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_ISP_CMD_EN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_ISP_CMD_EN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_ISP_CMD_EN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <bit_field offset="7" width="1" name="FA_CMD_EN" access="RW" reset_value="0" description="FA Command fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_FA_CMD_EN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_FA_CMD_EN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_FA_CMD_EN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <bit_field offset="8" width="1" name="ME_CMD_EN" access="RW" reset_value="0" description="Flash Mass Erase Command fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_ME_CMD_EN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_ME_CMD_EN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_ME_CMD_EN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <bit_field offset="9" width="1" name="CPU1_NIDEN" access="RW" reset_value="0" description="CPU1 (Micro cortex M33) non-invasive debug fixed state">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_CPU1_NIDEN(x)"/>
      <bit_field_value name="CC_SOCU_DFLT_CPU1_NIDEN_DISABLE" value="0b0" description="Disable"/>
      <bit_field_value name="CC_SOCU_DFLT_CPU1_NIDEN_ENABLE" value="0b1" description="Enable"/>
    </bit_field>
    <reserved_bit_field offset="10" width="6" reset_value="0"/>
    <bit_field offset="16" width="16" name="INVERSE_VALUE" access="RW" reset_value="0" description="inverse value of bits [15:0]">
      <alias type="CMSIS" value="FLASH_CMPA_CC_SOCU_DFLT_INVERSE_VALUE(x)"/>
    </bit_field>
  </register>
  <register offset="0x18" width="32" name="VENDOR_USAGE" description=".">
    <alias type="CMSIS" value="VENDOR_USAGE"/>
    <reserved_bit_field offset="0" width="16" reset_value="0"/>
    <bit_field offset="16" width="16" name="VENDOR_USAGE" access="RW" reset_value="0" description="Upper 16 bits of vendor usage field defined in DAP. Lower 16-bits come from customer field area.">
      <alias type="CMSIS" value="FLASH_CMPA_VENDOR_USAGE_VENDOR_USAGE(x)"/>
    </bit_field>
  </register>
  <register offset="0x1C" width="32" name="SECURE_BOOT_CFG" description=".">
    <alias type="CMSIS" value="SECURE_BOOT_CFG"/>
    <bit_field offset="0" width="2" name="RSA4K" access="RW" reset_value="0" description="Use RSA4096 keys only. 00- RSA2048 keys 01, 10, 11 - RSA4096 keys">
      <alias type="CMSIS" value="FLASH_CMPA_SECURE_BOOT_CFG_RSA4K(x)"/>
    </bit_field>
    <bit_field offset="2" width="2" name="DICE_ENC_NXP_CFG" access="RW" reset_value="0" description="Include NXP area in DICE computation. 00 - not included 01, 10, 11 - included">
      <alias type="CMSIS" value="FLASH_CMPA_SECURE_BOOT_CFG_DICE_ENC_NXP_CFG(x)"/>
    </bit_field>
    <bit_field offset="4" width="2" name="DICE_CUST_CFG" access="RW" reset_value="0" description="Include Customer factory area (including keys) in DICE computation. 00 - not included 01, 10, 11 - included">
      <alias type="CMSIS" value="FLASH_CMPA_SECURE_BOOT_CFG_DICE_CUST_CFG(x)"/>
    </bit_field>
    <bit_field offset="6" width="2" name="SKIP_DICE" access="RW" reset_value="0" description="Skip DICE computation. 00 - Enable DICE 01,10,11 - Disable DICE">
      <alias type="CMSIS" value="FLASH_CMPA_SECURE_BOOT_CFG_SKIP_DICE(x)"/>
    </bit_field>
    <bit_field offset="8" width="2" name="TZM_IMAGE_TYPE" access="RW" reset_value="0" description="TrustZone-M mode. 00 - TZM mode in image header. 01 - Disable TZ-M. Boots to NonSecure. 10 - TZ-M enable boots to secure mode. 11 - Preset TZM checker from image header.">
      <alias type="CMSIS" value="FLASH_CMPA_SECURE_BOOT_CFG_TZM_IMAGE_TYPE(x)"/>
    </bit_field>
    <bit_field offset="10" width="2" name="BLOCK_SET_KEY" access="RW" reset_value="0" description="Block PUF key code generation. 00 - Enable Key code generation 01, 10, 11 - Disable key code generation">
      <alias type="CMSIS" value="FLASH_CMPA_SECURE_BOOT_CFG_BLOCK_SET_KEY(x)"/>
    </bit_field>
    <bit_field offset="12" width="2" name="BLOCK_ENROLL" access="RW" reset_value="0" description="Block PUF enrollement. 00 - Enable enrollment mode 01, 10, 11 - Disable further enrollmnet">
      <alias type="CMSIS" value="FLASH_CMPA_SECURE_BOOT_CFG_BLOCK_ENROLL(x)"/>
    </bit_field>
    <bit_field offset="14" width="2" name="DICE_INC_SEC_EPOCH" access="RW" reset_value="0" description="Include security EPOCH in DICE">
      <alias type="CMSIS" value="FLASH_CMPA_SECURE_BOOT_CFG_DICE_INC_SEC_EPOCH(x)"/>
    </bit_field>
    <reserved_bit_field offset="16" width="14" reset_value="0"/>
    <bit_field offset="30" width="2" name="SEC_BOOT_EN" access="RW" reset_value="0" description="Secure boot enable. 00 - Plain image (internal flash with or without CRC) 01, 10, 11 - Boot signed images. (internal flash, RSA signed)">
      <alias type="CMSIS" value="FLASH_CMPA_SECURE_BOOT_CFG_SEC_BOOT_EN(x)"/>
    </bit_field>
  </register>
  <register offset="0x20" width="32" name="PRINCE_BASE_ADDR" description=".">
    <alias type="CMSIS" value="PRINCE_BASE_ADDR"/>
    <bit_field offset="0" width="4" name="ADDR0_PRG" access="RW" reset_value="0" description="Programmable portion of the base address of region 0.">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_BASE_ADDR_ADDR0_PRG(x)"/>
    </bit_field>
    <bit_field offset="4" width="4" name="ADDR1_PRG" access="RW" reset_value="0" description="Programmable portion of the base address of region 1.">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_BASE_ADDR_ADDR1_PRG(x)"/>
    </bit_field>
    <bit_field offset="8" width="4" name="ADDR2_PRG" access="RW" reset_value="0" description="Programmable portion of the base address of region 2.">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_BASE_ADDR_ADDR2_PRG(x)"/>
    </bit_field>
    <reserved_bit_field offset="12" width="6" reset_value="0"/>
<!--    <bit_field offset="16" width="2" name="LOCK_REG0_old" access="RW" reset_value="0" description="Lock PRINCE region0 settings. 00 - Region is not locked. 01, 10, 11 - Region is locked.">-->
<!--      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_BASE_ADDR_LOCK_REG0(x)"/>-->
<!--    </bit_field>-->
    <bit_field offset="18" width="2" name="LOCK_REG0" access="RW" reset_value="0" description="Lock PRINCE region0 settings. 00 - Region is not locked. 01, 10, 11 - Region is locked.">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_BASE_ADDR_LOCK_REG0(x)"/>
    </bit_field>
    <bit_field offset="20" width="2" name="LOCK_REG1" access="RW" reset_value="0" description="Lock PRINCE region1 settings. 00 - Region is not locked. 01, 10, 11 - Region is locked.">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_BASE_ADDR_LOCK_REG1(x)"/>
    </bit_field>
    <reserved_bit_field offset="22" width="2" reset_value="0"/>
    <bit_field offset="24" width="2" name="REG0_ERASE_CHECK_EN" access="RW" reset_value="0" description="For PRINCE region0 enable checking whether all encrypted pages are erased together. 00 - Check is disabled. 01, 10, 11 - Check is enabled.">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_BASE_ADDR_REG0_ERASE_CHECK_EN(x)"/>
    </bit_field>
    <bit_field offset="26" width="2" name="REG1_ERASE_CHECK_EN" access="RW" reset_value="0" description="For PRINCE region1 enable checking whether all encrypted pages are erased together. 00 - Check is disabled. 01, 10, 11 - Check is enabled.">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_BASE_ADDR_REG1_ERASE_CHECK_EN(x)"/>
    </bit_field>
    <bit_field offset="28" width="2" name="REG2_ERASE_CHECK_EN" access="RW" reset_value="0" description="For PRINCE region2 enable checking whether all encrypted pages are erased together. 00 - Check is disabled. 01, 10, 11 - Check is enabled.">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_BASE_ADDR_REG2_ERASE_CHECK_EN(x)"/>
    </bit_field>
    <reserved_bit_field offset="30" width="2" reset_value="0"/>
  </register>
  <register offset="0x24" width="32" name="PRINCE_SR_0" description="Region 0, sub-region enable">
    <alias type="CMSIS" value="PRINCE_SR_0"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_SR_0_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x28" width="32" name="PRINCE_SR_1" description="Region 1, sub-region enable">
    <alias type="CMSIS" value="PRINCE_SR_1"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_SR_1_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x2C" width="32" name="PRINCE_SR_2" description="Region 2, sub-region enable">
    <alias type="CMSIS" value="PRINCE_SR_2"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_PRINCE_SR_2_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x30" width="32" name="XTAL_32KHZ_CAPABANK_TRIM" description="Xtal 32kHz capabank triming.">
    <alias type="CMSIS" value="XTAL_32KHZ_CAPABANK_TRIM"/>
    <bit_field offset="0" width="1" name="TRIM_VALID" access="RW" reset_value="0" description="0 : Capa Bank trimmings not valid. Default trimmings value are used. 1 : Capa Bank trimmings valid.">
      <alias type="CMSIS" value="FLASH_CMPA_XTAL_32KHZ_CAPABANK_TRIM_TRIM_VALID(x)"/>
    </bit_field>
    <bit_field offset="1" width="10" name="XTAL_LOAD_CAP_IEC_PF_X100" access="RW" reset_value="0" description="Load capacitance, pF x 100. For example, 6pF becomes 600.">
      <alias type="CMSIS" value="FLASH_CMPA_XTAL_32KHZ_CAPABANK_TRIM_XTAL_LOAD_CAP_IEC_PF_X100(x)"/>
    </bit_field>
    <bit_field offset="11" width="10" name="PCB_XIN_PARA_CAP_PF_X100" access="RW" reset_value="0" description="PCB XIN parasitic capacitance, pF x 100. For example, 6pF becomes 600.">
      <alias type="CMSIS" value="FLASH_CMPA_XTAL_32KHZ_CAPABANK_TRIM_PCB_XIN_PARA_CAP_PF_X100(x)"/>
    </bit_field>
    <bit_field offset="21" width="10" name="PCB_XOUT_PARA_CAP_PF_X100" access="RW" reset_value="0" description="PCB XOUT parasitic capacitance, pF x 100. For example, 6pF becomes 600.">
      <alias type="CMSIS" value="FLASH_CMPA_XTAL_32KHZ_CAPABANK_TRIM_PCB_XOUT_PARA_CAP_PF_X100(x)"/>
    </bit_field>
    <reserved_bit_field offset="31" width="1" reset_value="0"/>
  </register>
  <register offset="0x34" width="32" name="XTAL_16MHZ_CAPABANK_TRIM" description="Xtal 16MHz capabank triming.">
    <alias type="CMSIS" value="XTAL_16MHZ_CAPABANK_TRIM"/>
    <bit_field offset="0" width="1" name="TRIM_VALID" access="RW" reset_value="0" description="0 : Capa Bank trimmings not valid. Default trimmings value are used. 1 : Capa Bank trimmings valid.">
      <alias type="CMSIS" value="FLASH_CMPA_XTAL_16MHZ_CAPABANK_TRIM_TRIM_VALID(x)"/>
    </bit_field>
    <bit_field offset="1" width="10" name="XTAL_LOAD_CAP_IEC_PF_X100" access="RW" reset_value="0" description="Load capacitance, pF x 100. For example, 6pF becomes 600.">
      <alias type="CMSIS" value="FLASH_CMPA_XTAL_16MHZ_CAPABANK_TRIM_XTAL_LOAD_CAP_IEC_PF_X100(x)"/>
    </bit_field>
    <bit_field offset="11" width="10" name="PCB_XIN_PARA_CAP_PF_X100" access="RW" reset_value="0" description="PCB XIN parasitic capacitance, pF x 100. For example, 6pF becomes 600.">
      <alias type="CMSIS" value="FLASH_CMPA_XTAL_16MHZ_CAPABANK_TRIM_PCB_XIN_PARA_CAP_PF_X100(x)"/>
    </bit_field>
    <bit_field offset="21" width="10" name="PCB_XOUT_PARA_CAP_PF_X100" access="RW" reset_value="0" description="PCB XOUT parasitic capacitance, pF x 100. For example, 6pF becomes 600.">
      <alias type="CMSIS" value="FLASH_CMPA_XTAL_16MHZ_CAPABANK_TRIM_PCB_XOUT_PARA_CAP_PF_X100(x)"/>
    </bit_field>
    <reserved_bit_field offset="31" width="1" reset_value="0"/>
  </register>
  <register offset="0x50" width="32" name="ROTKH0" description="ROTKH0 for Root of Trust Keys Table hash[255:224] ROTKH1 for Root of Trust Keys Table hash[223:192] ROTKH2 for Root of Trust Keys Table hash[191:160] ROTKH3 for Root of Trust Keys Table hash[159:128] ROTKH4 for Root of Trust Keys Table hash[127:96] ROTKH5 for Root of Trust Keys Table hash[95:64] ROTKH6 for Root of Trust Keys Table hash[63:32] ROTKH7 for Root of Trust Keys Table hash[31:0]">
    <alias type="CMSIS" value="ROTKH[0]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_ROTKH_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x54" width="32" name="ROTKH1" description="ROTKH0 for Root of Trust Keys Table hash[255:224] ROTKH1 for Root of Trust Keys Table hash[223:192] ROTKH2 for Root of Trust Keys Table hash[191:160] ROTKH3 for Root of Trust Keys Table hash[159:128] ROTKH4 for Root of Trust Keys Table hash[127:96] ROTKH5 for Root of Trust Keys Table hash[95:64] ROTKH6 for Root of Trust Keys Table hash[63:32] ROTKH7 for Root of Trust Keys Table hash[31:0]">
    <alias type="CMSIS" value="ROTKH[1]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_ROTKH_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x58" width="32" name="ROTKH2" description="ROTKH0 for Root of Trust Keys Table hash[255:224] ROTKH1 for Root of Trust Keys Table hash[223:192] ROTKH2 for Root of Trust Keys Table hash[191:160] ROTKH3 for Root of Trust Keys Table hash[159:128] ROTKH4 for Root of Trust Keys Table hash[127:96] ROTKH5 for Root of Trust Keys Table hash[95:64] ROTKH6 for Root of Trust Keys Table hash[63:32] ROTKH7 for Root of Trust Keys Table hash[31:0]">
    <alias type="CMSIS" value="ROTKH[2]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_ROTKH_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x5C" width="32" name="ROTKH3" description="ROTKH0 for Root of Trust Keys Table hash[255:224] ROTKH1 for Root of Trust Keys Table hash[223:192] ROTKH2 for Root of Trust Keys Table hash[191:160] ROTKH3 for Root of Trust Keys Table hash[159:128] ROTKH4 for Root of Trust Keys Table hash[127:96] ROTKH5 for Root of Trust Keys Table hash[95:64] ROTKH6 for Root of Trust Keys Table hash[63:32] ROTKH7 for Root of Trust Keys Table hash[31:0]">
    <alias type="CMSIS" value="ROTKH[3]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_ROTKH_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x60" width="32" name="ROTKH4" description="ROTKH0 for Root of Trust Keys Table hash[255:224] ROTKH1 for Root of Trust Keys Table hash[223:192] ROTKH2 for Root of Trust Keys Table hash[191:160] ROTKH3 for Root of Trust Keys Table hash[159:128] ROTKH4 for Root of Trust Keys Table hash[127:96] ROTKH5 for Root of Trust Keys Table hash[95:64] ROTKH6 for Root of Trust Keys Table hash[63:32] ROTKH7 for Root of Trust Keys Table hash[31:0]">
    <alias type="CMSIS" value="ROTKH[4]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_ROTKH_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x64" width="32" name="ROTKH5" description="ROTKH0 for Root of Trust Keys Table hash[255:224] ROTKH1 for Root of Trust Keys Table hash[223:192] ROTKH2 for Root of Trust Keys Table hash[191:160] ROTKH3 for Root of Trust Keys Table hash[159:128] ROTKH4 for Root of Trust Keys Table hash[127:96] ROTKH5 for Root of Trust Keys Table hash[95:64] ROTKH6 for Root of Trust Keys Table hash[63:32] ROTKH7 for Root of Trust Keys Table hash[31:0]">
    <alias type="CMSIS" value="ROTKH[5]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_ROTKH_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x68" width="32" name="ROTKH6" description="ROTKH0 for Root of Trust Keys Table hash[255:224] ROTKH1 for Root of Trust Keys Table hash[223:192] ROTKH2 for Root of Trust Keys Table hash[191:160] ROTKH3 for Root of Trust Keys Table hash[159:128] ROTKH4 for Root of Trust Keys Table hash[127:96] ROTKH5 for Root of Trust Keys Table hash[95:64] ROTKH6 for Root of Trust Keys Table hash[63:32] ROTKH7 for Root of Trust Keys Table hash[31:0]">
    <alias type="CMSIS" value="ROTKH[6]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_ROTKH_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x6C" width="32" name="ROTKH7" description="ROTKH0 for Root of Trust Keys Table hash[255:224] ROTKH1 for Root of Trust Keys Table hash[223:192] ROTKH2 for Root of Trust Keys Table hash[191:160] ROTKH3 for Root of Trust Keys Table hash[159:128] ROTKH4 for Root of Trust Keys Table hash[127:96] ROTKH5 for Root of Trust Keys Table hash[95:64] ROTKH6 for Root of Trust Keys Table hash[63:32] ROTKH7 for Root of Trust Keys Table hash[31:0]">
    <alias type="CMSIS" value="ROTKH[7]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_ROTKH_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x100" width="32" name="CUSTOMER_DEFINED0" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[0]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x104" width="32" name="CUSTOMER_DEFINED1" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[1]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x108" width="32" name="CUSTOMER_DEFINED2" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[2]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x10C" width="32" name="CUSTOMER_DEFINED3" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[3]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x110" width="32" name="CUSTOMER_DEFINED4" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[4]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x114" width="32" name="CUSTOMER_DEFINED5" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[5]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x118" width="32" name="CUSTOMER_DEFINED6" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[6]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x11C" width="32" name="CUSTOMER_DEFINED7" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[7]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x120" width="32" name="CUSTOMER_DEFINED8" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[8]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x124" width="32" name="CUSTOMER_DEFINED9" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[9]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x128" width="32" name="CUSTOMER_DEFINED10" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[10]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x12C" width="32" name="CUSTOMER_DEFINED11" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[11]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x130" width="32" name="CUSTOMER_DEFINED12" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[12]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x134" width="32" name="CUSTOMER_DEFINED13" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[13]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x138" width="32" name="CUSTOMER_DEFINED14" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[14]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x13C" width="32" name="CUSTOMER_DEFINED15" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[15]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x140" width="32" name="CUSTOMER_DEFINED16" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[16]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x144" width="32" name="CUSTOMER_DEFINED17" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[17]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x148" width="32" name="CUSTOMER_DEFINED18" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[18]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x14C" width="32" name="CUSTOMER_DEFINED19" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[19]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x150" width="32" name="CUSTOMER_DEFINED20" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[20]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x154" width="32" name="CUSTOMER_DEFINED21" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[21]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x158" width="32" name="CUSTOMER_DEFINED22" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[22]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x15C" width="32" name="CUSTOMER_DEFINED23" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[23]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x160" width="32" name="CUSTOMER_DEFINED24" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[24]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x164" width="32" name="CUSTOMER_DEFINED25" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[25]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x168" width="32" name="CUSTOMER_DEFINED26" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[26]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x16C" width="32" name="CUSTOMER_DEFINED27" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[27]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x170" width="32" name="CUSTOMER_DEFINED28" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[28]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x174" width="32" name="CUSTOMER_DEFINED29" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[29]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x178" width="32" name="CUSTOMER_DEFINED30" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[30]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x17C" width="32" name="CUSTOMER_DEFINED31" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[31]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x180" width="32" name="CUSTOMER_DEFINED32" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[32]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x184" width="32" name="CUSTOMER_DEFINED33" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[33]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x188" width="32" name="CUSTOMER_DEFINED34" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[34]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x18C" width="32" name="CUSTOMER_DEFINED35" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[35]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x190" width="32" name="CUSTOMER_DEFINED36" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[36]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x194" width="32" name="CUSTOMER_DEFINED37" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[37]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x198" width="32" name="CUSTOMER_DEFINED38" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[38]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x19C" width="32" name="CUSTOMER_DEFINED39" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[39]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1A0" width="32" name="CUSTOMER_DEFINED40" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[40]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1A4" width="32" name="CUSTOMER_DEFINED41" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[41]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1A8" width="32" name="CUSTOMER_DEFINED42" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[42]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1AC" width="32" name="CUSTOMER_DEFINED43" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[43]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1B0" width="32" name="CUSTOMER_DEFINED44" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[44]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1B4" width="32" name="CUSTOMER_DEFINED45" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[45]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1B8" width="32" name="CUSTOMER_DEFINED46" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[46]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1BC" width="32" name="CUSTOMER_DEFINED47" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[47]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1C0" width="32" name="CUSTOMER_DEFINED48" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[48]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1C4" width="32" name="CUSTOMER_DEFINED49" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[49]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1C8" width="32" name="CUSTOMER_DEFINED50" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[50]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1CC" width="32" name="CUSTOMER_DEFINED51" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[51]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1D0" width="32" name="CUSTOMER_DEFINED52" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[52]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1D4" width="32" name="CUSTOMER_DEFINED53" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[53]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1D8" width="32" name="CUSTOMER_DEFINED54" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[54]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1DC" width="32" name="CUSTOMER_DEFINED55" description="Customer Defined (Programable through ROM API)">
    <alias type="CMSIS" value="CUSTOMER_DEFINED[55]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_CUSTOMER_DEFINED_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1E0" width="32" name="SHA256_DIGEST0" description="SHA256_DIGEST0 for DIGEST[31:0] SHA256_DIGEST1 for DIGEST[63:32] SHA256_DIGEST2 for DIGEST[95:64] SHA256_DIGEST3 for DIGEST[127:96] SHA256_DIGEST4 for DIGEST[159:128] SHA256_DIGEST5 for DIGEST[191:160] SHA256_DIGEST6 for DIGEST[223:192] SHA256_DIGEST7 for DIGEST[255:224]">
    <alias type="CMSIS" value="SHA256_DIGEST[0]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_SHA256_DIGEST_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1E4" width="32" name="SHA256_DIGEST1" description="SHA256_DIGEST0 for DIGEST[31:0] SHA256_DIGEST1 for DIGEST[63:32] SHA256_DIGEST2 for DIGEST[95:64] SHA256_DIGEST3 for DIGEST[127:96] SHA256_DIGEST4 for DIGEST[159:128] SHA256_DIGEST5 for DIGEST[191:160] SHA256_DIGEST6 for DIGEST[223:192] SHA256_DIGEST7 for DIGEST[255:224]">
    <alias type="CMSIS" value="SHA256_DIGEST[1]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_SHA256_DIGEST_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1E8" width="32" name="SHA256_DIGEST2" description="SHA256_DIGEST0 for DIGEST[31:0] SHA256_DIGEST1 for DIGEST[63:32] SHA256_DIGEST2 for DIGEST[95:64] SHA256_DIGEST3 for DIGEST[127:96] SHA256_DIGEST4 for DIGEST[159:128] SHA256_DIGEST5 for DIGEST[191:160] SHA256_DIGEST6 for DIGEST[223:192] SHA256_DIGEST7 for DIGEST[255:224]">
    <alias type="CMSIS" value="SHA256_DIGEST[2]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_SHA256_DIGEST_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1EC" width="32" name="SHA256_DIGEST3" description="SHA256_DIGEST0 for DIGEST[31:0] SHA256_DIGEST1 for DIGEST[63:32] SHA256_DIGEST2 for DIGEST[95:64] SHA256_DIGEST3 for DIGEST[127:96] SHA256_DIGEST4 for DIGEST[159:128] SHA256_DIGEST5 for DIGEST[191:160] SHA256_DIGEST6 for DIGEST[223:192] SHA256_DIGEST7 for DIGEST[255:224]">
    <alias type="CMSIS" value="SHA256_DIGEST[3]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_SHA256_DIGEST_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1F0" width="32" name="SHA256_DIGEST4" description="SHA256_DIGEST0 for DIGEST[31:0] SHA256_DIGEST1 for DIGEST[63:32] SHA256_DIGEST2 for DIGEST[95:64] SHA256_DIGEST3 for DIGEST[127:96] SHA256_DIGEST4 for DIGEST[159:128] SHA256_DIGEST5 for DIGEST[191:160] SHA256_DIGEST6 for DIGEST[223:192] SHA256_DIGEST7 for DIGEST[255:224]">
    <alias type="CMSIS" value="SHA256_DIGEST[4]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_SHA256_DIGEST_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1F4" width="32" name="SHA256_DIGEST5" description="SHA256_DIGEST0 for DIGEST[31:0] SHA256_DIGEST1 for DIGEST[63:32] SHA256_DIGEST2 for DIGEST[95:64] SHA256_DIGEST3 for DIGEST[127:96] SHA256_DIGEST4 for DIGEST[159:128] SHA256_DIGEST5 for DIGEST[191:160] SHA256_DIGEST6 for DIGEST[223:192] SHA256_DIGEST7 for DIGEST[255:224]">
    <alias type="CMSIS" value="SHA256_DIGEST[5]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_SHA256_DIGEST_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1F8" width="32" name="SHA256_DIGEST6" description="SHA256_DIGEST0 for DIGEST[31:0] SHA256_DIGEST1 for DIGEST[63:32] SHA256_DIGEST2 for DIGEST[95:64] SHA256_DIGEST3 for DIGEST[127:96] SHA256_DIGEST4 for DIGEST[159:128] SHA256_DIGEST5 for DIGEST[191:160] SHA256_DIGEST6 for DIGEST[223:192] SHA256_DIGEST7 for DIGEST[255:224]">
    <alias type="CMSIS" value="SHA256_DIGEST[6]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_SHA256_DIGEST_FIELD(x)"/>
    </bit_field>
  </register>
  <register offset="0x1FC" width="32" name="SHA256_DIGEST7" description="SHA256_DIGEST0 for DIGEST[31:0] SHA256_DIGEST1 for DIGEST[63:32] SHA256_DIGEST2 for DIGEST[95:64] SHA256_DIGEST3 for DIGEST[127:96] SHA256_DIGEST4 for DIGEST[159:128] SHA256_DIGEST5 for DIGEST[191:160] SHA256_DIGEST6 for DIGEST[223:192] SHA256_DIGEST7 for DIGEST[255:224]">
    <alias type="CMSIS" value="SHA256_DIGEST[7]"/>
    <bit_field offset="0" width="32" name="FIELD" access="RW" reset_value="0" description=".">
      <alias type="CMSIS" value="FLASH_CMPA_SHA256_DIGEST_FIELD(x)"/>
    </bit_field>
  </register>
</regs:peripheral>