{"version":3,"sources":["App.js","index.js"],"names":["cytoscape","use","dagre","App","props","state","error","isLoaded","elements","url","URL","window","location","href","backend_port","process","REACT_APP_BACKEND_PORT","backend_origin","origin","replace","port","fetch","method","body","JSON","stringify","Object","fromEntries","searchParams","headers","Headers","then","res","json","result","setState","this","message","stylesheet","selector","style","height","width","content","layout","name","rankDir","rankSep","zoom","minZoom","maxZoom","wheelSensitivity","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAKAA,EAAUC,IAAIC,K,IAgGCC,E,kDA7Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,SAAU,IALK,E,gEASE,IAAD,OACZC,EAAM,IAAIC,IAAIC,OAAOC,SAASC,MAC9BC,EAAeC,mIAAYC,uBAC3BC,EAAiBH,EAAeL,EAAIS,OAAOC,QAAQV,EAAIW,KAAMN,GAAgBL,EAAIS,OACvFG,MAAM,GAAD,OAAIJ,EAAJ,YAA8B,CACjCK,OAAQ,OACRC,KAAMC,KAAKC,UAAUC,OAAOC,YAAYlB,EAAImB,eAC5CC,QAAS,IAAIC,QAAQ,CACnB,eAAgB,uBAGjBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZ5B,UAAU,EACVC,SAAU0B,OAGd,SAAC5B,GACC,EAAK6B,SAAS,CACZ5B,UAAU,EACVD,e,+BAMA,IAAD,EAC6B8B,KAAK/B,MAAlCC,EADA,EACAA,MAAOC,EADP,EACOA,SAAUC,EADjB,EACiBA,SACxB,GAAIF,EACF,OAAO,0CAAaA,EAAM+B,WACrB,GAAK9B,EAEL,CAoCL,OAAO,cAAC,IAAD,CACLC,SAAUA,EACV8B,WArCiB,CACjB,CACEC,SAAU,OACVC,MAAO,CACLC,OAAQ,GACRC,MAAO,GACPC,QAAS,WACT,cAAe,MACf,cAAe,QACf,YAAa,GACb,MAAS,UACT,mBAAoB,UACpB,eAAgB,OAChB,eAAgB,EAChB,iBAAkB,KAGtB,CACEJ,SAAU,OACVC,MAAO,CACLE,MAAO,EACP,aAAc,UACd,qBAAsB,UACtB,qBAAsB,WACtB,cAAe,GACf,cAAe,YAanBF,MAJY,CAACE,MAAO,SAAUD,OAAQ,UAKtCG,OAVa,CACbC,KAAM,QACNC,QAAS,KACTC,QAAS,KAQTC,KAAM,EACNC,QAAS,GACTC,QAAS,EACTC,iBAAkB,KA7CpB,OAAO,iD,GA3CKC,IAAMC,WCFxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.456d1fcf.chunk.js","sourcesContent":["import React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport dagre from 'cytoscape-dagre';\nimport cytoscape from 'cytoscape';\n\ncytoscape.use(dagre);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      elements: []\n    }\n  }\n\n  componentDidMount() {\n    const url = new URL(window.location.href);\n    const backend_port = process.env.REACT_APP_BACKEND_PORT;\n    const backend_origin = backend_port ? url.origin.replace(url.port, backend_port) : url.origin;\n    fetch(`${backend_origin}/lineage`, {\n      method: 'POST',\n      body: JSON.stringify(Object.fromEntries(url.searchParams)),\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            elements: result\n          })\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          })\n        }\n      )\n  }\n\n  render() {\n    const {error, isLoaded, elements} = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      const stylesheet = [\n        {\n          selector: 'node',\n          style: {\n            height: 10,\n            width: 10,\n            content: 'data(id)',\n            'text-valign': 'top',\n            'text-halign': 'right',\n            'font-size': 10,\n            'color': '#35393e',\n            'background-color': '#3499d9',\n            'border-color': '#000',\n            'border-width': 1,\n            'border-opacity': 0.8\n          }\n        },\n        {\n          selector: 'edge',\n          style: {\n            width: 1,\n            'line-color': '#9ab5c7',\n            'target-arrow-color': '#9ab5c7',\n            'target-arrow-shape': 'triangle',\n            'arrow-scale': 0.8,\n            'curve-style': 'bezier'\n          }\n        }\n      ]\n      const layout = {\n        name: 'dagre',\n        rankDir: 'LR',\n        rankSep: 200,\n      };\n      const style = {width: '1920px', height: '1080px'};\n      return <CytoscapeComponent\n        elements={elements}\n        stylesheet={stylesheet}\n        style={style}\n        layout={layout}\n        zoom={1}\n        minZoom={0.5}\n        maxZoom={2}\n        wheelSensitivity={0.2}\n      />;\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}