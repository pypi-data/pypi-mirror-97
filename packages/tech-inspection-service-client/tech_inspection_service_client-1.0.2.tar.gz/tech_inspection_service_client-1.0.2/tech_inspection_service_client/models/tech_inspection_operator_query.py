# coding: utf-8

"""
    TechInspection 1.0

    Сервис получения информации об операторах и точках тех обслуживания  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tech_inspection_service_client.configuration import Configuration


class TechInspectionOperatorQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operator_id': 'int',
        'name': 'str',
        'link': 'str',
        'status': 'TechInspectionOperatorStatus',
        'director_initials': 'str',
        'ogrn': 'str',
        'org_form': 'str',
        'address': 'str',
        'address_latitude': 'float',
        'address_longitude': 'float',
        'address_route': 'str',
        'phone_numbers': 'list[str]',
        'emails': 'list[str]',
        'tech_inspection_points': 'list[TechInspectionPointQuery]'
    }

    attribute_map = {
        'operator_id': 'operatorId',
        'name': 'name',
        'link': 'link',
        'status': 'status',
        'director_initials': 'directorInitials',
        'ogrn': 'ogrn',
        'org_form': 'orgForm',
        'address': 'address',
        'address_latitude': 'addressLatitude',
        'address_longitude': 'addressLongitude',
        'address_route': 'addressRoute',
        'phone_numbers': 'phoneNumbers',
        'emails': 'emails',
        'tech_inspection_points': 'techInspectionPoints'
    }

    def __init__(self, operator_id=None, name=None, link=None, status=None, director_initials=None, ogrn=None, org_form=None, address=None, address_latitude=None, address_longitude=None, address_route=None, phone_numbers=None, emails=None, tech_inspection_points=None, local_vars_configuration=None):  # noqa: E501
        """TechInspectionOperatorQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._operator_id = None
        self._name = None
        self._link = None
        self._status = None
        self._director_initials = None
        self._ogrn = None
        self._org_form = None
        self._address = None
        self._address_latitude = None
        self._address_longitude = None
        self._address_route = None
        self._phone_numbers = None
        self._emails = None
        self._tech_inspection_points = None
        self.discriminator = None

        if operator_id is not None:
            self.operator_id = operator_id
        self.name = name
        self.link = link
        if status is not None:
            self.status = status
        self.director_initials = director_initials
        self.ogrn = ogrn
        self.org_form = org_form
        self.address = address
        self.address_latitude = address_latitude
        self.address_longitude = address_longitude
        self.address_route = address_route
        self.phone_numbers = phone_numbers
        self.emails = emails
        self.tech_inspection_points = tech_inspection_points

    @property
    def operator_id(self):
        """Gets the operator_id of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The operator_id of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: int
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this TechInspectionOperatorQuery.


        :param operator_id: The operator_id of this TechInspectionOperatorQuery.  # noqa: E501
        :type: int
        """

        self._operator_id = operator_id

    @property
    def name(self):
        """Gets the name of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The name of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TechInspectionOperatorQuery.


        :param name: The name of this TechInspectionOperatorQuery.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def link(self):
        """Gets the link of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The link of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this TechInspectionOperatorQuery.


        :param link: The link of this TechInspectionOperatorQuery.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def status(self):
        """Gets the status of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The status of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: TechInspectionOperatorStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TechInspectionOperatorQuery.


        :param status: The status of this TechInspectionOperatorQuery.  # noqa: E501
        :type: TechInspectionOperatorStatus
        """

        self._status = status

    @property
    def director_initials(self):
        """Gets the director_initials of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The director_initials of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: str
        """
        return self._director_initials

    @director_initials.setter
    def director_initials(self, director_initials):
        """Sets the director_initials of this TechInspectionOperatorQuery.


        :param director_initials: The director_initials of this TechInspectionOperatorQuery.  # noqa: E501
        :type: str
        """

        self._director_initials = director_initials

    @property
    def ogrn(self):
        """Gets the ogrn of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The ogrn of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: str
        """
        return self._ogrn

    @ogrn.setter
    def ogrn(self, ogrn):
        """Sets the ogrn of this TechInspectionOperatorQuery.


        :param ogrn: The ogrn of this TechInspectionOperatorQuery.  # noqa: E501
        :type: str
        """

        self._ogrn = ogrn

    @property
    def org_form(self):
        """Gets the org_form of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The org_form of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: str
        """
        return self._org_form

    @org_form.setter
    def org_form(self, org_form):
        """Sets the org_form of this TechInspectionOperatorQuery.


        :param org_form: The org_form of this TechInspectionOperatorQuery.  # noqa: E501
        :type: str
        """

        self._org_form = org_form

    @property
    def address(self):
        """Gets the address of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The address of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TechInspectionOperatorQuery.


        :param address: The address of this TechInspectionOperatorQuery.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address_latitude(self):
        """Gets the address_latitude of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The address_latitude of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: float
        """
        return self._address_latitude

    @address_latitude.setter
    def address_latitude(self, address_latitude):
        """Sets the address_latitude of this TechInspectionOperatorQuery.


        :param address_latitude: The address_latitude of this TechInspectionOperatorQuery.  # noqa: E501
        :type: float
        """

        self._address_latitude = address_latitude

    @property
    def address_longitude(self):
        """Gets the address_longitude of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The address_longitude of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: float
        """
        return self._address_longitude

    @address_longitude.setter
    def address_longitude(self, address_longitude):
        """Sets the address_longitude of this TechInspectionOperatorQuery.


        :param address_longitude: The address_longitude of this TechInspectionOperatorQuery.  # noqa: E501
        :type: float
        """

        self._address_longitude = address_longitude

    @property
    def address_route(self):
        """Gets the address_route of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The address_route of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: str
        """
        return self._address_route

    @address_route.setter
    def address_route(self, address_route):
        """Sets the address_route of this TechInspectionOperatorQuery.


        :param address_route: The address_route of this TechInspectionOperatorQuery.  # noqa: E501
        :type: str
        """

        self._address_route = address_route

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The phone_numbers of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this TechInspectionOperatorQuery.


        :param phone_numbers: The phone_numbers of this TechInspectionOperatorQuery.  # noqa: E501
        :type: list[str]
        """

        self._phone_numbers = phone_numbers

    @property
    def emails(self):
        """Gets the emails of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The emails of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this TechInspectionOperatorQuery.


        :param emails: The emails of this TechInspectionOperatorQuery.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def tech_inspection_points(self):
        """Gets the tech_inspection_points of this TechInspectionOperatorQuery.  # noqa: E501


        :return: The tech_inspection_points of this TechInspectionOperatorQuery.  # noqa: E501
        :rtype: list[TechInspectionPointQuery]
        """
        return self._tech_inspection_points

    @tech_inspection_points.setter
    def tech_inspection_points(self, tech_inspection_points):
        """Sets the tech_inspection_points of this TechInspectionOperatorQuery.


        :param tech_inspection_points: The tech_inspection_points of this TechInspectionOperatorQuery.  # noqa: E501
        :type: list[TechInspectionPointQuery]
        """

        self._tech_inspection_points = tech_inspection_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TechInspectionOperatorQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TechInspectionOperatorQuery):
            return True

        return self.to_dict() != other.to_dict()
