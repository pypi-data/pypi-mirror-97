# coding: utf-8

"""
    TechInspection 1.0

    Сервис получения информации об операторах и точках тех обслуживания  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tech_inspection_service_client.configuration import Configuration


class TechInspectionPointQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'point_id': 'int',
        'operator_id': 'int',
        'accreditations': 'list[str]',
        'status': 'TechInspectionPointStatus',
        'owner': 'str',
        'address': 'str',
        'address_latitude': 'float',
        'address_longitude': 'float',
        'address_route': 'str',
        'phone_numbers': 'list[str]',
        'emails': 'list[str]'
    }

    attribute_map = {
        'point_id': 'pointId',
        'operator_id': 'operatorId',
        'accreditations': 'accreditations',
        'status': 'status',
        'owner': 'owner',
        'address': 'address',
        'address_latitude': 'addressLatitude',
        'address_longitude': 'addressLongitude',
        'address_route': 'addressRoute',
        'phone_numbers': 'phoneNumbers',
        'emails': 'emails'
    }

    def __init__(self, point_id=None, operator_id=None, accreditations=None, status=None, owner=None, address=None, address_latitude=None, address_longitude=None, address_route=None, phone_numbers=None, emails=None, local_vars_configuration=None):  # noqa: E501
        """TechInspectionPointQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._point_id = None
        self._operator_id = None
        self._accreditations = None
        self._status = None
        self._owner = None
        self._address = None
        self._address_latitude = None
        self._address_longitude = None
        self._address_route = None
        self._phone_numbers = None
        self._emails = None
        self.discriminator = None

        if point_id is not None:
            self.point_id = point_id
        if operator_id is not None:
            self.operator_id = operator_id
        self.accreditations = accreditations
        if status is not None:
            self.status = status
        self.owner = owner
        self.address = address
        self.address_latitude = address_latitude
        self.address_longitude = address_longitude
        self.address_route = address_route
        self.phone_numbers = phone_numbers
        self.emails = emails

    @property
    def point_id(self):
        """Gets the point_id of this TechInspectionPointQuery.  # noqa: E501


        :return: The point_id of this TechInspectionPointQuery.  # noqa: E501
        :rtype: int
        """
        return self._point_id

    @point_id.setter
    def point_id(self, point_id):
        """Sets the point_id of this TechInspectionPointQuery.


        :param point_id: The point_id of this TechInspectionPointQuery.  # noqa: E501
        :type: int
        """

        self._point_id = point_id

    @property
    def operator_id(self):
        """Gets the operator_id of this TechInspectionPointQuery.  # noqa: E501


        :return: The operator_id of this TechInspectionPointQuery.  # noqa: E501
        :rtype: int
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this TechInspectionPointQuery.


        :param operator_id: The operator_id of this TechInspectionPointQuery.  # noqa: E501
        :type: int
        """

        self._operator_id = operator_id

    @property
    def accreditations(self):
        """Gets the accreditations of this TechInspectionPointQuery.  # noqa: E501


        :return: The accreditations of this TechInspectionPointQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._accreditations

    @accreditations.setter
    def accreditations(self, accreditations):
        """Sets the accreditations of this TechInspectionPointQuery.


        :param accreditations: The accreditations of this TechInspectionPointQuery.  # noqa: E501
        :type: list[str]
        """

        self._accreditations = accreditations

    @property
    def status(self):
        """Gets the status of this TechInspectionPointQuery.  # noqa: E501


        :return: The status of this TechInspectionPointQuery.  # noqa: E501
        :rtype: TechInspectionPointStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TechInspectionPointQuery.


        :param status: The status of this TechInspectionPointQuery.  # noqa: E501
        :type: TechInspectionPointStatus
        """

        self._status = status

    @property
    def owner(self):
        """Gets the owner of this TechInspectionPointQuery.  # noqa: E501


        :return: The owner of this TechInspectionPointQuery.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TechInspectionPointQuery.


        :param owner: The owner of this TechInspectionPointQuery.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def address(self):
        """Gets the address of this TechInspectionPointQuery.  # noqa: E501


        :return: The address of this TechInspectionPointQuery.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TechInspectionPointQuery.


        :param address: The address of this TechInspectionPointQuery.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address_latitude(self):
        """Gets the address_latitude of this TechInspectionPointQuery.  # noqa: E501


        :return: The address_latitude of this TechInspectionPointQuery.  # noqa: E501
        :rtype: float
        """
        return self._address_latitude

    @address_latitude.setter
    def address_latitude(self, address_latitude):
        """Sets the address_latitude of this TechInspectionPointQuery.


        :param address_latitude: The address_latitude of this TechInspectionPointQuery.  # noqa: E501
        :type: float
        """

        self._address_latitude = address_latitude

    @property
    def address_longitude(self):
        """Gets the address_longitude of this TechInspectionPointQuery.  # noqa: E501


        :return: The address_longitude of this TechInspectionPointQuery.  # noqa: E501
        :rtype: float
        """
        return self._address_longitude

    @address_longitude.setter
    def address_longitude(self, address_longitude):
        """Sets the address_longitude of this TechInspectionPointQuery.


        :param address_longitude: The address_longitude of this TechInspectionPointQuery.  # noqa: E501
        :type: float
        """

        self._address_longitude = address_longitude

    @property
    def address_route(self):
        """Gets the address_route of this TechInspectionPointQuery.  # noqa: E501


        :return: The address_route of this TechInspectionPointQuery.  # noqa: E501
        :rtype: str
        """
        return self._address_route

    @address_route.setter
    def address_route(self, address_route):
        """Sets the address_route of this TechInspectionPointQuery.


        :param address_route: The address_route of this TechInspectionPointQuery.  # noqa: E501
        :type: str
        """

        self._address_route = address_route

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this TechInspectionPointQuery.  # noqa: E501


        :return: The phone_numbers of this TechInspectionPointQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this TechInspectionPointQuery.


        :param phone_numbers: The phone_numbers of this TechInspectionPointQuery.  # noqa: E501
        :type: list[str]
        """

        self._phone_numbers = phone_numbers

    @property
    def emails(self):
        """Gets the emails of this TechInspectionPointQuery.  # noqa: E501


        :return: The emails of this TechInspectionPointQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this TechInspectionPointQuery.


        :param emails: The emails of this TechInspectionPointQuery.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TechInspectionPointQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TechInspectionPointQuery):
            return True

        return self.to_dict() != other.to_dict()
