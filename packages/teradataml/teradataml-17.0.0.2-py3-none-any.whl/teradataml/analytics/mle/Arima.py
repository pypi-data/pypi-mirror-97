#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# Secondary Owner: Mounika Kotha (mounika.kotha@teradata.com)
# 
# Version: 1.2
# Function Version: 1.9
# 
# ################################################################## 

import inspect
import time
from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display

class Arima:
    
    def __init__(self,
        data = None,
        orders_table = None,
        timestamp_columns = None,
        value_column = None,
        order = None,
        seasonal = None,
        period = None,
        include_mean = False,
        partition_columns = None,
        max_iterations = 10000,
        method = "SSE",
        include_drift = False,
        order_p = None,
        order_d = None,
        order_q = None,
        seasonal_order_p = None,
        seasonal_order_d = None,
        seasonal_order_q = None,
        data_sequence_column = None,
        orders_table_sequence_column = None):
        """
        DESCRIPTION:
            The Arima function calculates the coefficients for a sequence of 
            parameters, producing an ARIMA model that is typically input to the 
            function ArimaPredict.
         
         
        PARAMETERS:
            data:
                Required Argument.
                Specifies the name of the teradataml DataFrame that contains
                the input parameters.
         
            orders_table:
                Optional Argument.
                Specifies the name of the orders teradataml DataFrame that is
                generated by TimeSeriesOrders function.
         
            timestamp_columns:
                Required Argument.
                Specifies the names of the input_table columns that specify the
                sequence (time points) of the input parameters. The sequence must
                have uniform intervals.
                Types: str OR list of Strings (str)
         
            value_column:
                Required Argument.
                Specifies the name of the column that contains the time series data
                in input_table.
                Types: str
         
            order:
                Optional Argument.
                Specifies the values of the non-seasonal orders p, d, and q for the
                ARIMA model. The p and q must be an integer between 0 and 10,
                inclusive. The d must be between 0 and 1, inclusive.
                Types: str
         
            seasonal:
                Optional Argument.
                Specifies the values of the seasonal orders sp, sd, and sq for the
                ARIMA model. The sp and sq must be an integer between 0 and 10,
                inclusive. The sd must be between 0 and 3, inclusive
                Types: str
         
            period:
                Optional Argument.
                Specifies the period of a season (m in the formula). This value must
                be a positive integer value. If you specify seasonal, then you must
                also specify period.
                Types: int
         
            include_mean:
                Optional Argument.
                Specifies whether the function adds the mean value (c in the formula)
                to the Arima model.
                Note: If include_mean is True, then both d
                      in Orders and sd in seasonal must be 0.
                Default Value: False
                Types: bool
         
            partition_columns:
                Optional Argument.
                Specifies the partition columns that will be passed to the output. If
                not specified, the output will not contain partition columns.
                Types: str OR list of Strings (str)
         
            max_iterations:
                Optional Argument.
                Specifies the maximum iteration number for estimating the parameters.
                This value must be a positive integer.
                Default Value: 10000
                Types: int
         
            method:
                Optional Argument.
                Specifies the method for fitting the model parameters: SSE (Default):
                Sum of squared error. ML: Maximum likelihood
                Default Value: "SSE"
                Permitted Values: SSE, ML
                Types: str
         
            include_drift:
                Optional Argument.
                Specifies whether drift term is included in the ARIMA model.
                Note: This argument can only be True when d is non-zero and less than 2.
                Default Value: False
                Types: bool
         
            order_p:
                Optional Argument.
                Specifies the p value of the non-seasonal order parameter. The p value must be
                an integer between 0 and 10, inclusive.
                Types: int
         
            order_d:
                Optional Argument.
                Specifies the d value of the non-seasonal order parameter. The d value must be
                an integer between 0 and 1, inclusive.
                Types: int
         
            order_q:
                Optional Argument.
                Specifies the q value of the non-seasonal order parameter. The q value must be
                an integer between 0 and 10, inclusive.
                Types: int
         
            seasonal_order_p:
                Optional Argument.
                Specifies the sp value of the seasonal order parameter. The sp value must be an
                integer between 0 and 10, inclusive.
                Types: int
         
            seasonal_order_d:
                Optional Argument.
                Specifies the sd value of the seasonal order parameter. The sd value must be an
                integer between 0 and 3, inclusive.
                Types: int
         
            seasonal_order_q:
                Optional Argument.
                Specifies the sq value of the seasonal order parameter. The sq value must be an
                integer between 0 and 10, inclusive.
                Types: int
         
            data_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of
                the input argument "data". The argument is used to ensure
                deterministic results for functions which produce results that vary
                from run to run.
                Types: str OR list of Strings (str)
         
            orders_table_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of
                the input argument "orders_table". The argument is used to ensure
                deterministic results for functions which produce results that vary
                from run to run.
                Types: str OR list of Strings (str)
         
        RETURNS:
            Instance of Arima.
            Output teradataml DataFrames can be accessed using attribute
            references, such as ArimaObj.<attribute_name>.
            Output teradataml DataFrame attribute names are:
                1. coefficient
                2. residual_table
                3. output
         
         
        RAISES:
            TeradataMlException
         
         
        EXAMPLES:
            # Load the data to run the example.
            load_example_data("arima", "milk_timeseries")
         
            # Create teradataml DataFrame objects.
            milk_timeseries = DataFrame.from_table("milk_timeseries")
         
            # Example 1 - Generate Arima model using only orders paremeter without partition_columns and seasonal parameters.
            arima_out1 = Arima(data = milk_timeseries,
                             timestamp_columns = ["period"],
                             value_column = "milkpound",
                             order = "0,1,2",
                             include_drift=True)
         
            # Print the output data
            print(arima_out1.coefficient)
            print(arima_out1.residual_table)
            print(arima_out1.output)
         
            # Example 2 - Generate Arima model using seasonal orders parameter.
            arima_out2 = Arima(data = milk_timeseries,
                             timestamp_columns = ["period"],
                             value_column = "milkpound",
                             order = "0,1,2",
                             seasonal_order_p = 0,
                             seasonal_order_d = 1,
                             seasonal_order_q = 1,
                             period = 12)
         
            # Print output DataFrames individually.
            print(arima_out2.coefficient)
            print(arima_out2.residual_table)
            print(arima_out2.output)
        
        """
        
        # Start the timer to get the build time
        _start_time = time.time()
        
        self.data  = data 
        self.orders_table  = orders_table 
        self.timestamp_columns  = timestamp_columns 
        self.value_column  = value_column 
        self.order  = order 
        self.seasonal  = seasonal 
        self.period  = period 
        self.include_mean  = include_mean 
        self.partition_columns  = partition_columns 
        self.max_iterations  = max_iterations 
        self.method  = method 
        self.include_drift  = include_drift 
        self.order_p  = order_p 
        self.order_d  = order_d 
        self.order_q  = order_q 
        self.seasonal_order_p  = seasonal_order_p 
        self.seasonal_order_d  = seasonal_order_d 
        self.seasonal_order_q  = seasonal_order_q 
        self.data_sequence_column  = data_sequence_column 
        self.orders_table_sequence_column  = orders_table_sequence_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["data", self.data, False, (DataFrame)])
        self.__arg_info_matrix.append(["orders_table", self.orders_table, True, (DataFrame)])
        self.__arg_info_matrix.append(["timestamp_columns", self.timestamp_columns, False, (str,list)])
        self.__arg_info_matrix.append(["value_column", self.value_column, False, (str)])
        self.__arg_info_matrix.append(["order", self.order, True, (str)])
        self.__arg_info_matrix.append(["seasonal", self.seasonal, True, (str)])
        self.__arg_info_matrix.append(["period", self.period, True, (int)])
        self.__arg_info_matrix.append(["include_mean", self.include_mean, True, (bool)])
        self.__arg_info_matrix.append(["partition_columns", self.partition_columns, True, (str,list)])
        self.__arg_info_matrix.append(["max_iterations", self.max_iterations, True, (int)])
        self.__arg_info_matrix.append(["method", self.method, True, (str)])
        self.__arg_info_matrix.append(["include_drift", self.include_drift, True, (bool)])
        self.__arg_info_matrix.append(["order_p", self.order_p, True, (int)])
        self.__arg_info_matrix.append(["order_d", self.order_d, True, (int)])
        self.__arg_info_matrix.append(["order_q", self.order_q, True, (int)])
        self.__arg_info_matrix.append(["seasonal_order_p", self.seasonal_order_p, True, (int)])
        self.__arg_info_matrix.append(["seasonal_order_d", self.seasonal_order_d, True, (int)])
        self.__arg_info_matrix.append(["seasonal_order_q", self.seasonal_order_q, True, (int)])
        self.__arg_info_matrix.append(["data_sequence_column", self.data_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["orders_table_sequence_column", self.orders_table_sequence_column, True, (str,list)])
        
        if inspect.stack()[1][3] != '_from_model_catalog':
            # Perform the function validations
            self.__validate()
            # Generate the ML query
            self.__form_tdml_query()
            # Execute ML query
            self.__execute()
            # Get the prediction type
            self._prediction_type = self.__awu._get_function_prediction_type(self)
        
        # End the timer to get the build time
        _end_time = time.time()
        
        # Calculate the build time
        self._build_time = (int)(_end_time - _start_time)
        
    def __validate(self):
        """
        Function to validate sqlmr function arguments, which verifies missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.data, "data", None)
        self.__awu._validate_input_table_datatype(self.orders_table, "orders_table", None)
        
        # Check for permitted values
        method_permitted_values = ["SSE", "ML"]
        self.__awu._validate_permitted_values(self.method, method_permitted_values, "method")
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.timestamp_columns, "timestamp_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.timestamp_columns, "timestamp_columns", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.value_column, "value_column")
        self.__awu._validate_dataframe_has_argument_columns(self.value_column, "value_column", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.partition_columns, "partition_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.partition_columns, "partition_columns", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.data_sequence_column, "data_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.data_sequence_column, "data_sequence_column", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.orders_table_sequence_column, "orders_table_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.orders_table_sequence_column, "orders_table_sequence_column", self.orders_table, "orders_table", False)
        
        
    def __form_tdml_query(self):
        """
        Function to generate the analytical function queries. The function defines 
        variables and list of arguments required to form the query.
        """
        # Generate temp table names for output table parameters if any.
        self.__coefficient_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_arima0", use_default_database=True, gc_on_quit=True, quote=False, table_type=TeradataConstants.TERADATA_TABLE)
        self.__residual_table_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_arima1", use_default_database=True, gc_on_quit=True, quote=False, table_type=TeradataConstants.TERADATA_TABLE)
        
        # Output table arguments list
        self.__func_output_args_sql_names = ["ModelTable", "ResidualTable"]
        self.__func_output_args = [self.__coefficient_temp_tablename, self.__residual_table_temp_tablename]
        
        # Model Cataloging related attributes.
        self._sql_specific_attributes = {}
        self._sql_formula_attribute_mapper = {}
        self._target_column = None
        self._algorithm_name = None
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("TimeColumns")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.timestamp_columns, "\""), "'"))
        self.__func_other_arg_json_datatypes.append("COLUMN_NAMES")
        
        self.__func_other_arg_sql_names.append("TargetColumn")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.value_column, "\""), "'"))
        self.__func_other_arg_json_datatypes.append("COLUMN_NAMES")
        
        if self.partition_columns is not None:
            self.__func_other_arg_sql_names.append("PartitionColumns")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.partition_columns, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMN_NAMES")
        
        if self.order is not None:
            self.__func_other_arg_sql_names.append("Orders")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.order, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.seasonal is not None:
            self.__func_other_arg_sql_names.append("SeasonalOrders")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.seasonal, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.period is not None:
            self.__func_other_arg_sql_names.append("Period")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.period, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        if self.include_mean is not None and self.include_mean != False:
            self.__func_other_arg_sql_names.append("IncludeMean")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.include_mean, "'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        if self.max_iterations is not None and self.max_iterations != 10000:
            self.__func_other_arg_sql_names.append("MaxIterNum")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.max_iterations, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        if self.method is not None and self.method != "SSE":
            self.__func_other_arg_sql_names.append("FitMethod")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.method, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.include_drift is not None and self.include_drift != False:
            self.__func_other_arg_sql_names.append("IncludeDrift")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.include_drift, "'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        if self.order_p is not None:
            self.__func_other_arg_sql_names.append("OrderP")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.order_p, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        if self.order_d is not None:
            self.__func_other_arg_sql_names.append("OrderD")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.order_d, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        if self.order_q is not None:
            self.__func_other_arg_sql_names.append("OrderQ")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.order_q, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        if self.seasonal_order_p is not None:
            self.__func_other_arg_sql_names.append("SeasonalOrderP")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.seasonal_order_p, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        if self.seasonal_order_d is not None:
            self.__func_other_arg_sql_names.append("SeasonalOrderD")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.seasonal_order_d, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        if self.seasonal_order_q is not None:
            self.__func_other_arg_sql_names.append("SeasonalOrderQ")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.seasonal_order_q, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        # Generate lists for rest of the function arguments
        sequence_input_by_list = []
        if self.data_sequence_column is not None:
            sequence_input_by_list.append("InputTable:" + UtilFuncs._teradata_collapse_arglist(self.data_sequence_column, ""))
        
        if self.orders_table_sequence_column is not None:
            sequence_input_by_list.append("OrdersTable:" + UtilFuncs._teradata_collapse_arglist(self.orders_table_sequence_column, ""))
        
        if len(sequence_input_by_list) > 0:
            self.__func_other_arg_sql_names.append("SequenceInputBy")
            sequence_input_by_arg_value = UtilFuncs._teradata_collapse_arglist(sequence_input_by_list, "'")
            self.__func_other_args.append(sequence_input_by_arg_value)
            self.__func_other_arg_json_datatypes.append("STRING")
            self._sql_specific_attributes["SequenceInputBy"] = sequence_input_by_arg_value
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process data
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.data, False)
        self.__func_input_distribution.append("NONE")
        self.__func_input_arg_sql_names.append("InputTable")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("NA_character_")
        self.__func_input_order_by_cols.append("NA_character_")
        
        # Process orders_table
        if self.orders_table is not None:
            self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.orders_table, False)
            self.__func_input_distribution.append("NONE")
            self.__func_input_arg_sql_names.append("OrdersTable")
            self.__func_input_table_view_query.append(self.__table_ref["ref"])
            self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
            self.__func_input_partition_by_cols.append("NA_character_")
            self.__func_input_order_by_cols.append("NA_character_")
        
        function_name = "ARIMA"
        # Create instance to generate SQLMR.
        self.__aqg_obj = AnalyticQueryGenerator(function_name, 
                self.__func_input_arg_sql_names, 
                self.__func_input_table_view_query, 
                self.__func_input_dataframe_type, 
                self.__func_input_distribution, 
                self.__func_input_partition_by_cols, 
                self.__func_input_order_by_cols, 
                self.__func_other_arg_sql_names, 
                self.__func_other_args, 
                self.__func_other_arg_json_datatypes, 
                self.__func_output_args_sql_names, 
                self.__func_output_args, 
                engine="ENGINE_ML")
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = self.__aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
        # Set the algorithm name for Model Cataloging.
        self._algorithm_name = self.__aqg_obj._get_alias_name_for_function(function_name)
        
    def __execute(self):
        """
        Function to execute SQL-MR queries. 
        Create DataFrames for the required SQL-MR outputs.
        """
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_sqlmr_out_", use_default_database=True, gc_on_quit=True, quote=False, table_type=TeradataConstants.TERADATA_TABLE)
        try:
            # Generate the output.
            UtilFuncs._create_table(sqlmr_stdout_temp_tablename, self.sqlmr_query)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.TDMLDF_EXEC_SQL_FAILED, str(emsg)), MessageCodes.TDMLDF_EXEC_SQL_FAILED)
        
        # Update output table data frames.
        self._mlresults = []
        self.coefficient = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(self.__coefficient_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(self.__coefficient_temp_tablename))
        self.residual_table = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(self.__residual_table_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(self.__residual_table_temp_tablename))
        self.output = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(sqlmr_stdout_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(sqlmr_stdout_temp_tablename))
        self._mlresults.append(self.coefficient)
        self._mlresults.append(self.residual_table)
        self._mlresults.append(self.output)
        
    def show_query(self):
        """
        Function to return the underlying SQL query.
        When model object is created using retrieve_model(), then None is returned.
        """
        return self.sqlmr_query
        
    def get_prediction_type(self):
        """
        Function to return the Prediction type of the algorithm.
        When model object is created using retrieve_model(), then the value returned is
        as saved in the Model Catalog.
        """
        return self._prediction_type
        
    def get_target_column(self):
        """
        Function to return the Target Column of the algorithm.
        When model object is created using retrieve_model(), then the value returned is
        as saved in the Model Catalog.
        """
        return self._target_column
        
    def get_build_time(self):
        """
        Function to return the build time of the algorithm in seconds.
        When model object is created using retrieve_model(), then the value returned is
        as saved in the Model Catalog.
        """
        return self._build_time
        
    def _get_algorithm_name(self):
        """
        Function to return the name of the algorithm.
        """
        return self._algorithm_name
        
    def _get_sql_specific_attributes(self):
        """
        Function to return the dictionary containing the SQL specific attributes of the algorithm.
        """
        return self._sql_specific_attributes
        
    @classmethod
    def _from_model_catalog(cls,
        coefficient = None,
        residual_table = None,
        output = None,
        **kwargs):
        """
        Classmethod is used by Model Cataloging, to instantiate this wrapper class.
        """
        kwargs.pop("coefficient", None)
        kwargs.pop("residual_table", None)
        kwargs.pop("output", None)
        
        # Model Cataloging related attributes.
        target_column = kwargs.pop("__target_column", None)
        prediction_type = kwargs.pop("__prediction_type", None)
        algorithm_name = kwargs.pop("__algorithm_name", None)
        build_time = kwargs.pop("__build_time", None)
        
        # Let's create an object of this class.
        obj = cls(**kwargs)
        obj.coefficient  = coefficient 
        obj.residual_table  = residual_table 
        obj.output  = output 
        
        # Initialize the sqlmr_query class attribute.
        obj.sqlmr_query = None
        
        # Initialize the SQL specific Model Cataloging attributes.
        obj._sql_specific_attributes = None
        obj._target_column = target_column
        obj._prediction_type = prediction_type
        obj._algorithm_name = algorithm_name
        obj._build_time = build_time
        
        # Update output table data frames.
        obj._mlresults = []
        obj.coefficient = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.coefficient), source_type="table", database_name=UtilFuncs._extract_db_name(obj.coefficient))
        obj.residual_table = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.residual_table), source_type="table", database_name=UtilFuncs._extract_db_name(obj.residual_table))
        obj.output = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.output), source_type="table", database_name=UtilFuncs._extract_db_name(obj.output))
        obj._mlresults.append(obj.coefficient)
        obj._mlresults.append(obj.residual_table)
        obj._mlresults.append(obj.output)
        return obj
        
    def __repr__(self):
        """
        Returns the string representation for a Arima class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.output)
        repr_string="{}\n\n\n############ coefficient Output ############".format(repr_string)
        repr_string = "{}\n\n{}".format(repr_string,self.coefficient)
        repr_string="{}\n\n\n############ residual_table Output ############".format(repr_string)
        repr_string = "{}\n\n{}".format(repr_string,self.residual_table)
        return repr_string
        
