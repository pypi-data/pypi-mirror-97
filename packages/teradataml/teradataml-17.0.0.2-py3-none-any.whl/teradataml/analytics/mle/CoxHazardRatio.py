#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# Secondary Owner: Mounika Kotha (mounika.kotha@teradata.com)
# 
# Version: 1.2
# Function Version: 1.6
# 
# ################################################################## 

import inspect
import time
from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display
from teradataml.analytics.mle.CoxPH import CoxPH

class CoxHazardRatio:
    
    def __init__(self,
        object = None,
        predicts = None,
        refs = None,
        predict_feature_names = None,
        predict_feature_columns = None,
        predict_feature_units_columns = None,
        ref_feature_columns = None,
        accumulate = None,
        object_sequence_column = None,
        predicts_sequence_column = None,
        refs_sequence_column = None,
        predicts_partition_column = "1",
        refs_partition_column = "1",
        object_order_column = None,
        predicts_order_column = None,
        refs_order_column = None):
        """
        DESCRIPTION:
            The CoxHazardRatio function takes as input the coefficient_table teradataml
            DataFrame generated by the function CoxPH and outputs the hazard
            ratios between predictive features and either their corresponding
            reference features or their unit differences.
         
         
        PARAMETERS:
            object:
                Required Argument.
                This teradataml DataFrame that specifies the feature coefficients.
         
            object_order_column:
                Optional Argument.
                Specifies Order By columns for object.
                Values to this argument can be provided as a list, if multiple
                columns are used for ordering.
                Types: str OR list of Strings (str)
         
            predicts:
                Required Argument.
                This teradataml DataFrame that specifies new feature values or unit changes
                for prediction.
         
            predicts_partition_column:
                Optional Argument.
                Specifies Partition By columns for predicts.
                Values to this argument can be provided as list, if multiple columns
                are used for partition.
                Default Value: 1
                Types: str OR list of Strings (str)
         
            predicts_order_column:
                Optional Argument.
                Specifies Order By columns for predicts.
                Values to this argument can be provided as a list, if multiple
                columns are used for ordering.
                Types: str OR list of Strings (str)
         
            refs:
                Optional Argument.
                This teradataml DataFrame that specifies reference feature values.
         
            refs_partition_column:
                Optional Argument.
                Specifies Partition By columns for refs.
                Values to this argument can be provided as list, if multiple columns
                are used for partition.
                Default Value: 1
                Types: str OR list of Strings (str)
         
            refs_order_column:
                Optional Argument.
                Specifies Order By columns for refs.
                Values to this argument can be provided as a list, if multiple
                columns are used for ordering.
                Types: str OR list of Strings (str)
         
            predict_feature_names:
                Required Argument.
                Specifies the names of the features in the Cox coefficient model (the
                coefficient teradataml DataFrame generated by the CoxPH function).
                Types: str OR list of Strings (str)
         
            predict_feature_columns:
                Optional Argument.
                Specifies the names of the columns that contain the values of the
                features in the Cox coefficient model. This argument must specify a
                column for each feature specified by predict_feature_names. The ith
                predict_feature corresponds to the ith pf_value_column.
                Types: str OR list of Strings (str)
         
            predict_feature_units_columns:
                Optional Argument.
                Specifies the names of the columns that contain the unit values of
                the features in the Cox coefficient model. This argument must specify
                a column for each feature specified by predict_feature_names. The ith
                predict_feature corresponds to the ith pf_unit_column.
                Types: str OR list of Strings (str)
         
            ref_feature_columns:
                Optional Argument.
                Specifies the names of the columns that contain the reference values.
                This argument must specify a column for each feature specified by
                predict_feature_names. The ith predict_feature corresponds to the ith
                rf_value_column. The default reference values are the distinct
                feature value combinations.
                Note: The function ignores this argument if you specify
                      predict_feature_units_columns.
                Types: str OR list of Strings (str)
         
            accumulate:
                Optional Argument.
                Specifies the names of the columns in predict_feature_table that the
                function copies to the output table.
                Types: str OR list of Strings (str)
         
            object_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of
                the input argument "object". The argument is used to ensure
                deterministic results for functions which produce results that vary
                from run to run.
                Types: str OR list of Strings (str)
         
            predicts_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of
                the input argument "predicts". The argument is used to ensure
                deterministic results for functions which produce results that vary
                from run to run.
                Types: str OR list of Strings (str)
         
            refs_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of
                the input argument "refs". The argument is used to ensure
                deterministic results for functions which produce results that vary
                from run to run.
                Types: str OR list of Strings (str)
         
        RETURNS:
            Instance of CoxHazardRatio.
            Output teradataml DataFrames can be accessed using attribute
            references, such as CoxHazardRatioObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result
         
         
        RAISES:
            TeradataMlException
         
         
        EXAMPLES:
            # Load the data to run the example.
            load_example_data("coxhazardratio", ["lungcancer","lc_new_reference","lc_new_predictors"])
         
            # Create teradataml DataFrame objects.
            lungcancer = DataFrame.from_table("lungcancer")
         
            # Input table lc_new_predictors is a list of four patients who have been
            # diagnosed with lung cancer.
            lc_new_predictors = DataFrame.from_table("lc_new_predictors")
         
            # Generate model table.
            td_coxph_out = CoxPH(data = lungcancer,
                    feature_columns = ["trt","celltype","karno","diagtime","age","prior"],
                    time_interval_column = "time_int",
                    event_column = "status",
                    categorical_columns = ["trt","celltype","prior"])
         
         
            # Example 1 - No Reference Values Provided.
            # This example calculates four hazard ratios for each patient,
            # using individual patient characteristics as a reference.
            cox_hazard_ratio_out1 = CoxHazardRatio(object = td_coxph_out.coefficient_table,
                    predicts = lc_new_predictors,
                    predicts_partition_column='id',
                    predict_feature_names = ["trt", "celltype","karno","diagtime","age","prior"],
                    predict_feature_columns = ["trt","celltype","karno","diagtime","age", "prior"],
                    accumulate = ["id", "name"])
         
            # Print the results.
            print(cox_hazard_ratio_out1.result)
         
            # Example 2: Partition by Name/ID and No Reference Values
            cox_hazard_ratio_out2 = CoxHazardRatio(object = td_coxph_out.coefficient_table,
                    predicts = lc_new_predictors,
                    predicts_partition_column=["id", "name"],
                    predict_feature_names = ["trt", "celltype","karno","diagtime","age","prior"],
                    predict_feature_columns = ["trt","celltype","karno","diagtime","age", "prior"],
                    accumulate = ["id", "name"])
         
            # Print the results.
            print(cox_hazard_ratio_out2.result)
         
            # Example 3:  Use Reference Values
            # Each of the four new patients in the table lc_new_predictors are compared with each of the attribute reference values provided
            # in the table lc_new_reference, and a hazard ratio is calculated.
            lc_new_reference = DataFrame.from_table("lc_new_reference")
         
            cox_hazard_ratio_out3 = CoxHazardRatio(object=td_coxph_out.coefficient_table,
                    predicts=lc_new_predictors,
                    refs=lc_new_reference,
                    predicts_partition_column='id',
                    predict_feature_columns=['trt','celltype','karno','diagtime','age','prior'],
                    ref_feature_columns=['trt','celltype','karno','diagtime','age','prior'],
                    predict_feature_names=['trt','celltype','karno','diagtime','age','prior'],
                    accumulate = ["id", "name"])
         
            # Print the results.
            print(cox_hazard_ratio_out3.result)
         
            # Example 4: Use Reference values and Partition by id
            # In this example, the new patients in the input table lc_new_predictors
            # are compared with the reference table using partition by id.
            # The hazard ratio is calculated only when the patient's id matches the reference id.
         
            cox_hazard_ratio_out4 = CoxHazardRatio(object=td_coxph_out.coefficient_table,
                    predicts=lc_new_predictors,
                    predicts_partition_column='id',
                    refs=lc_new_reference,
                    refs_partition_column='id',
                    predict_feature_columns=['trt','celltype','karno','diagtime','age','prior'],
                    ref_feature_columns=['trt','celltype','karno','diagtime','age','prior'],
                    predict_feature_names=['trt','celltype','karno','diagtime','age','prior'],
                    accumulate = ["id", "name"])
         
            # Print the results.
            print(cox_hazard_ratio_out4.result)
         
            # Example 5: Use Units Values
            # This example increases the variable karno by 10%, decreases the variable age by
            # 10%, leaves the variable diagtime unchanged, and calculates the hazard ratios.
            lc_new_predictors_query = DataFrame.from_query("select id, \"name\",(karno * 1.1) as karno , (diagtime * 1) as diagtime, (age * (0.9))  as age from lc_new_predictors")
            copy_to_sql(lc_new_predictors_query, "lc_new_predictors_2")
            lc_new_predictors_2 = DataFrame("lc_new_predictors_2")
         
            cox_hazard_ratio_out5 = CoxHazardRatio(object=td_coxph_out.coefficient_table,
                     predicts=lc_new_predictors_2,
                     predict_feature_names=['karno','diagtime','age'],
                     predict_feature_units_columns=['karno','diagtime','age'],
                     accumulate = ["id", "name"],
                     predicts_partition_column='id')
         
            # Print the results.
            print(cox_hazard_ratio_out5.result)
        
        """
        
        # Start the timer to get the build time
        _start_time = time.time()
        
        self.object  = object 
        self.predicts  = predicts 
        self.refs  = refs 
        self.predict_feature_names  = predict_feature_names 
        self.predict_feature_columns  = predict_feature_columns 
        self.predict_feature_units_columns  = predict_feature_units_columns 
        self.ref_feature_columns  = ref_feature_columns 
        self.accumulate  = accumulate 
        self.object_sequence_column  = object_sequence_column 
        self.predicts_sequence_column  = predicts_sequence_column 
        self.refs_sequence_column  = refs_sequence_column 
        self.predicts_partition_column  = predicts_partition_column 
        self.refs_partition_column  = refs_partition_column 
        self.object_order_column  = object_order_column 
        self.predicts_order_column  = predicts_order_column 
        self.refs_order_column  = refs_order_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["object", self.object, False, (DataFrame)])
        self.__arg_info_matrix.append(["object_order_column", self.object_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["predicts", self.predicts, False, (DataFrame)])
        self.__arg_info_matrix.append(["predicts_partition_column", self.predicts_partition_column, True, (str,list)])
        self.__arg_info_matrix.append(["predicts_order_column", self.predicts_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["refs", self.refs, True, (DataFrame)])
        self.__arg_info_matrix.append(["refs_partition_column", self.refs_partition_column, True, (str,list)])
        self.__arg_info_matrix.append(["refs_order_column", self.refs_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["predict_feature_names", self.predict_feature_names, False, (str,list)])
        self.__arg_info_matrix.append(["predict_feature_columns", self.predict_feature_columns, True, (str,list)])
        self.__arg_info_matrix.append(["predict_feature_units_columns", self.predict_feature_units_columns, True, (str,list)])
        self.__arg_info_matrix.append(["ref_feature_columns", self.ref_feature_columns, True, (str,list)])
        self.__arg_info_matrix.append(["accumulate", self.accumulate, True, (str,list)])
        self.__arg_info_matrix.append(["object_sequence_column", self.object_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["predicts_sequence_column", self.predicts_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["refs_sequence_column", self.refs_sequence_column, True, (str,list)])
        
        if inspect.stack()[1][3] != '_from_model_catalog':
            # Perform the function validations
            self.__validate()
            # Generate the ML query
            self.__form_tdml_query()
            # Process output table schema
            self.__process_output_column_info()
            # Execute ML query
            self.__execute()
            # Get the prediction type
            self._prediction_type = self.__awu._get_function_prediction_type(self)
        
        # End the timer to get the build time
        _end_time = time.time()
        
        # Calculate the build time
        self._build_time = (int)(_end_time - _start_time)
        
    def __validate(self):
        """
        Function to validate sqlmr function arguments, which verifies missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        if isinstance(self.object, CoxPH):
            self.object = self.object._mlresults[0]
        
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.object, "object", CoxPH)
        self.__awu._validate_input_table_datatype(self.predicts, "predicts", None)
        self.__awu._validate_input_table_datatype(self.refs, "refs", None)
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.predict_feature_columns, "predict_feature_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.predict_feature_columns, "predict_feature_columns", self.predicts, "predicts", False)
        
        self.__awu._validate_input_columns_not_empty(self.predict_feature_units_columns, "predict_feature_units_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.predict_feature_units_columns, "predict_feature_units_columns", self.predicts, "predicts", False)
        
        self.__awu._validate_input_columns_not_empty(self.ref_feature_columns, "ref_feature_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.ref_feature_columns, "ref_feature_columns", self.refs, "refs", False)
        
        self.__awu._validate_input_columns_not_empty(self.accumulate, "accumulate")
        self.__awu._validate_dataframe_has_argument_columns(self.accumulate, "accumulate", self.predicts, "predicts", False)
        
        self.__awu._validate_input_columns_not_empty(self.object_sequence_column, "object_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.object_sequence_column, "object_sequence_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.predicts_sequence_column, "predicts_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.predicts_sequence_column, "predicts_sequence_column", self.predicts, "predicts", False)
        
        self.__awu._validate_input_columns_not_empty(self.refs_sequence_column, "refs_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.refs_sequence_column, "refs_sequence_column", self.refs, "refs", False)
        
        self.__awu._validate_input_columns_not_empty(self.predicts_partition_column, "predicts_partition_column")
        if self.__awu._is_default_or_not(self.predicts_partition_column, "1"):
            self.__awu._validate_dataframe_has_argument_columns(self.predicts_partition_column, "predicts_partition_column", self.predicts, "predicts", True)
        self.__awu._validate_input_columns_not_empty(self.refs_partition_column, "refs_partition_column")
        if self.__awu._is_default_or_not(self.refs_partition_column, "1"):
            self.__awu._validate_dataframe_has_argument_columns(self.refs_partition_column, "refs_partition_column", self.refs, "refs", True)
        self.__awu._validate_input_columns_not_empty(self.object_order_column, "object_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.object_order_column, "object_order_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.predicts_order_column, "predicts_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.predicts_order_column, "predicts_order_column", self.predicts, "predicts", False)
        
        self.__awu._validate_input_columns_not_empty(self.refs_order_column, "refs_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.refs_order_column, "refs_order_column", self.refs, "refs", False)
        
        
    def __form_tdml_query(self):
        """
        Function to generate the analytical function queries. The function defines 
        variables and list of arguments required to form the query.
        """
        
        # Output table arguments list
        self.__func_output_args_sql_names = []
        self.__func_output_args = []
        
        # Model Cataloging related attributes.
        self._sql_specific_attributes = {}
        self._sql_formula_attribute_mapper = {}
        self._target_column = None
        self._algorithm_name = None
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        if self.predict_feature_columns is not None:
            self.__func_other_arg_sql_names.append("PredictFeatureColumns")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.predict_feature_columns, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.predict_feature_units_columns is not None:
            self.__func_other_arg_sql_names.append("PredictFeatureUnitsColumns")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.predict_feature_units_columns, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.ref_feature_columns is not None:
            self.__func_other_arg_sql_names.append("RefFeatureColumns")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.ref_feature_columns, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.accumulate is not None:
            self.__func_other_arg_sql_names.append("Accumulate")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.accumulate, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        self.__func_other_arg_sql_names.append("PredictFeatureNames")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.predict_feature_names, "'"))
        self.__func_other_arg_json_datatypes.append("STRING")
        
        # Generate lists for rest of the function arguments
        sequence_input_by_list = []
        if self.object_sequence_column is not None:
            sequence_input_by_list.append("cox_coef_model:" + UtilFuncs._teradata_collapse_arglist(self.object_sequence_column, ""))
        
        if self.predicts_sequence_column is not None:
            sequence_input_by_list.append("predicts:" + UtilFuncs._teradata_collapse_arglist(self.predicts_sequence_column, ""))
        
        if self.refs_sequence_column is not None:
            sequence_input_by_list.append("refs:" + UtilFuncs._teradata_collapse_arglist(self.refs_sequence_column, ""))
        
        if len(sequence_input_by_list) > 0:
            self.__func_other_arg_sql_names.append("SequenceInputBy")
            sequence_input_by_arg_value = UtilFuncs._teradata_collapse_arglist(sequence_input_by_list, "'")
            self.__func_other_args.append(sequence_input_by_arg_value)
            self.__func_other_arg_json_datatypes.append("STRING")
            self._sql_specific_attributes["SequenceInputBy"] = sequence_input_by_arg_value
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process object
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.object)
        self.__func_input_distribution.append("DIMENSION")
        self.__func_input_arg_sql_names.append("cox_coef_model")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("NA_character_")
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.object_order_column, "\""))
        
        # Process predicts
        if self.__awu._is_default_or_not(self.predicts_partition_column, "1"):
            self.predicts_partition_column = UtilFuncs._teradata_collapse_arglist(self.predicts_partition_column, "\"")
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.predicts)
        self.__func_input_distribution.append("FACT")
        self.__func_input_arg_sql_names.append("predicts")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append(self.predicts_partition_column)
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.predicts_order_column, "\""))
        
        # Process refs
        if self.refs is not None:
            if self.__awu._is_default_or_not(self.refs_partition_column, "1"):
                self.refs_partition_column = UtilFuncs._teradata_collapse_arglist(self.refs_partition_column, "\"")
            self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.refs)
            self.__func_input_distribution.append("FACT")
            self.__func_input_arg_sql_names.append("refs")
            self.__func_input_table_view_query.append(self.__table_ref["ref"])
            self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
            self.__func_input_partition_by_cols.append(self.refs_partition_column)
            self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.refs_order_column, "\""))
        
        function_name = "CoxHazardRatio"
        # Create instance to generate SQLMR.
        self.__aqg_obj = AnalyticQueryGenerator(function_name, 
                self.__func_input_arg_sql_names, 
                self.__func_input_table_view_query, 
                self.__func_input_dataframe_type, 
                self.__func_input_distribution, 
                self.__func_input_partition_by_cols, 
                self.__func_input_order_by_cols, 
                self.__func_other_arg_sql_names, 
                self.__func_other_args, 
                self.__func_other_arg_json_datatypes, 
                self.__func_output_args_sql_names, 
                self.__func_output_args, 
                engine="ENGINE_ML")
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = self.__aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
        # Set the algorithm name for Model Cataloging.
        self._algorithm_name = self.__aqg_obj._get_alias_name_for_function(function_name)
        
    def __execute(self):
        """
        Function to generate AED nodes for output tables.
        This makes a call aed_ml_query() and then output table dataframes are created.
        """
        # Create a list of input node ids contributing to a query.
        self.__input_nodeids = []
        self.__input_nodeids.append(self.object._nodeid)
        self.__input_nodeids.append(self.predicts._nodeid)
        if self.refs is not None:
            self.__input_nodeids.append(self.refs._nodeid)
        
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_sqlmr_out_", use_default_database=True, gc_on_quit=True, quote=False)
        self.__func_output_args.insert(0, sqlmr_stdout_temp_tablename)
        try:
            # Call aed_ml_query and generate AED nodes.
            node_id_list = self.__aed_utils._aed_ml_query(self.__input_nodeids, self.sqlmr_query, self.__func_output_args, "CoxHazardRatio", self.__aqg_obj._multi_query_input_nodes)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.AED_EXEC_FAILED, str(emsg)), MessageCodes.AED_EXEC_FAILED)
        
        
        # Update output table data frames.
        self._mlresults = []
        self.result = self.__awu._create_data_set_object(df_input=node_id_list[0], metaexpr=UtilFuncs._get_metaexpr_using_columns(node_id_list[0], self.__stdout_column_info))
        self._mlresults.append(self.result)
        
    def __process_output_column_info(self):
        """ 
        Function to process the output schema for all the ouptut tables.
        This function generates list of column names and column types
        for each generated output tables, which can be used to create metaexpr.
        """
        # Collecting STDOUT output column information.
        stdout_column_info_name = []
        stdout_column_info_type = []
        if self.accumulate is not None:
            for column_name, column_type in self.__awu._retrieve_column_info(df_input=self.predicts, parameter=self.accumulate, columns=None):
                stdout_column_info_name.append(column_name)
                stdout_column_info_type.append(column_type)
                
        if self.predict_feature_columns is not None:
            for column_name, column_type in self.__awu._retrieve_column_info(df_input=self.predicts, parameter=self.predict_feature_names, columns=None):
                stdout_column_info_name.append(column_name)
                stdout_column_info_type.append(column_type)
                
            if self.ref_feature_columns is not None:
                for column_name, column_type in self.__awu._retrieve_column_info(df_input=self.refs, parameter=self.ref_feature_columns, columns=None):
                    stdout_column_info_name.append(column_name + "_ref")
                    stdout_column_info_type.append(column_type)
                    
        
        if self.predict_feature_units_columns is not None:
            if self.predict_feature_units_columns is not None:
                for column_name, column_type in self.__awu._retrieve_column_info(df_input=self.predicts, parameter=self.predict_feature_units_columns, columns=None):
                    stdout_column_info_name.append(column_name + "_units")
                    stdout_column_info_type.append(column_type)
                    
        
        stdout_column_info_name.append("hazardratio")
        stdout_column_info_type.append(self.__awu._get_json_to_sqlalchemy_mapping("float"))
        
        self.__stdout_column_info = zip(stdout_column_info_name, stdout_column_info_type)
        
    def show_query(self):
        """
        Function to return the underlying SQL query.
        When model object is created using retrieve_model(), then None is returned.
        """
        return self.sqlmr_query
        
    def get_prediction_type(self):
        """
        Function to return the Prediction type of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._prediction_type
        
    def get_target_column(self):
        """
        Function to return the Target Column of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._target_column
        
    def get_build_time(self):
        """
        Function to return the build time of the algorithm in seconds.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._build_time
        
    def _get_algorithm_name(self):
        """
        Function to return the name of the algorithm.
        """
        return self._algorithm_name
        
    def _get_sql_specific_attributes(self):
        """
        Function to return the dictionary containing the SQL specific attributes of the algorithm.
        """
        return self._sql_specific_attributes
        
    @classmethod
    def _from_model_catalog(cls,
        result = None,
        **kwargs):
        """
        Classmethod is used by Model Cataloging, to instantiate this wrapper class.
        """
        kwargs.pop("result", None)
        
        # Model Cataloging related attributes.
        target_column = kwargs.pop("__target_column", None)
        prediction_type = kwargs.pop("__prediction_type", None)
        algorithm_name = kwargs.pop("__algorithm_name", None)
        build_time = kwargs.pop("__build_time", None)

        # Let's create an object of this class.
        obj = cls(**kwargs)
        obj.result  = result 
        
        # Initialize the sqlmr_query class attribute.
        obj.sqlmr_query = None
        
        # Initialize the SQL specific Model Cataloging attributes.
        obj._sql_specific_attributes = None
        obj._target_column = target_column
        obj._prediction_type = prediction_type
        obj._algorithm_name = algorithm_name
        obj._build_time = build_time
        
        # Update output table data frames.
        obj._mlresults = []
        obj.result = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.result), source_type="table", database_name=UtilFuncs._extract_db_name(obj.result))
        obj._mlresults.append(obj.result)
        return obj
        
    def __repr__(self):
        """
        Returns the string representation for a CoxHazardRatio class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.result)
        return repr_string
        
