#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# Secondary Owner: Abhinav Sahu (abhinav.sahu@teradata.com)
# 
# Version: 1.2
# Function Version: 1.18
# 
# ################################################################## 

import inspect
import time
from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display
from teradataml.analytics.mle.DecisionForest import DecisionForest

class DecisionForestPredict:
    
    def __init__(self,
        object = None,
        newdata = None,
        id_column = None,
        detailed = False,
        terms = None,
        output_response_probdist = False,
        output_responses = None,
        newdata_sequence_column = None,
        object_sequence_column = None,
        newdata_order_column = None,
        object_order_column = None):
        """
        DESCRIPTION:
            The DecisionForestPredict function uses the model generated by the
            DecisionForest to generate predictions on a response variable
            for a test set of data. The model can be stored in either a
            teradataml DataFrame or a DecisionForest object.
         
            Note: This function is available only when teradataml is connected to
                  Vantage 1.1 or later versions.
                  
        PARAMETERS:
            object:
                Required Argument.
                Specifies the teradataml DataFrame containing the model data
                or instance of DecisionForest, which contains the model.
         
            object_order_column:
                Optional Argument.
                Specifies Order By columns for object.
                Values to this argument can be provided as a list, if multiple columns
                are used for ordering.
                Types: str OR list of Strings (str)
         
            newdata:
                Required Argument.
                Specifies the teradataml DataFrame containing the input test data.
         
            newdata_order_column:
                Optional Argument.
                Specifies Order By columns for newdata.
                Values to this argument can be provided as a list, if multiple
                columns are used for ordering.
                Types: str OR list of Strings (str)
         
            id_column:
                Required Argument.
                Specifies a column containing a unique identifier for each test point
                in the test set.
                Types: str
         
            detailed:
                Optional Argument.
                Specifies whether to output detailed information about the forest
                trees; that is, the decision tree and the specific tree information,
                including task index and tree index for each tree.
                Default Value: False
                Types: bool
         
            terms:
                Optional Argument.
                Specifies the names of the input columns to copy to the output
                teradataml DataFrame.
                Types: str OR list of Strings (str)
            
            output_response_probdist:
                Optional Argument.
                Specifies whether to output probabilities.
                Note: "output_response_probdist" argument support is only available 
                      when teradataml is connected to Vantage 1.1.1 or later.
                Default Value: False
                Types: bool
            
            output_responses:
                Optional Argument.
                Specifies all responses in input table.
                This argument requires the output_response_probdist argument to be set to True.
                Note: "output_responses" argument support is only available when 
                      teradataml is connected to Vantage 1.1.1 or later.
                Types: str OR list of Strings (str)
         
            newdata_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of
                the input argument "newdata". The argument is used to ensure
                deterministic results for functions which produce results that vary
                from run to run.
                Types: str OR list of Strings (str)
         
            object_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of
                the input argument "object". The argument is used to ensure
                deterministic results for functions which produce results that vary
                from run to run.
                Types: str OR list of Strings (str)
         
         
        RETURNS:
            Instance of DecisionForestPredict.
            Output teradataml DataFrames can be accessed using attribute
            references, such as DecisionForestPredictObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result
         
         
        RAISES:
            TeradataMlException
         
         
        EXAMPLES:
            # Load the data to run the example
            load_example_data("decisionforestpredict", ["housing_train","housing_test"])
         
            # Create teradataml DataFrame objects.
            housing_test = DataFrame.from_table("housing_test")
            housing_train = DataFrame.from_table("housing_train")
         
            # Example 1 - This example uses home sales data to create a
            # classifcation tree  that predicts home style, which can be input
            # to the DecisionForestPredict.
            formula = "homestyle ~ driveway + recroom + fullbase + gashw + airco + prefarea + price + lotsize + bedrooms + bathrms + stories + garagepl"
            rft_model = DecisionForest(data=housing_train,
                                      formula = formula,
                                      tree_type="classification",
                                      ntree=50,
                                      tree_size=100,
                                      nodesize=1,
                                      variance=0.0,
                                      max_depth=12,
                                      maxnum_categorical=20,
                                      mtry=3,
                                      mtry_seed=100,
                                      seed=100
                                      )
         
            # Use the rft_model, the model created by DecisionForest to generate
            # predictions on a response variable for a test set of data, housing_test
            # which has 54 observations of 14 variables.
            decision_forest_predict_out = DecisionForestPredict(object = rft_model,
                                                                newdata = housing_test,
                                                                id_column = "sn",
                                                                detailed = False,
                                                                terms = ["homestyle"],
                                                                newdata_sequence_column='sn',
                                                                object_sequence_column='worker_ip',
                                                                newdata_order_column=['sn', 'price'],
                                                                object_order_column=['worker_ip', 'task_index']
                                                                )
         
            # Print the results
            print(decision_forest_predict_out.result)
        
        """
        
        # Start the timer to get the build time
        _start_time = time.time()
        
        self.object  = object
        self.newdata  = newdata
        self.id_column  = id_column
        self.detailed  = detailed
        self.terms  = terms
        self.output_response_probdist  = output_response_probdist
        self.output_responses  = output_responses
        self.newdata_sequence_column  = newdata_sequence_column
        self.object_sequence_column  = object_sequence_column
        self.newdata_order_column  = newdata_order_column
        self.object_order_column  = object_order_column
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["object", self.object, False, (DataFrame)])
        self.__arg_info_matrix.append(["object_order_column", self.object_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["newdata", self.newdata, False, (DataFrame)])
        self.__arg_info_matrix.append(["newdata_order_column", self.newdata_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["id_column", self.id_column, False, (str)])
        self.__arg_info_matrix.append(["detailed", self.detailed, True, (bool)])
        self.__arg_info_matrix.append(["terms", self.terms, True, (str,list)])
        self.__arg_info_matrix.append(["output_response_probdist", self.output_response_probdist, True, (bool)])
        self.__arg_info_matrix.append(["output_responses", self.output_responses, True, (str,list)])
        self.__arg_info_matrix.append(["newdata_sequence_column", self.newdata_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["object_sequence_column", self.object_sequence_column, True, (str,list)])
        
        if inspect.stack()[1][3] != '_from_model_catalog':
            # Perform the function validations
            self.__validate()
            # Generate the ML query
            self.__form_tdml_query()
            # Process output table schema
            self.__process_output_column_info()
            # Execute ML query
            self.__execute()
            # Get the prediction type
            self._prediction_type = self.__awu._get_function_prediction_type(self)
        
        # End the timer to get the build time
        _end_time = time.time()
        
        # Calculate the build time
        self._build_time = (int)(_end_time - _start_time)
        
    def __validate(self):
        """
        Function to validate sqlmr function arguments, which verifies missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        if isinstance(self.object, DecisionForest):
            self.object = self.object._mlresults[0]

        # To use output_responses, output_response_probdist must be set to True
        if self.output_response_probdist is False and self.output_responses is not None:
            raise TeradataMlException(Messages.get_message(MessageCodes.DEPENDENT_ARG_MISSING,
                                                           'output_response_probdist=True',
                                                           'output_responses'),
                                      MessageCodes.DEPENDENT_ARG_MISSING)

        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.newdata, "newdata", None)
        self.__awu._validate_input_table_datatype(self.object, "object", DecisionForest)
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.id_column, "id_column")
        self.__awu._validate_dataframe_has_argument_columns(self.id_column, "id_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.terms, "terms")
        self.__awu._validate_dataframe_has_argument_columns(self.terms, "terms", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.newdata_sequence_column, "newdata_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_sequence_column, "newdata_sequence_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.object_sequence_column, "object_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.object_sequence_column, "object_sequence_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.newdata_order_column, "newdata_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_order_column, "newdata_order_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.object_order_column, "object_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.object_order_column, "object_order_column", self.object, "object", False)

        self.__awu._validate_input_columns_not_empty(self.output_responses, "output_responses")
        
    def __form_tdml_query(self):
        """
        Function to generate the analytical function queries. The function defines 
        variables and list of arguments required to form the query.
        """
        
        # Output table arguments list
        self.__func_output_args_sql_names = []
        self.__func_output_args = []
        
        # Model Cataloging related attributes.
        self._sql_specific_attributes = {}
        self._sql_formula_attribute_mapper = {}
        self._target_column = None
        self._algorithm_name = None
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("IdColumn")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.id_column, "\""), "'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.terms is not None:
            self.__func_other_arg_sql_names.append("Accumulate")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.terms, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.detailed is not None and self.detailed != False:
            self.__func_other_arg_sql_names.append("Detailed")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.detailed, "'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        if self.output_response_probdist is not None and self.output_response_probdist != False:
            self.__func_other_arg_sql_names.append("OutputProb")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.output_response_probdist, "'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        if self.output_responses is not None:
            self.__func_other_arg_sql_names.append("Responses")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.output_responses, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        # Generate lists for rest of the function arguments
        sequence_input_by_list = []
        if self.newdata_sequence_column is not None:
            sequence_input_by_list.append("input:" + UtilFuncs._teradata_collapse_arglist(self.newdata_sequence_column, ""))
        
        if self.object_sequence_column is not None:
            sequence_input_by_list.append("ModelTable:" + UtilFuncs._teradata_collapse_arglist(self.object_sequence_column, ""))
        
        if len(sequence_input_by_list) > 0:
            self.__func_other_arg_sql_names.append("SequenceInputBy")
            sequence_input_by_arg_value = UtilFuncs._teradata_collapse_arglist(sequence_input_by_list, "'")
            self.__func_other_args.append(sequence_input_by_arg_value)
            self.__func_other_arg_json_datatypes.append("STRING")
            self._sql_specific_attributes["SequenceInputBy"] = sequence_input_by_arg_value
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process newdata
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.newdata)
        self.__func_input_distribution.append("FACT")
        self.__func_input_arg_sql_names.append("input")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("ANY")
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.newdata_order_column, "\""))
        
        # Process object
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.object)
        self.__func_input_distribution.append("DIMENSION")
        self.__func_input_arg_sql_names.append("ModelTable")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("NA_character_")
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.object_order_column, "\""))
        
        function_name = "DecisionForestPredict"
        # Create instance to generate SQLMR.
        self.__aqg_obj = AnalyticQueryGenerator(function_name, 
                self.__func_input_arg_sql_names, 
                self.__func_input_table_view_query, 
                self.__func_input_dataframe_type, 
                self.__func_input_distribution, 
                self.__func_input_partition_by_cols, 
                self.__func_input_order_by_cols, 
                self.__func_other_arg_sql_names, 
                self.__func_other_args, 
                self.__func_other_arg_json_datatypes, 
                self.__func_output_args_sql_names, 
                self.__func_output_args, 
                engine="ENGINE_ML")
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = self.__aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
        # Set the algorithm name for Model Cataloging.
        self._algorithm_name = self.__aqg_obj._get_alias_name_for_function(function_name)
        
    def __execute(self):
        """
        Function to generate AED nodes for output tables.
        This makes a call aed_ml_query() and then output table dataframes are created.
        """
        # Create a list of input node ids contributing to a query.
        self.__input_nodeids = []
        self.__input_nodeids.append(self.newdata._nodeid)
        self.__input_nodeids.append(self.object._nodeid)
        
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_sqlmr_out_", use_default_database=True, gc_on_quit=True, quote=False)
        self.__func_output_args.insert(0, sqlmr_stdout_temp_tablename)
        try:
            # Call aed_ml_query and generate AED nodes.
            node_id_list = self.__aed_utils._aed_ml_query(self.__input_nodeids, self.sqlmr_query, self.__func_output_args, "DecisionForestPredict", self.__aqg_obj._multi_query_input_nodes)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.AED_EXEC_FAILED, str(emsg)), MessageCodes.AED_EXEC_FAILED)
        
        
        # Update output table data frames.
        self._mlresults = []
        self.result = self.__awu._create_data_set_object(df_input=node_id_list[0], metaexpr=UtilFuncs._get_metaexpr_using_columns(node_id_list[0], self.__stdout_column_info))
        self._mlresults.append(self.result)
        
    def __process_output_column_info(self):
        """ 
        Function to process the output schema for all the ouptut tables.
        This function generates list of column names and column types
        for each generated output tables, which can be used to create metaexpr.
        """
        # Collecting STDOUT output column information.
        stdout_column_info_name = []
        stdout_column_info_type = []
        if self.terms is not None:
            for column_name, column_type in self.__awu._retrieve_column_info(df_input=self.newdata, parameter=self.terms, columns=None):
                stdout_column_info_name.append(column_name)
                stdout_column_info_type.append(column_type)
                
        for column_name, column_type in self.__awu._retrieve_column_info(df_input=self.newdata, parameter=self.id_column, columns=None):
            stdout_column_info_name.append(column_name)
            stdout_column_info_type.append(column_type)
            
        stdout_column_info_name.append("prediction")
        stdout_column_info_type.append(self.__awu._get_json_to_sqlalchemy_mapping("varchar"))

        if not self.output_response_probdist:
            stdout_column_info_name.append("confidence_lower")
            stdout_column_info_type.append(self.__awu._get_json_to_sqlalchemy_mapping("float"))
            stdout_column_info_name.append("confidence_upper")
            stdout_column_info_type.append(self.__awu._get_json_to_sqlalchemy_mapping("float"))
            
        
        if self.output_response_probdist and self.output_responses is None:
            stdout_column_info_name.append("prob")
            stdout_column_info_type.append(self.__awu._get_json_to_sqlalchemy_mapping("float"))
            
        
        if self.output_response_probdist and self.output_responses is not None:
            if isinstance(self.output_responses, list):
                argValuesList = self.output_responses
            else:
                argValuesList = [self.output_responses]
            if self.output_responses is not None:
                for column_name in argValuesList:
                    stdout_column_info_name.append("prob_" + column_name)
                    stdout_column_info_type.append(self.__awu._get_json_to_sqlalchemy_mapping("float"))
                    
        
        if self.detailed:
            stdout_column_info_name.append("tree_num")
            stdout_column_info_type.append(self.__awu._get_json_to_sqlalchemy_mapping("varchar"))
            
        
        self.__stdout_column_info = zip(stdout_column_info_name, stdout_column_info_type)
        
    def show_query(self):
        """
        Function to return the underlying SQL query.
        When model object is created using retrieve_model(), then None is returned.
        """
        return self.sqlmr_query
        
    def get_prediction_type(self):
        """
        Function to return the Prediction type of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._prediction_type
        
    def get_target_column(self):
        """
        Function to return the Target Column of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._target_column
        
    def get_build_time(self):
        """
        Function to return the build time of the algorithm in seconds.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._build_time
        
    def _get_algorithm_name(self):
        """
        Function to return the name of the algorithm.
        """
        return self._algorithm_name
        
    def _get_sql_specific_attributes(self):
        """
        Function to return the dictionary containing the SQL specific attributes of the algorithm.
        """
        return self._sql_specific_attributes
        
    @classmethod
    def _from_model_catalog(cls,
        result = None,
        **kwargs):
        """
        Classmethod is used by Model Cataloging, to instantiate this wrapper class.
        """
        kwargs.pop("result", None)
        
        # Model Cataloging related attributes.
        target_column = kwargs.pop("__target_column", None)
        prediction_type = kwargs.pop("__prediction_type", None)
        algorithm_name = kwargs.pop("__algorithm_name", None)
        build_time = kwargs.pop("__build_time", None)

        # Let's create an object of this class.
        obj = cls(**kwargs)
        obj.result  = result 
        
        # Initialize the sqlmr_query class attribute.
        obj.sqlmr_query = None
        
        # Initialize the SQL specific Model Cataloging attributes.
        obj._sql_specific_attributes = None
        obj._target_column = target_column
        obj._prediction_type = prediction_type
        obj._algorithm_name = algorithm_name
        obj._build_time = build_time
        
        # Update output table data frames.
        obj._mlresults = []
        obj.result = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.result), source_type="table", database_name=UtilFuncs._extract_db_name(obj.result))
        obj._mlresults.append(obj.result)
        return obj
        
    def __repr__(self):
        """
        Returns the string representation for a DecisionForestPredict class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.result)
        return repr_string
        
