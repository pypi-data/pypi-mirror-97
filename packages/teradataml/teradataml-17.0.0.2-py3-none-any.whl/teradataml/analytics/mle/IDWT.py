#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Adithya Avvaru (adithya.avvaru@teradata.com)
# Secondary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# 
# Version: 1.2
# Function Version: 1.6
# 
# ################################################################## 

import inspect
import time
from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display

class IDWT:
    
    def __init__(self,
        coefficient = None,
        meta_table = None,
        input_columns = None,
        sort_column = None,
        partition_columns = None,
        coefficient_sequence_column = None,
        meta_table_sequence_column = None):
        """
        DESCRIPTION:
            The IDWT function is the inverse of DWT; that is, IDWT applies 
            inverse wavelet transforms on multiple sequences simultaneously.
            IDWT takes as input the output teradataml DataFrame and meta
            DataFrame output by DWT and outputs the sequences in time domain.
            (Because the IDWT output is comparable to the DWT input, the
            inverse transformation is also called the reconstruction.)
         
         
        PARAMETERS:
            coefficient:
                Required Argument.
                Specifies the name of the input teradataml DataFrame that
                contains the coefficients generated by DWT. Typically, this
                teradataml DataFrame is the output teradataml DataFrame of
                DWT.
         
            meta_table:
                Required Argument.
                Specifies the name of the input teradataml DataFrame that
                contains the meta information used in DWT. Typically, this
                teradataml DataFrame is the meta teradataml DataFrame output
                by DWT.
         
            input_columns:
                Required Argument.
                Specifies the names of the columns, present in the 'coefficent'
                teradataml DataFrame, that contain the data to be transformed.
                These columns must contain numeric values between -1e308 and
                1e308. The function treats NULL in columns as 0.
                Types: str OR list of Strings (str)
         
            sort_column:
                Required Argument.
                Specifies the name of the input column that represents the
                order of coefficients in each sequence (the waveletid column
                in the DWT output teradataml DataFrame). The column must
                contain a sequence of integer values that start from 1 for
                each sequence. If a value is missing from the sequence, then
                the function treats the corresponding data column as 0.
                Types: str
         
            partition_columns:
                Optional Argument.
                Specifies the names of the partition_columns, which identify
                the sequences. Rows with the same partition_columns values
                belong to the same sequence. If you specify multiple
                partition_columns, then the function treats the first one as
                the distribute key of the output and meta teradataml DataFrames.
                By default, all rows belong to one sequence, and the function
                generates a distribute key column named 'dwt_idrandom_name' in
                both the output teradataml DataFrame and the meta teradataml
                DataFrame. In both teradataml DataFrames, every cell of
                'dwt_idrandom_name' has the value 1.
                Types: str OR list of Strings (str)
         
            coefficient_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each
                row of the input argument "coefficient". The argument is used
                to ensure deterministic results for functions which produce
                results that vary from run to run.
                Types: str OR list of Strings (str)
         
            meta_table_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each
                row of the input argument "meta_table". The argument is used
                to ensure deterministic results for functions which produce
                results that vary from run to run.
                Types: str OR list of Strings (str)
         
        RETURNS:
            Instance of IDWT.
            Output teradataml DataFrames can be accessed using attribute
            references, such as IDWTObj.<attribute_name>.
            Output teradataml DataFrame attribute names are:
                1. output_table
                2. output
         
         
        RAISES:
            TeradataMlException
         
         
        EXAMPLES:
         
            # Load example data of "DWT".
            load_example_data("dwt", ["ville_climatedata", "dwt_filter_dim"])
         
            # The table "ville_climatedata" contains hourly climate data for five
            # cities on a given day. The table "dwt_filter_dim" contains wavelet
            # filter information.
         
            # Example 1 : Apply inverse wavelet transform on the output of
            #             DWT, to generate time series sequence.
         
            # Create teradataml DataFrame objects.
            ville_climatedata = DataFrame.from_table("ville_climatedata")
            dwt_filter_dim = DataFrame.from_table("dwt_filter_dim")
         
            DWT_out = DWT(data = ville_climatedata,
                            input_columns = ["temp_f","pressure_mbar","dewpoint_f"],
                            wavelet_filter=dwt_filter_dim,
                            sort_column = "period",
                            level = 2,
                            partition_columns = "city",
                            wavelet_filter_sequence_column="filtername"
                            )
         
            IDWT_out = IDWT(coefficient = DWT_out.coefficient,
                            meta_table = DWT_out.meta_table,
                            input_columns = ["temp_f","pressure_mbar","dewpoint_f"],
                            sort_column = "waveletid",
                            partition_columns = ["city"]
                            )
         
            # Print the results
            print(IDWT_out.output_table)
         
            # Example 2 : Alternatively, persist the outputs of DWT in
            #             Vantage and use persisted tables to perform IDWT.
         
            # Persisting DWT_out.coefficient to table named as 'dwt_coef_table'
            # and DWT_out.meta_table to table named as 'dwt_meta_table'.
            copy_to_sql(DWT_out.coefficient, "dwt_coef_table")
            copy_to_sql(DWT_out.meta_table, "dwt_meta_table")
         
            # Create teradataml DataFrame objects.
            dwt_coef_table = DataFrame.from_table("dwt_coef_table")
            dwt_meta_table = DataFrame.from_table("dwt_meta_table")
         
            IDWT_out = IDWT(coefficient = dwt_coef_table,
                            meta_table = dwt_meta_table,
                            input_columns = ["temp_f","pressure_mbar","dewpoint_f"],
                            sort_column = "waveletid",
                            partition_columns = ["city"]
                            )
         
            # Print the results
            print(IDWT_out)
        
        """
        
        # Start the timer to get the build time
        _start_time = time.time()
        
        self.coefficient  = coefficient 
        self.meta_table  = meta_table 
        self.input_columns  = input_columns 
        self.sort_column  = sort_column 
        self.partition_columns  = partition_columns 
        self.coefficient_sequence_column  = coefficient_sequence_column 
        self.meta_table_sequence_column  = meta_table_sequence_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["coefficient", self.coefficient, False, (DataFrame)])
        self.__arg_info_matrix.append(["meta_table", self.meta_table, False, (DataFrame)])
        self.__arg_info_matrix.append(["input_columns", self.input_columns, False, (str,list)])
        self.__arg_info_matrix.append(["sort_column", self.sort_column, False, (str)])
        self.__arg_info_matrix.append(["partition_columns", self.partition_columns, True, (str,list)])
        self.__arg_info_matrix.append(["coefficient_sequence_column", self.coefficient_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["meta_table_sequence_column", self.meta_table_sequence_column, True, (str,list)])
        
        if inspect.stack()[1][3] != '_from_model_catalog':
            # Perform the function validations
            self.__validate()
            # Generate the ML query
            self.__form_tdml_query()
            # Execute ML query
            self.__execute()
            # Get the prediction type
            self._prediction_type = self.__awu._get_function_prediction_type(self)
        
        # End the timer to get the build time
        _end_time = time.time()
        
        # Calculate the build time
        self._build_time = (int)(_end_time - _start_time)
        
    def __validate(self):
        """
        Function to validate sqlmr function arguments, which verifies missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.coefficient, "coefficient", None)
        self.__awu._validate_input_table_datatype(self.meta_table, "meta_table", None)
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.sort_column, "sort_column")
        self.__awu._validate_dataframe_has_argument_columns(self.sort_column, "sort_column", self.coefficient, "coefficient", False)
        
        self.__awu._validate_input_columns_not_empty(self.input_columns, "input_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.input_columns, "input_columns", self.coefficient, "coefficient", False)
        
        self.__awu._validate_input_columns_not_empty(self.partition_columns, "partition_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.partition_columns, "partition_columns", self.coefficient, "coefficient", False)
        
        self.__awu._validate_input_columns_not_empty(self.coefficient_sequence_column, "coefficient_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.coefficient_sequence_column, "coefficient_sequence_column", self.coefficient, "coefficient", False)
        
        self.__awu._validate_input_columns_not_empty(self.meta_table_sequence_column, "meta_table_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.meta_table_sequence_column, "meta_table_sequence_column", self.meta_table, "meta_table", False)
        
        
    def __form_tdml_query(self):
        """
        Function to generate the analytical function queries. The function defines 
        variables and list of arguments required to form the query.
        """
        # Generate temp table names for output table parameters if any.
        self.__output_table_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_idwt0", use_default_database=True, gc_on_quit=True, quote=False, table_type=TeradataConstants.TERADATA_TABLE)
        
        # Output table arguments list
        self.__func_output_args_sql_names = ["OutputTable"]
        self.__func_output_args = [self.__output_table_temp_tablename]
        
        # Model Cataloging related attributes.
        self._sql_specific_attributes = {}
        self._sql_formula_attribute_mapper = {}
        self._target_column = None
        self._algorithm_name = None
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("SortColumn")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.sort_column, "\""), "'"))
        self.__func_other_arg_json_datatypes.append("COLUMN_NAMES")
        
        self.__func_other_arg_sql_names.append("InputColumns")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.input_columns, "\""), "'"))
        self.__func_other_arg_json_datatypes.append("COLUMN_NAMES")
        
        if self.partition_columns is not None:
            self.__func_other_arg_sql_names.append("PartitionColumns")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.partition_columns, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMN_NAMES")
        
        # Generate lists for rest of the function arguments
        sequence_input_by_list = []
        if self.coefficient_sequence_column is not None:
            sequence_input_by_list.append("InputTable:" + UtilFuncs._teradata_collapse_arglist(self.coefficient_sequence_column, ""))
        
        if self.meta_table_sequence_column is not None:
            sequence_input_by_list.append("MetaTable:" + UtilFuncs._teradata_collapse_arglist(self.meta_table_sequence_column, ""))
        
        if len(sequence_input_by_list) > 0:
            self.__func_other_arg_sql_names.append("SequenceInputBy")
            sequence_input_by_arg_value = UtilFuncs._teradata_collapse_arglist(sequence_input_by_list, "'")
            self.__func_other_args.append(sequence_input_by_arg_value)
            self.__func_other_arg_json_datatypes.append("STRING")
            self._sql_specific_attributes["SequenceInputBy"] = sequence_input_by_arg_value
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process coefficient
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.coefficient, False)
        self.__func_input_distribution.append("NONE")
        self.__func_input_arg_sql_names.append("InputTable")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("NA_character_")
        self.__func_input_order_by_cols.append("NA_character_")
        
        # Process meta_table
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.meta_table, False)
        self.__func_input_distribution.append("NONE")
        self.__func_input_arg_sql_names.append("MetaTable")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("NA_character_")
        self.__func_input_order_by_cols.append("NA_character_")
        
        function_name = "IDWT"
        # Create instance to generate SQLMR.
        self.__aqg_obj = AnalyticQueryGenerator(function_name, 
                self.__func_input_arg_sql_names, 
                self.__func_input_table_view_query, 
                self.__func_input_dataframe_type, 
                self.__func_input_distribution, 
                self.__func_input_partition_by_cols, 
                self.__func_input_order_by_cols, 
                self.__func_other_arg_sql_names, 
                self.__func_other_args, 
                self.__func_other_arg_json_datatypes, 
                self.__func_output_args_sql_names, 
                self.__func_output_args, 
                engine="ENGINE_ML")
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = self.__aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
        # Set the algorithm name for Model Cataloging.
        self._algorithm_name = self.__aqg_obj._get_alias_name_for_function(function_name)
        
    def __execute(self):
        """
        Function to execute SQL-MR queries. 
        Create DataFrames for the required SQL-MR outputs.
        """
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_sqlmr_out_", use_default_database=True, gc_on_quit=True, quote=False, table_type=TeradataConstants.TERADATA_TABLE)
        try:
            # Generate the output.
            UtilFuncs._create_table(sqlmr_stdout_temp_tablename, self.sqlmr_query)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.TDMLDF_EXEC_SQL_FAILED, str(emsg)), MessageCodes.TDMLDF_EXEC_SQL_FAILED)
        
        # Update output table data frames.
        self._mlresults = []
        self.output_table = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(self.__output_table_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(self.__output_table_temp_tablename))
        self.output = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(sqlmr_stdout_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(sqlmr_stdout_temp_tablename))
        self._mlresults.append(self.output_table)
        self._mlresults.append(self.output)
        
    def show_query(self):
        """
        Function to return the underlying SQL query.
        When model object is created using retrieve_model(), then None is returned.
        """
        return self.sqlmr_query
        
    def get_prediction_type(self):
        """
        Function to return the Prediction type of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._prediction_type
        
    def get_target_column(self):
        """
        Function to return the Target Column of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._target_column
        
    def get_build_time(self):
        """
        Function to return the build time of the algorithm in seconds.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._build_time
        
    def _get_algorithm_name(self):
        """
        Function to return the name of the algorithm.
        """
        return self._algorithm_name
        
    def _get_sql_specific_attributes(self):
        """
        Function to return the dictionary containing the SQL specific attributes of the algorithm.
        """
        return self._sql_specific_attributes
        
    @classmethod
    def _from_model_catalog(cls,
        output_table = None,
        output = None,
        **kwargs):
        """
        Classmethod is used by Model Cataloging, to instantiate this wrapper class.
        """
        kwargs.pop("output_table", None)
        kwargs.pop("output", None)
        
        # Model Cataloging related attributes.
        target_column = kwargs.pop("__target_column", None)
        prediction_type = kwargs.pop("__prediction_type", None)
        algorithm_name = kwargs.pop("__algorithm_name", None)
        build_time = kwargs.pop("__build_time", None)

        # Let's create an object of this class.
        obj = cls(**kwargs)
        obj.output_table  = output_table 
        obj.output  = output 
        
        # Initialize the sqlmr_query class attribute.
        obj.sqlmr_query = None
        
        # Initialize the SQL specific Model Cataloging attributes.
        obj._sql_specific_attributes = None
        obj._target_column = target_column
        obj._prediction_type = prediction_type
        obj._algorithm_name = algorithm_name
        obj._build_time = build_time
        
        # Update output table data frames.
        obj._mlresults = []
        obj.output_table = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.output_table), source_type="table", database_name=UtilFuncs._extract_db_name(obj.output_table))
        obj.output = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.output), source_type="table", database_name=UtilFuncs._extract_db_name(obj.output))
        obj._mlresults.append(obj.output_table)
        obj._mlresults.append(obj.output)
        return obj
        
    def __repr__(self):
        """
        Returns the string representation for a IDWT class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.output)
        repr_string="{}\n\n\n############ output_table Output ############".format(repr_string)
        repr_string = "{}\n\n{}".format(repr_string,self.output_table)
        return repr_string
        
