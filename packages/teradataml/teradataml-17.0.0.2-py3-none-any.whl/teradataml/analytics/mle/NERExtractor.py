#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Rohit Agrawal (rohit.agrawal@teradata.com)
# Secondary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# 
# Version: 1.2
# Function Version: 1.8
# 
# ################################################################## 

import inspect
import time
from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display

class NERExtractor:
    
    def __init__(self,
        data = None,
        rules = None,
        dict = None,
        text_column = None,
        models = None,
        language = "en",
        show_entity_context = 0,
        accumulate = None,
        data_sequence_column = None,
        rules_sequence_column = None,
        dict_sequence_column = None,
        data_partition_column = "ANY",
        data_order_column = None,
        rules_order_column = None,
        dict_order_column = None):
        """
        DESCRIPTION:
            The NERExtractor function takes input documents and extracts 
            specified entities, using one or more CRF models (output of the
            function NERTrainer) and, if appropriate, rules (regular expressions) 
            or a dictionary.
            The function uses models to extract the names of persons, locations,
            and organizations; rules to extract entities that conform to rules
            (such as phone numbers, times, and dates); and a dictionary to
            extract known entities.
            Note:
                NERExtractor uses below files that are preinstalled on the ML Engine:
                    * ner_model_1.0_reuters_en_all_141011.bin
                    * template_1.txt
        
        PARAMETERS:
            data:
                Required Argument.
                Specifies an input teradataml DataFrame containing test data.
            
            data_partition_column:
                Optional Argument.
                Specifies Partition By columns for data.
                Values to this argument can be provided as a list, if multiple 
                columns are used for partition.
                Default Value: ANY
                Types: str OR list of Strings (str)
            
            data_order_column:
                Optional Argument.
                Specifies Order By columns for data.
                Values to this argument can be provided as a list, if multiple 
                columns are used for ordering.
                Types: str OR list of Strings (str)
            
            rules:
                Optional Argument.
                Specifies a teradataml DataFrame that contains the regular expressions
                used to parse input data.
            
            rules_order_column:
                Optional Argument.
                Specifies Order By columns for rules.
                Values to this argument can be provided as a list, if multiple 
                columns are used for ordering.
                Types: str OR list of Strings (str)
            
            dict:
                Optional Argument.
                Specifies a teradataml DataFrame that contains the dictionary
                for named entities.
            
            dict_order_column:
                Optional Argument.
                Specifies Order By columns for dict.
                Values to this argument can be provided as a list, if multiple 
                columns are used for ordering.
                Types: str OR list of Strings (str)
            
            text_column:
                Required Argument.
                Specifies the name of the input teradataml DataFrame column that 
                contains the text to analyze.
                Types: str
            
            models:
                Optional Argument.
                Specifies the CRF models (binary files) to use, generated by 
                "NERTrainer" function. If you specified the ExtractorJAR argument in the
                NERTrainer call that generated model_file, then you must specify
                the same jar_file in this argument. You must install model_file and 
                jar_file in ML Engine under the user search path before calling
                the NERExtractor function.
                Note:
                    1. The names model_file  and jar_file are case-sensitive.
                    2. For JAR files installation instructions, see Teradata Vantage User Guide.
                Types: str OR list of strs
            
            language:
                Optional Argument.
                Specifies the language of the input text:
                    * en - English
                    * zh_CN - Simplified Chinese
                    * zh_TW - Traditional Chinese
                Default Value: "en"
                Permitted Values: en, zh_CN, zh_TW
                Types: str
            
            show_entity_context:
                Optional Argument.
                Specifies the number of context words to output. If the number of context words is
                n (which must be a positive integer), the function outputs the n
                words that precede the entity, the entity, and the n words that
                follow the entity. 
                Default Value: 0
                Types: int
            
            accumulate:
                Optional Argument.
                Specifies the names of the input teradataml DataFrame columns to copy 
                to the output teradataml dataframe.
                Types: str OR list of Strings (str)
            
            data_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of 
                the input argument "data". The argument is used to ensure 
                deterministic results for functions which produce results that vary 
                from run to run.
                Types: str OR list of Strings (str)
            
            rules_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of 
                the input argument "rules". The argument is used to ensure 
                deterministic results for functions which produce results that vary 
                from run to run.
                Types: str OR list of Strings (str)
            
            dict_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of 
                the input argument "dict". The argument is used to ensure 
                deterministic results for functions which produce results that vary 
                from run to run.
                Types: str OR list of Strings (str)
        
        RETURNS:
            Instance of NERExtractor.
            Output teradataml DataFrames can be accessed using attribute 
            references, such as NERExtractorObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result
        
        
        RAISES:
            TeradataMlException
        
        
        EXAMPLES:
            # Before running NERExtractor, run NERTrainer to generate model file.
            # Load the data to run the NERTrainer example.
            load_example_data("nertrainer","ner_sports_train")

            # Create teradataml DataFrame object.
            ner_sports_train = DataFrame.from_table("ner_sports_train")

            # Run the train function to generate model file for NERExtractor function.
            nertrainer_train = NERTrainer(data=ner_sports_train,
                                          text_coloumn='content',
                                          model_file='ner_model.bin',
                                          feature_template='template_1.txt'
                                          )
            # Print the result DataFrame.
            print(nertrainer_train.result)

            # Run NERExtractor
            # Example 1 - Pass rule teradataml dataframe as a set of rules.
            # Load the data to run the example.
            load_example_data("nerextractor", ["ner_sports_test2", "rule_table"])

            # Create teradataml DataFrame object.
            ner_sports_test2 = DataFrame.from_table("ner_sports_test2")
            rule_table = DataFrame.from_table("rule_table")

            # Run the extractor function using rules entity.
            nerextractor_out = NERExtractor(data=ner_sports_test2,
                                            data_partition_column='ANY',
                                            rules=rule_table,
                                            text_column='content',
                                            accumulate='id',
                                            language='en',
                                            models='ner_model.bin',
                                            show_entity_context=0,
                                            data_sequence_column='id'
                                            )

            # Print the result DataFrame.
            print(nerextractor_out.result)

            # Example 2 - Pass dict teradataml dataframe as a set of dictionary.
            # Load the data to run the example.
            load_example_data("nerextractor", ["ner_extractor_text", "dict_table"])

            # Create teradataml DataFrame object.
            ner_extractor_text = DataFrame.from_table("ner_extractor_text")
            dict_table = DataFrame.from_table("dict_table")

            # Run the extractor function using rules entity.
            nerextractor_out = NERExtractor(data=ner_extractor_text,
                                            data_partition_column='ANY',
                                            dict=dict_table,
                                            text_column='content',
                                            accumulate='id',
                                            language='en',
                                            models='ner_model.bin',
                                            show_entity_context=0,
                                            data_sequence_column='id',
                                            dict_sequence_column='type1'
                                            )

            # Print the result DataFrame.
            print(nerextractor_out.result)
        
        """
        
        # Start the timer to get the build time
        _start_time = time.time()
        
        self.data  = data 
        self.rules  = rules 
        self.dict  = dict 
        self.text_column  = text_column 
        self.models  = models 
        self.language  = language 
        self.show_entity_context  = show_entity_context 
        self.accumulate  = accumulate 
        self.data_sequence_column  = data_sequence_column 
        self.rules_sequence_column  = rules_sequence_column 
        self.dict_sequence_column  = dict_sequence_column 
        self.data_partition_column  = data_partition_column 
        self.data_order_column  = data_order_column 
        self.rules_order_column  = rules_order_column 
        self.dict_order_column  = dict_order_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["data", self.data, False, (DataFrame)])
        self.__arg_info_matrix.append(["data_partition_column", self.data_partition_column, True, (str,list)])
        self.__arg_info_matrix.append(["data_order_column", self.data_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["rules", self.rules, True, (DataFrame)])
        self.__arg_info_matrix.append(["rules_order_column", self.rules_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["dict", self.dict, True, (DataFrame)])
        self.__arg_info_matrix.append(["dict_order_column", self.dict_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["text_column", self.text_column, False, (str)])
        self.__arg_info_matrix.append(["models", self.models, True, (str,list)])
        self.__arg_info_matrix.append(["language", self.language, True, (str)])
        self.__arg_info_matrix.append(["show_entity_context", self.show_entity_context, True, (int)])
        self.__arg_info_matrix.append(["accumulate", self.accumulate, True, (str,list)])
        self.__arg_info_matrix.append(["data_sequence_column", self.data_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["rules_sequence_column", self.rules_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["dict_sequence_column", self.dict_sequence_column, True, (str,list)])
        
        if inspect.stack()[1][3] != '_from_model_catalog':
            # Perform the function validations
            self.__validate()
            # Generate the ML query
            self.__form_tdml_query()
            # Execute ML query
            self.__execute()
            # Get the prediction type
            self._prediction_type = self.__awu._get_function_prediction_type(self)
        
        # End the timer to get the build time
        _end_time = time.time()
        
        # Calculate the build time
        self._build_time = (int)(_end_time - _start_time)
        
    def __validate(self):
        """
        Function to validate sqlmr function arguments, which verifies missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.data, "data", None)
        self.__awu._validate_input_table_datatype(self.rules, "rules", None)
        self.__awu._validate_input_table_datatype(self.dict, "dict", None)
        
        # Check for permitted values
        language_permitted_values = ["EN", "ZH_CN", "ZH_TW"]
        self.__awu._validate_permitted_values(self.language, language_permitted_values, "language")
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.text_column, "text_column")
        self.__awu._validate_dataframe_has_argument_columns(self.text_column, "text_column", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.accumulate, "accumulate")
        self.__awu._validate_dataframe_has_argument_columns(self.accumulate, "accumulate", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.data_sequence_column, "data_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.data_sequence_column, "data_sequence_column", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.rules_sequence_column, "rules_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.rules_sequence_column, "rules_sequence_column", self.rules, "rules", False)
        
        self.__awu._validate_input_columns_not_empty(self.dict_sequence_column, "dict_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.dict_sequence_column, "dict_sequence_column", self.dict, "dict", False)
        
        self.__awu._validate_input_columns_not_empty(self.data_partition_column, "data_partition_column")
        if self.__awu._is_default_or_not(self.data_partition_column, "ANY"):
            self.__awu._validate_dataframe_has_argument_columns(self.data_partition_column, "data_partition_column", self.data, "data", True)
        self.__awu._validate_input_columns_not_empty(self.data_order_column, "data_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.data_order_column, "data_order_column", self.data, "data", False)
        
        self.__awu._validate_input_columns_not_empty(self.rules_order_column, "rules_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.rules_order_column, "rules_order_column", self.rules, "rules", False)
        
        self.__awu._validate_input_columns_not_empty(self.dict_order_column, "dict_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.dict_order_column, "dict_order_column", self.dict, "dict", False)
        
        
    def __form_tdml_query(self):
        """
        Function to generate the analytical function queries. The function defines 
        variables and list of arguments required to form the query.
        """
        
        # Output table arguments list
        self.__func_output_args_sql_names = []
        self.__func_output_args = []
        
        # Model Cataloging related attributes.
        self._sql_specific_attributes = {}
        self._sql_formula_attribute_mapper = {}
        self._target_column = None
        self._algorithm_name = None
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("TextColumn")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.text_column, "\""), "'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.accumulate is not None:
            self.__func_other_arg_sql_names.append("Accumulate")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.accumulate, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.language is not None and self.language != "en":
            self.__func_other_arg_sql_names.append("InputLanguage")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.language, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.models is not None:
            self.__func_other_arg_sql_names.append("Models")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.models, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.show_entity_context is not None and self.show_entity_context != 0:
            self.__func_other_arg_sql_names.append("ShowContext")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.show_entity_context, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        # Generate lists for rest of the function arguments
        sequence_input_by_list = []
        if self.data_sequence_column is not None:
            sequence_input_by_list.append("input:" + UtilFuncs._teradata_collapse_arglist(self.data_sequence_column, ""))
        
        if self.rules_sequence_column is not None:
            sequence_input_by_list.append("rules:" + UtilFuncs._teradata_collapse_arglist(self.rules_sequence_column, ""))
        
        if self.dict_sequence_column is not None:
            sequence_input_by_list.append("dict:" + UtilFuncs._teradata_collapse_arglist(self.dict_sequence_column, ""))
        
        if len(sequence_input_by_list) > 0:
            self.__func_other_arg_sql_names.append("SequenceInputBy")
            sequence_input_by_arg_value = UtilFuncs._teradata_collapse_arglist(sequence_input_by_list, "'")
            self.__func_other_args.append(sequence_input_by_arg_value)
            self.__func_other_arg_json_datatypes.append("STRING")
            self._sql_specific_attributes["SequenceInputBy"] = sequence_input_by_arg_value
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process data
        if self.__awu._is_default_or_not(self.data_partition_column, "ANY"):
            self.data_partition_column = UtilFuncs._teradata_collapse_arglist(self.data_partition_column, "\"")
        
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.data, False)
        self.__func_input_distribution.append("FACT")
        self.__func_input_arg_sql_names.append("input")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append(self.data_partition_column)
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.data_order_column, "\""))
        
        # Process rules
        if self.rules is not None:
            self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.rules, False)
            self.__func_input_distribution.append("DIMENSION")
            self.__func_input_arg_sql_names.append("rules")
            self.__func_input_table_view_query.append(self.__table_ref["ref"])
            self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
            self.__func_input_partition_by_cols.append("NA_character_")
            self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.rules_order_column, "\""))
        
        # Process dict
        if self.dict is not None:
            self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.dict, False)
            self.__func_input_distribution.append("DIMENSION")
            self.__func_input_arg_sql_names.append("dict")
            self.__func_input_table_view_query.append(self.__table_ref["ref"])
            self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
            self.__func_input_partition_by_cols.append("NA_character_")
            self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.dict_order_column, "\""))
        
        function_name = "NERExtractor"
        # Create instance to generate SQLMR.
        self.__aqg_obj = AnalyticQueryGenerator(function_name, 
                self.__func_input_arg_sql_names, 
                self.__func_input_table_view_query, 
                self.__func_input_dataframe_type, 
                self.__func_input_distribution, 
                self.__func_input_partition_by_cols, 
                self.__func_input_order_by_cols, 
                self.__func_other_arg_sql_names, 
                self.__func_other_args, 
                self.__func_other_arg_json_datatypes, 
                self.__func_output_args_sql_names, 
                self.__func_output_args, 
                engine="ENGINE_ML")
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = self.__aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
        # Set the algorithm name for Model Cataloging.
        self._algorithm_name = self.__aqg_obj._get_alias_name_for_function(function_name)
        
    def __execute(self):
        """
        Function to execute SQL-MR queries. 
        Create DataFrames for the required SQL-MR outputs.
        """
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_sqlmr_out_", use_default_database=True, gc_on_quit=True, quote=False)
        try:
            # Generate the output.
            UtilFuncs._create_view(sqlmr_stdout_temp_tablename, self.sqlmr_query)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.TDMLDF_EXEC_SQL_FAILED, str(emsg)), MessageCodes.TDMLDF_EXEC_SQL_FAILED)
        
        # Update output table data frames.
        self._mlresults = []
        self.result = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(sqlmr_stdout_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(sqlmr_stdout_temp_tablename))
        self._mlresults.append(self.result)
        
    def show_query(self):
        """
        Function to return the underlying SQL query.
        When model object is created using retrieve_model(), then None is returned.
        """
        return self.sqlmr_query
        
    def get_prediction_type(self):
        """
        Function to return the Prediction type of the algorithm.
        When model object is created using retrieve_model(), then the value returned is
        as saved in the Model Catalog.
        """
        return self._prediction_type
        
    def get_target_column(self):
        """
        Function to return the Target Column of the algorithm.
        When model object is created using retrieve_model(), then the value returned is
        as saved in the Model Catalog.
        """
        return self._target_column
        
    def get_build_time(self):
        """
        Function to return the build time of the algorithm in seconds.
        When model object is created using retrieve_model(), then the value returned is
        as saved in the Model Catalog.
        """
        return self._build_time
        
    def _get_algorithm_name(self):
        """
        Function to return the name of the algorithm.
        """
        return self._algorithm_name
        
    def _get_sql_specific_attributes(self):
        """
        Function to return the dictionary containing the SQL specific attributes of the algorithm.
        """
        return self._sql_specific_attributes
        
    @classmethod
    def _from_model_catalog(cls,
        result = None,
        **kwargs):
        """
        Classmethod is used by Model Cataloging, to instantiate this wrapper class.
        """
        kwargs.pop("result", None)
        
        # Model Cataloging related attributes.
        target_column = kwargs.pop("__target_column", None)
        prediction_type = kwargs.pop("__prediction_type", None)
        algorithm_name = kwargs.pop("__algorithm_name", None)
        build_time = kwargs.pop("__build_time", None)
        
        # Let's create an object of this class.
        obj = cls(**kwargs)
        obj.result  = result 
        
        # Initialize the sqlmr_query class attribute.
        obj.sqlmr_query = None
        
        # Initialize the SQL specific Model Cataloging attributes.
        obj._sql_specific_attributes = None
        obj._target_column = target_column
        obj._prediction_type = prediction_type
        obj._algorithm_name = algorithm_name
        obj._build_time = build_time
        
        # Update output table data frames.
        obj._mlresults = []
        obj.result = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.result), source_type="table", database_name=UtilFuncs._extract_db_name(obj.result))
        obj._mlresults.append(obj.result)
        return obj
        
    def __repr__(self):
        """
        Returns the string representation for a NERExtractor class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.result)
        return repr_string
        
