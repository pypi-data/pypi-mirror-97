#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# Secondary Owner: Sanath Vobilisetty (sanath.vobilisetty@teradata.com)
# 
# Version: 1.2
# Function Version: 1.14
# 
# ################################################################## 

import inspect
import time
from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display
from teradataml.options.configure import configure
from teradataml.analytics.mle.NaiveBayesTextClassifier import NaiveBayesTextClassifier
from teradataml.analytics.mle.NaiveBayesTextClassifier2 import NaiveBayesTextClassifier2

class NaiveBayesTextClassifierPredict:
    
    def __init__(self,
        object = None,
        newdata = None,
        input_token_column = None,
        doc_id_columns = None,
        model_type = "MULTINOMIAL",
        top_k = None,
        model_token_column = None,
        model_category_column = None,
        model_prob_column = None,
        terms = None,
        output_responses = None,
        output_prob = False,
        newdata_sequence_column = None,
        object_sequence_column = None,
        newdata_partition_column = None,
        newdata_order_column = None,
        object_order_column = None,
        stopwords = None,
        is_tokenized = True,
        convert_to_lower_case = False,
        stem_tokens = True,
        stopwords_sequence_column = None,
        stopwords_order_column = None):
        """
        DESCRIPTION:
            The NaiveBayesTextClassifierPredict function uses the model
            teradataml DataFrame generated by the NaiveBayesTextClassifier or
            NaiveBayesTextClassifier2 function to predict outcomes for test data.
            Test data can be in the form of either documents or tokens.

            Note:
                1. This function is available only when teradataml is connected to
                   Vantage 1.1 or later versions.
                2. Teradata recommends to use NaiveBayesTextClassifier function when
                   teradataml is connected to Vantage 1.1.1 or earlier versions.
                3. Teradata recommends to use NaiveBayesTextClassifier2 function when
                   teradataml is connected to Vantage 1.3 or later versions.
        
        
        PARAMETERS:
            object:
                Required Argument.
                Specifies the teradataml DataFrame containing the model data
                or instance of NaiveBayesTextClassifier or NaiveBayesTextClassifier2,
                which contains the model.
            
            object_order_column:
                Optional Argument.
                Specifies Order By columns for "object".
                Values to this argument can be provided as a list, if multiple 
                columns are used for ordering.
                Types: str OR list of Strings (str)
            
            newdata:
                Required Argument.
                Specifies the teradataml DataFrame containing the input test
                data.
            
            newdata_partition_column:
                Required Argument.
                Specifies Partition By columns for "newdata".
                Values to this argument can be provided as a list, if multiple 
                columns are used for partitioning.
                Types: str OR list of Strings (str)
            
            newdata_order_column:
                Optional Argument.
                Specifies Order By columns for "newdata".
                Values to this argument can be provided as a list, if multiple 
                columns are used for ordering.
                Types: str OR list of Strings (str)
            
            input_token_column:
                Required Argument.
                Specifies the name of the column in the input argument "newdata"
                that contains the texts or tokens.
                Types: str
            
            doc_id_columns:
                Optional Argument. Required if teradataml is connected to
                Vantage 1.1.1 or earlier version.
                Specifies the names of the columns in the input argument
                "newdata" that contain the document identifier.
                Types: str OR list of Strings (str)
            
            model_type:
                Optional Argument.
                Specifies the model type of the text classifier. 
                Default Value: "MULTINOMIAL"
                Permitted Values: MULTINOMIAL, BERNOULLI
                Types: str
            
            top_k:
                Optional Argument.
                Specifies the number of most likely prediction categories to output
                with their log-likelihood values (for example, the top 10 most
                likely prediction categories). The default is all prediction
                categories.
                Note:
                    "top_k" cannot be specified along with "output_responses".
                Types: int
            
            model_token_column:
                Optional Argument.
                Specifies the name of the column in the argument "object" that
                contains the tokens. The default value is the first column of
                the model.
                Note:
                    This argument must be specified along with "model_category_column"
                    and "model_prob_column".
                Types: str
            
            model_category_column:
                Optional Argument.
                Specifies the name of the column in the argument "object"
                that contains the prediction categories. The default value is
                the second column of the model.
                Note:
                    This argument must be specified along with "model_token_column"
                    and "model_prob_column".
                Types: str
            
            model_prob_column:
                Optional Argument.
                Specifies the name of the column in the argument "object" that
                contains the token counts. The default value is the third
                column of the model.
                Note:
                    This argument must be specified along with "model_token_column"
                    and "model_category_column".
                Types: str
            
            output_prob:
                Optional Argument.
                Specifies whether to output probabilities.
                Default Value: False
                Types: bool

            terms:
                Optional Argument.
                Specifies the names of the input teradataml DataFrame columns to copy
                to the output teradataml DataFrame.
                Types: str OR list of Strings (str)

            output_responses:
                Optional Argument.
                Specifies a list of output_responses to output.
                Note:
                    1. "output_responses" argument support is only available when teradataml
                       is connected to Vantage 1.1.1 or later versions.
                    2. "output_responses" cannot be specified along with "top_k".
                Types: str OR list of Strings (str)
            
            newdata_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of 
                the input argument "newdata". The argument is used to ensure 
                deterministic results for functions which produce results that vary 
                from run to run.
                Types: str OR list of Strings (str)
            
            object_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of 
                the input argument "object". The argument is used to ensure 
                deterministic results for functions which produce results that vary 
                from run to run.
                Types: str OR list of Strings (str)

            stopwords:
                Optional Argument when "is_tokenized" is 'False', disallowed otherwise.
                Specifies the teradataml DataFrame defining the stop words.
                Note:
                    "stopwords" argument support is only available when teradataml
                    is connected to Vantage 1.3 or later versions.

            stopwords_order_column:
                Optional Argument.
                Specifies Order By columns for "stopwords".
                Values to this argument can be provided as a list, if multiple
                columns are used for ordering.
                Note:
                    "stopwords_order_column" argument support is only available when
                    teradataml is connected to Vantage 1.3 or later versions.
                Types: str OR list of Strings (str)

            is_tokenized:
                Optional Argument.
                Specifies whether the input data is tokenized or not.
                When it is set to 'True', input data is tokenized, otherwise input data
                is not tokenized and will be tokenized internally.
                Note:
                    "is_tokenized" argument support is only available when teradataml
                    is connected to Vantage 1.3 or later versions.
                Default Value: True
                Types: bool

            convert_to_lower_case:
                Optional Argument when "is_tokenized" is 'False', disallowed otherwise.
                Specifies whether to convert all letters in the input text to lowercase.
                value "true".
                Note:
                    "convert_to_lower_case" argument support is only available when
                    teradataml is connected to Vantage 1.3 or later versions.
                Default Value: False
                Types: bool

            stem_tokens:
                Optional Argument when "is_tokenized" is 'False', disallowed otherwise.
                Specifies whether to stem the tokens as part of text tokenization.
                Note:
                    "stem_tokens" argument support is only available when teradataml
                    is connected to Vantage 1.3 or later versions.
                Default Value: True
                Types: bool
            
            stopwords_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of 
                the input argument "stopwords". The argument is used to ensure 
                deterministic results for functions which produce results that vary 
                from run to run.
                Note:
                    "stopwords_sequence_column" argument support is only available when
                    teradataml is connected to Vantage 1.3 or later versions.
                Types: str OR list of Strings (str)
        
        RETURNS:
            Instance of NaiveBayesTextClassifierPredict.
            Output teradataml DataFrames can be accessed using attribute 
            references, such as 
            NaiveBayesTextClassifierPredictObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result
        
        
        RAISES:
            TeradataMlException, TypeError, ValueError
        
        
        EXAMPLES:
            # Load the data to run the example.
            load_example_data("NaiveBayesTextClassifierPredict",["complaints_tokens_test","token_table",
                              "complaints","complaints_mini"])

            # Create teradataml DataFrame.
            token_table = DataFrame("token_table")
            complaints_tokens_test = DataFrame("complaints_tokens_test")
            complaints = DataFrame("complaints")
            complaints_mini = DataFrame("complaints_mini")

            # Example 1 -
            # We will try to predict the 'tokens' for the complaints_tokens_test
            # represented by the data points in the train data (token_table).
            # Run NaiveBayesTextClassifier on the train data.
            nbt_out = NaiveBayesTextClassifier(data = token_table,
                                               token_column = 'token',
                                               doc_id_columns = 'doc_id',
                                               doc_category_column = 'category',
                                               model_type = "Bernoulli",
                                               data_partition_column = 'category')

            # Use the generated model to predict the 'tokens' on the test data
            # complaints_tokens_test by using nbt_out model which is
            # generated by NaiveBayesTextClassifier.

            nbt_predict_out1 = NaiveBayesTextClassifierPredict(object = nbt_out,
                                                              newdata = complaints_tokens_test,
                                                              input_token_column = 'token',
                                                              doc_id_columns = 'doc_id',
                                                              model_type = "Bernoulli",
                                                              model_token_column = 'token',
                                                              model_category_column = 'category',
                                                              model_prob_column = 'prob',
                                                              newdata_partition_column = 'doc_id')

            # Print the result DataFrame.
            print(nbt_predict_out1.result)

            # Example 2 - "top_k" specified and "is_tokenized" set to 'False'
            # We will try to predict the 'documents' for the complaints_test
            # represented by the data points in the train data (complaints).
            # Run NaiveBayesTextClassifier2 on the train data.
            # Note:
            #     This Example will work only  when teradataml is connected
            #     to Vantage 1.3 or later.
            nbtct2_out = NaiveBayesTextClassifier2(data=complaints,
                                                  doc_category_column='category',
                                                  text_column='text_data',
                                                  doc_id_column='doc_id',
                                                  model_type='BERNOULLI',
                                                  is_tokenized=False
                                                  )

            # Use the generated model to predict the 'documents' on the test data
            # complaints_test by using Bernoulli model nbtct2_out which is
            # generated by NaiveBayesTextClassifier2.

            nbt_predict_out2 = NaiveBayesTextClassifierPredict(object = nbtct2_out,
                                                              newdata = complaints_mini,
                                                              input_token_column = 'text_data',
                                                              doc_id_columns = 'doc_id',
                                                              model_type = "Bernoulli",
                                                              newdata_partition_column = 'doc_id',
                                                              top_k=2,
                                                              output_prob=True,
                                                              is_tokenized=False)

            # Print the result DataFrame.
            print(nbt_predict_out2.result)

            # Example 3 - "top_k" omitted and "is_tokenized" set to 'True'
            # The input teradataml DataFrame 'complaints_test' is tokenized using
            # TextTokenizer function.
            # Note:
            #     This Example will work only  when teradataml is connected
            #     to Vantage 1.3 or later.
            complaints_test_tokenized = TextTokenizer(data=complaints_mini,
                                               text_column='text_data',
                                               language='en',
                                               output_delimiter=' ',
                                               output_byword =True,
                                               accumulate=['doc_id', 'category'])

            # Use input teradataml DataFrame complaints_test_tokenized which is the output of
            # TextTokenizer function and Bernoulli model nbtct2_out which is
            # generated by NaiveBayesTextClassifier2.
            nbt_predict_out3 = NaiveBayesTextClassifierPredict(object = nbtct2_out,
                                                              newdata = complaints_test_tokenized.result,
                                                              input_token_column = 'token',
                                                              doc_id_columns = 'doc_id',
                                                              output_responses=['crash','no_crash'],
                                                              model_type = "Bernoulli",
                                                              newdata_partition_column = 'doc_id',
                                                              output_prob=True,
                                                              is_tokenized=True)

            # Print the result DataFrame.
            print(nbt_predict_out3.result)
        
        """
        
        # Start the timer to get the build time
        _start_time = time.time()
        
        self.object  = object 
        self.newdata  = newdata 
        self.input_token_column  = input_token_column 
        self.doc_id_columns  = doc_id_columns 
        self.model_type  = model_type 
        self.top_k  = top_k 
        self.model_token_column  = model_token_column 
        self.model_category_column  = model_category_column 
        self.model_prob_column  = model_prob_column 
        self.terms  = terms 
        self.output_responses  = output_responses 
        self.output_prob  = output_prob 
        self.stopwords  = stopwords 
        self.is_tokenized  = is_tokenized 
        self.convert_to_lower_case  = convert_to_lower_case 
        self.stem_tokens  = stem_tokens 
        self.newdata_sequence_column  = newdata_sequence_column 
        self.object_sequence_column  = object_sequence_column 
        self.stopwords_sequence_column  = stopwords_sequence_column 
        self.newdata_partition_column  = newdata_partition_column 
        self.newdata_order_column  = newdata_order_column 
        self.object_order_column  = object_order_column 
        self.stopwords_order_column  = stopwords_order_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["object", self.object, False, (DataFrame)])
        self.__arg_info_matrix.append(["object_order_column", self.object_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["newdata", self.newdata, False, (DataFrame)])
        self.__arg_info_matrix.append(["newdata_partition_column", self.newdata_partition_column, False, (str,list)])
        self.__arg_info_matrix.append(["newdata_order_column", self.newdata_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["input_token_column", self.input_token_column, False, (str)])
        self.__arg_info_matrix.append(["doc_id_columns", self.doc_id_columns, configure._vantage_version == "vantage1.3", (str,list)])
        self.__arg_info_matrix.append(["model_type", self.model_type, True, (str)])
        self.__arg_info_matrix.append(["top_k", self.top_k, True, (int)])
        self.__arg_info_matrix.append(["model_token_column", self.model_token_column, True, (str)])
        self.__arg_info_matrix.append(["model_category_column", self.model_category_column, True, (str)])
        self.__arg_info_matrix.append(["model_prob_column", self.model_prob_column, True, (str)])
        self.__arg_info_matrix.append(["terms", self.terms, True, (str,list)])
        self.__arg_info_matrix.append(["output_responses", self.output_responses, True, (str,list)])
        self.__arg_info_matrix.append(["output_prob", self.output_prob, True, (bool)])
        self.__arg_info_matrix.append(["stopwords", self.stopwords, True, (DataFrame)])
        self.__arg_info_matrix.append(["stopwords_order_column", self.stopwords_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["is_tokenized", self.is_tokenized, True, (bool)])
        self.__arg_info_matrix.append(["convert_to_lower_case", self.convert_to_lower_case, True, (bool)])
        self.__arg_info_matrix.append(["stem_tokens", self.stem_tokens, True, (bool)])
        self.__arg_info_matrix.append(["newdata_sequence_column", self.newdata_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["object_sequence_column", self.object_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["stopwords_sequence_column", self.stopwords_sequence_column, True, (str,list)])
        
        if inspect.stack()[1][3] != '_from_model_catalog':
            # Perform the function validations
            self.__validate()
            # Generate the ML query
            self.__form_tdml_query()
            # Execute ML query
            self.__execute()
            # Get the prediction type
            self._prediction_type = self.__awu._get_function_prediction_type(self)
        
        # End the timer to get the build time
        _end_time = time.time()
        
        # Calculate the build time
        self._build_time = (int)(_end_time - _start_time)
        
    def __validate(self):
        """
        Function to validate sqlmr function arguments, which verifies missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        if isinstance(self.object, (NaiveBayesTextClassifier, NaiveBayesTextClassifier2)):
            self.object = self.object._mlresults[0]

        # Cannot use top_k along with output_responses
        if all([self.top_k, self.output_responses]):
            raise TeradataMlException(Messages.get_message(MessageCodes.EITHER_THIS_OR_THAT_ARGUMENT,
                                                           "top_k", "output_responses"),
                                      MessageCodes.EITHER_THIS_OR_THAT_ARGUMENT)

        # Arguments model_token_column, model_category_column and model_prob_column must be used together or not
        mutually_inclusive_args = [self.model_token_column, self.model_category_column, self.model_prob_column]
        if not (all(mutually_inclusive_args) or not (any(mutually_inclusive_args))):
            raise TeradataMlException(
                Messages.get_message(MessageCodes.MUST_PASS_ARGUMENT, "model_token_column, model_category_column",
                                     "model_prob_column"), MessageCodes.MUST_PASS_ARGUMENT)
        
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.newdata, "newdata", None)
        self.__awu._validate_input_table_datatype(self.object, "object", (NaiveBayesTextClassifier, NaiveBayesTextClassifier2))
        self.__awu._validate_input_table_datatype(self.stopwords, "stopwords", None)
        
        # Check for permitted values
        model_type_permitted_values = ["MULTINOMIAL", "BERNOULLI"]
        self.__awu._validate_permitted_values(self.model_type, model_type_permitted_values, "model_type")
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.input_token_column, "input_token_column")
        self.__awu._validate_dataframe_has_argument_columns(self.input_token_column, "input_token_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.doc_id_columns, "doc_id_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.doc_id_columns, "doc_id_columns", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.model_token_column, "model_token_column")
        self.__awu._validate_dataframe_has_argument_columns(self.model_token_column, "model_token_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.model_category_column, "model_category_column")
        self.__awu._validate_dataframe_has_argument_columns(self.model_category_column, "model_category_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.model_prob_column, "model_prob_column")
        self.__awu._validate_dataframe_has_argument_columns(self.model_prob_column, "model_prob_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.terms, "terms")
        self.__awu._validate_dataframe_has_argument_columns(self.terms, "terms", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.newdata_sequence_column, "newdata_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_sequence_column, "newdata_sequence_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.object_sequence_column, "object_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.object_sequence_column, "object_sequence_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.stopwords_sequence_column, "stopwords_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.stopwords_sequence_column, "stopwords_sequence_column", self.stopwords, "stopwords", False)
        
        self.__awu._validate_input_columns_not_empty(self.newdata_partition_column, "newdata_partition_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_partition_column, "newdata_partition_column", self.newdata, "newdata", True)
        
        self.__awu._validate_input_columns_not_empty(self.newdata_order_column, "newdata_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_order_column, "newdata_order_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.object_order_column, "object_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.object_order_column, "object_order_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.stopwords_order_column, "stopwords_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.stopwords_order_column, "stopwords_order_column", self.stopwords, "stopwords", False)
        
        
    def __form_tdml_query(self):
        """
        Function to generate the analytical function queries. The function defines 
        variables and list of arguments required to form the query.
        """
        
        # Output table arguments list
        self.__func_output_args_sql_names = []
        self.__func_output_args = []
        
        # Model Cataloging related attributes.
        self._sql_specific_attributes = {}
        self._sql_formula_attribute_mapper = {}
        self._target_column = None
        self._algorithm_name = None
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("InputTokenColumn")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.input_token_column, "\""), "'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.doc_id_columns is not None:
            self.__func_other_arg_sql_names.append("DocIdColumns")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.doc_id_columns, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_token_column is not None:
            self.__func_other_arg_sql_names.append("ModelTokenColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.model_token_column, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_category_column is not None:
            self.__func_other_arg_sql_names.append("ModelCategoryColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.model_category_column, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_prob_column is not None:
            self.__func_other_arg_sql_names.append("ModelProbColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.model_prob_column, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.terms is not None:
            self.__func_other_arg_sql_names.append("Accumulate")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.terms, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_type is not None and self.model_type != "MULTINOMIAL":
            self.__func_other_arg_sql_names.append("ModelType")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model_type, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.top_k is not None:
            self.__func_other_arg_sql_names.append("TopK")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.top_k, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        if self.output_prob is not None and self.output_prob != False:
            self.__func_other_arg_sql_names.append("OutputProb")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.output_prob, "'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        if self.output_responses is not None:
            self.__func_other_arg_sql_names.append("Responses")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.output_responses, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.is_tokenized is not None and self.is_tokenized != True:
            self.__func_other_arg_sql_names.append("IsTokenized")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.is_tokenized, "'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        if self.convert_to_lower_case is not None and self.convert_to_lower_case != False:
            self.__func_other_arg_sql_names.append("ConvertToLowerCase")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.convert_to_lower_case, "'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        if self.stem_tokens is not None and self.stem_tokens != True:
            self.__func_other_arg_sql_names.append("StemTokens")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.stem_tokens, "'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        # Generate lists for rest of the function arguments
        sequence_input_by_list = []
        if self.newdata_sequence_column is not None:
            sequence_input_by_list.append("predicts:" + UtilFuncs._teradata_collapse_arglist(self.newdata_sequence_column, ""))
        
        if self.object_sequence_column is not None:
            sequence_input_by_list.append("model:" + UtilFuncs._teradata_collapse_arglist(self.object_sequence_column, ""))
        
        if self.stopwords_sequence_column is not None:
            sequence_input_by_list.append("StopWordsTable:" + UtilFuncs._teradata_collapse_arglist(self.stopwords_sequence_column, ""))
        
        if len(sequence_input_by_list) > 0:
            self.__func_other_arg_sql_names.append("SequenceInputBy")
            sequence_input_by_arg_value = UtilFuncs._teradata_collapse_arglist(sequence_input_by_list, "'")
            self.__func_other_args.append(sequence_input_by_arg_value)
            self.__func_other_arg_json_datatypes.append("STRING")
            self._sql_specific_attributes["SequenceInputBy"] = sequence_input_by_arg_value
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process newdata
        self.newdata_partition_column = UtilFuncs._teradata_collapse_arglist(self.newdata_partition_column, "\"")
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.newdata, False)
        self.__func_input_distribution.append("FACT")
        self.__func_input_arg_sql_names.append("predicts")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append(self.newdata_partition_column)
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.newdata_order_column, "\""))
        
        # Process object
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.object, False)
        self.__func_input_distribution.append("DIMENSION")
        self.__func_input_arg_sql_names.append("model")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("NA_character_")
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.object_order_column, "\""))
        
        # Process stopwords
        if self.stopwords is not None:
            self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.stopwords, False)
            self.__func_input_distribution.append("DIMENSION")
            self.__func_input_arg_sql_names.append("StopWordsTable")
            self.__func_input_table_view_query.append(self.__table_ref["ref"])
            self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
            self.__func_input_partition_by_cols.append("NA_character_")
            self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.stopwords_order_column, "\""))
        
        function_name = "NaiveBayesTextClassifierPredict"
        # Create instance to generate SQLMR.
        self.__aqg_obj = AnalyticQueryGenerator(function_name, 
                self.__func_input_arg_sql_names, 
                self.__func_input_table_view_query, 
                self.__func_input_dataframe_type, 
                self.__func_input_distribution, 
                self.__func_input_partition_by_cols, 
                self.__func_input_order_by_cols, 
                self.__func_other_arg_sql_names, 
                self.__func_other_args, 
                self.__func_other_arg_json_datatypes, 
                self.__func_output_args_sql_names, 
                self.__func_output_args, 
                engine="ENGINE_ML")
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = self.__aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
        # Set the algorithm name for Model Cataloging.
        self._algorithm_name = self.__aqg_obj._get_alias_name_for_function(function_name)
        
    def __execute(self):
        """
        Function to execute SQL-MR queries. 
        Create DataFrames for the required SQL-MR outputs.
        """
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_sqlmr_out_", use_default_database=True, gc_on_quit=True, quote=False)
        try:
            # Generate the output.
            UtilFuncs._create_view(sqlmr_stdout_temp_tablename, self.sqlmr_query)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.TDMLDF_EXEC_SQL_FAILED, str(emsg)), MessageCodes.TDMLDF_EXEC_SQL_FAILED)
        
        # Update output table data frames.
        self._mlresults = []
        self.result = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(sqlmr_stdout_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(sqlmr_stdout_temp_tablename))
        self._mlresults.append(self.result)
        
    def show_query(self):
        """
        Function to return the underlying SQL query.
        When model object is created using retrieve_model(), then None is returned.
        """
        return self.sqlmr_query
        
    def get_prediction_type(self):
        """
        Function to return the Prediction type of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._prediction_type
        
    def get_target_column(self):
        """
        Function to return the Target Column of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._target_column
        
    def get_build_time(self):
        """
        Function to return the build time of the algorithm in seconds.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._build_time
        
    def _get_algorithm_name(self):
        """
        Function to return the name of the algorithm.
        """
        return self._algorithm_name
        
    def _get_sql_specific_attributes(self):
        """
        Function to return the dictionary containing the SQL specific attributes of the algorithm.
        """
        return self._sql_specific_attributes
        
    @classmethod
    def _from_model_catalog(cls,
        result = None,
        **kwargs):
        """
        Classmethod is used by Model Cataloging, to instantiate this wrapper class.
        """
        kwargs.pop("result", None)
        
        # Model Cataloging related attributes.
        target_column = kwargs.pop("__target_column", None)
        prediction_type = kwargs.pop("__prediction_type", None)
        algorithm_name = kwargs.pop("__algorithm_name", None)
        build_time = kwargs.pop("__build_time", None)
        
        # Let's create an object of this class.
        obj = cls(**kwargs)
        obj.result  = result 
        
        # Initialize the sqlmr_query class attribute.
        obj.sqlmr_query = None
        
        # Initialize the SQL specific Model Cataloging attributes.
        obj._sql_specific_attributes = None
        obj._target_column = target_column
        obj._prediction_type = prediction_type
        obj._algorithm_name = algorithm_name
        obj._build_time = build_time
        
        # Update output table data frames.
        obj._mlresults = []
        obj.result = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.result), source_type="table", database_name=UtilFuncs._extract_db_name(obj.result))
        obj._mlresults.append(obj.result)
        return obj
        
    def __repr__(self):
        """
        Returns the string representation for a NaiveBayesTextClassifierPredict class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.result)
        return repr_string
        
