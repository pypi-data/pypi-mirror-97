#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Adithya Avvaru (adithya.avvaru@teradata.com)
# Secondary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# 
# Version: 1.2
# Function Version: 1.6
# 
# ################################################################## 

import inspect
import time
from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display

class NamedEntityFinder:
    
    def __init__(self,
        newdata = None,
        configure_table_data = None,
        text_column = None,
        model = None,
        show_entity_context = 0,
        entity_column = "entity",
        accumulate = None,
        newdata_sequence_column = None,
        configure_table_data_sequence_column = None,
        newdata_order_column = None,
        configure_table_data_order_column = None):
        """
        DESCRIPTION:
            The NamedEntityFinder function evaluates the input text, identifies
            tokens based on the specified model, and outputs the tokens with
            detailed information. The function does not identify sentences; it
            simply tokenizes. Token identification is not case-sensitive.
         
        PARAMETERS:
            newdata:
                Required Argument.
                Specifies the input teradataml DataFrame containing the column
                with the text to find Named Entities.
         
            newdata_order_column:
                Optional Argument.
                Specifies Order By columns for newdata.
                Values to this argument can be provided as a list, if multiple
                columns are used for ordering.
                Types: str OR list of Strings (str)
         
            configure_table_data:
                Optional Argument.
                Specifies the teradataml DataFrame containing the configuration
                data.
         
            configure_table_data_order_column:
                Optional Argument.
                Specifies Order By columns for configure_table_data.
                Values to this argument can be provided as a list, if multiple
                columns are used for ordering.
                Types: str OR list of Strings (str)
         
            text_column:
                Required Argument.
                Specifies the name of the input teradataml DataFrame column
                that contains the text to analyze.
                Types: str
         
            model:
                Optional Argument.
                Specifies the model items to load.
                Optional if you specify configure_table_data; required otherwise
                (and you cannot specify "all").
                If you specify both configure_table_data and this argument,
                then the function loads the specified model items from
                configure_table_data.
                If you specify configure_table_data but omit this argument,
                the default value of this argument is "all" (every model item
                from configure_table_data).
                The entity_type is the name of an entity type (for example, PERSON,
                LOCATION, or EMAIL), which appears in the output table.
                The model_type is one of these model types:
                • max entropy: Maximum entropy language model generated by
                               training;
                • rule: Rule-based model, a plain text file with one regular
                        expression on each line;
                • dictionary: Dictionary-based model, a plain text file with
                              one word on each line;
                • reg exp: Regular expression that describes entity_type.
                If model_type is "reg exp", specify regular_expression (a regular
                expression that describes entity_type); otherwise, specify
                model_file (the name of the model file).
                If you specify configure_table_data, you can use entity_type as a
                shortcut. For example, if the configure_table_data has the row
                "organization, max entropy, en-ner-organization.bin", you can specify
                Model("organization") as a shortcut for Model("organization:max
                entropy:en-nerorganization.bin").
                Note:
                    For model_type "max entropy", if you specify configuration_file
                    and omit this argument, then the Java virtual machine (JVM)
                    of the worker node needs more than 2GB of memory.
                Types: str
         
            show_entity_context:
                Optional Argument.
                Specifies the number of context words to output. If the number
                of context words is n (which must be a positive integer), the
                function outputs n words that precede the entity, the entity
                itself, and n words that follow the entity.
                Default Value: 0
                Types: int
         
            entity_column:
                Optional Argument.
                Specifies the name of the output teradataml DataFrame column that
                contains the entity names.
                Default Value: "entity"
                Types: str
         
            accumulate:
                Optional Argument.
                Specifies the names of input teradataml DataFrame columns to
                copy to the output teradataml DataFrame. No accumulate_column
                can be an entity_column. By default, the function copies all
                input teradataml DataFrame columns to the output teradataml
                DataFrame.
                Types: str OR list of Strings (str)
         
            newdata_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of
                the input argument "newdata". The argument is used to ensure
                deterministic results for functions which produce results that vary
                from run to run.
                Types: str OR list of Strings (str)
         
            configure_table_data_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of
                the input argument "configure_table_data". The argument is used to
                ensure deterministic results for functions which produce results that
                vary from run to run.
                Types: str OR list of Strings (str)
         
        RETURNS:
            Instance of NamedEntityFinder.
            Output teradataml DataFrames can be accessed using attribute
            references, such as NamedEntityFinderObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result
         
         
        RAISES:
            TeradataMlException
         
         
        EXAMPLES:
            # Load example data.
            load_example_data("namedentityfinder", ['assortedtext_input', 'name_Find_configure'])
         
            # Provided example tables are 'assortedtext_input' and 'nameFind_configure'.
            # 'assortedtext_input' table contains the text 'content' which is analysed to get
            # Named Entities. 'nameFind_configure' is the configuration table which contain
            # the columns 'model_name', 'model_type' and 'model_file'.
         
            # Create teradataml DataFrame objects.
            nameFind_configure = DataFrame.from_table("name_Find_configure")
            assortedtext_input = DataFrame.from_table("assortedtext_input")
         
            # Example 1: Find entities using a configuration table containing model items.
            NamedEntityFinder_out = NamedEntityFinder(newdata = assortedtext_input,
                                                      configure_table_data = nameFind_configure,
                                                      text_column = 'content',
                                                      accumulate = ['id', 'source'],
                                                      entity_column = 'entity',
                                                      model = 'all',
                                                      show_entity_context = 0,
                                                      newdata_sequence_column = 'id',
                                                      configure_table_data_sequence_column=
                                                                                    'model_file')
            # Print the results
            print(NamedEntityFinder_out.result)
         
            # Example 2: Use a custom trained model to find the entities.
         
            # Load example data.
            load_example_data('namedentityfindertrainer', 'nermem_sports_train')
         
            # Create teradataml DataFrame object
            nermem_sports_train = DataFrame.from_table('nermem_sports_train')
         
            # Training NamedEntityFinder model on entity type "LOCATION"
            NamedEntityFinderTrainer_out = NamedEntityFinderTrainer(data = nermem_sports_train,
                                                                    text_column = 'content',
                                                                    entity_type = 'LOCATION',
                                                                    model = 'location.sports')
            # The trained model is stored in 'location.sports'
         
            # Select a subset of the train dataset to use as "newdata" in NamedEntityFinder.
            nermem_sports_test = nermem_sports_train[nermem_sports_train.id < 20]
         
            # Finding entities using custom trained model
            NamedEntityFinder_out1 = NamedEntityFinder(newdata = nermem_sports_test,
                                                    text_column = 'content',
                                                    model = "LOCATION:max entropy:location.sports")
            # Print the results
            print(NamedEntityFinder_out1.result)
        
        """
        
        # Start the timer to get the build time
        _start_time = time.time()
        
        self.newdata  = newdata 
        self.configure_table_data  = configure_table_data 
        self.text_column  = text_column 
        self.model  = model
        self.show_entity_context  = show_entity_context 
        self.entity_column  = entity_column 
        self.accumulate  = accumulate 
        self.newdata_sequence_column  = newdata_sequence_column 
        self.configure_table_data_sequence_column  = configure_table_data_sequence_column 
        self.newdata_order_column  = newdata_order_column 
        self.configure_table_data_order_column  = configure_table_data_order_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["newdata", self.newdata, False, (DataFrame)])
        self.__arg_info_matrix.append(["newdata_order_column", self.newdata_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["configure_table_data", self.configure_table_data, True, (DataFrame)])
        self.__arg_info_matrix.append(["configure_table_data_order_column", self.configure_table_data_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["text_column", self.text_column, False, (str)])
        self.__arg_info_matrix.append(["model", self.model, self.configure_table_data is not None, (str,list)])
        self.__arg_info_matrix.append(["show_entity_context", self.show_entity_context, True, (int)])
        self.__arg_info_matrix.append(["entity_column", self.entity_column, True, (str)])
        self.__arg_info_matrix.append(["accumulate", self.accumulate, True, (str,list)])
        self.__arg_info_matrix.append(["newdata_sequence_column", self.newdata_sequence_column, True, (str,list)])
        self.__arg_info_matrix.append(["configure_table_data_sequence_column", self.configure_table_data_sequence_column, True, (str,list)])
        
        if inspect.stack()[1][3] != '_from_model_catalog':
            # Perform the function validations
            self.__validate()
            # Generate the ML query
            self.__form_tdml_query()
            # Execute ML query
            self.__execute()
            # Get the prediction type
            self._prediction_type = self.__awu._get_function_prediction_type(self)
        
        # End the timer to get the build time
        _end_time = time.time()
        
        # Calculate the build time
        self._build_time = (int)(_end_time - _start_time)
        
    def __validate(self):
        """
        Function to validate sqlmr function arguments, which verifies missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.newdata, "newdata", None)
        self.__awu._validate_input_table_datatype(self.configure_table_data, "configure_table_data", None)
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.text_column, "text_column")
        self.__awu._validate_dataframe_has_argument_columns(self.text_column, "text_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.accumulate, "accumulate")
        self.__awu._validate_dataframe_has_argument_columns(self.accumulate, "accumulate", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.newdata_sequence_column, "newdata_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_sequence_column, "newdata_sequence_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.configure_table_data_sequence_column, "configure_table_data_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.configure_table_data_sequence_column, "configure_table_data_sequence_column", self.configure_table_data, "configure_table_data", False)
        
        self.__awu._validate_input_columns_not_empty(self.newdata_order_column, "newdata_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_order_column, "newdata_order_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.configure_table_data_order_column, "configure_table_data_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.configure_table_data_order_column, "configure_table_data_order_column", self.configure_table_data, "configure_table_data", False)
        
        # Validate that value passed to the output column argument is not empty.
        self.__awu._validate_input_columns_not_empty(self.entity_column, "entity_column")
        
    def __form_tdml_query(self):
        """
        Function to generate the analytical function queries. The function defines 
        variables and list of arguments required to form the query.
        """
        
        # Output table arguments list
        self.__func_output_args_sql_names = []
        self.__func_output_args = []
        
        # Model Cataloging related attributes.
        self._sql_specific_attributes = {}
        self._sql_formula_attribute_mapper = {}
        self._target_column = None
        self._algorithm_name = None
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("TextColumn")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.text_column, "'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.accumulate is not None:
            self.__func_other_arg_sql_names.append("Accumulate")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.accumulate, "\""), "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model is not None:
            self.__func_other_arg_sql_names.append("Model")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.show_entity_context is not None and self.show_entity_context != 0:
            self.__func_other_arg_sql_names.append("ShowEntityContext")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.show_entity_context, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        if self.entity_column is not None and self.entity_column != "entity":
            self.__func_other_arg_sql_names.append("EntityColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.entity_column, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        # Generate lists for rest of the function arguments
        sequence_input_by_list = []
        if self.newdata_sequence_column is not None:
            sequence_input_by_list.append("input:" + UtilFuncs._teradata_collapse_arglist(self.newdata_sequence_column, ""))
        
        if self.configure_table_data_sequence_column is not None:
            sequence_input_by_list.append("ConfigureTable:" + UtilFuncs._teradata_collapse_arglist(self.configure_table_data_sequence_column, ""))
        
        if len(sequence_input_by_list) > 0:
            self.__func_other_arg_sql_names.append("SequenceInputBy")
            sequence_input_by_arg_value = UtilFuncs._teradata_collapse_arglist(sequence_input_by_list, "'")
            self.__func_other_args.append(sequence_input_by_arg_value)
            self.__func_other_arg_json_datatypes.append("STRING")
            self._sql_specific_attributes["SequenceInputBy"] = sequence_input_by_arg_value
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process newdata
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.newdata, False)
        self.__func_input_distribution.append("FACT")
        self.__func_input_arg_sql_names.append("input")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("ANY")
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.newdata_order_column, "\""))
        
        # Process configure_table_data
        if self.configure_table_data is not None:
            self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.configure_table_data, False)
            self.__func_input_distribution.append("DIMENSION")
            self.__func_input_arg_sql_names.append("ConfigureTable")
            self.__func_input_table_view_query.append(self.__table_ref["ref"])
            self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
            self.__func_input_partition_by_cols.append("NA_character_")
            self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.configure_table_data_order_column, "\""))
        
        function_name = "NamedEntityFinder"
        # Create instance to generate SQLMR.
        self.__aqg_obj = AnalyticQueryGenerator(function_name, 
                self.__func_input_arg_sql_names, 
                self.__func_input_table_view_query, 
                self.__func_input_dataframe_type, 
                self.__func_input_distribution, 
                self.__func_input_partition_by_cols, 
                self.__func_input_order_by_cols, 
                self.__func_other_arg_sql_names, 
                self.__func_other_args, 
                self.__func_other_arg_json_datatypes, 
                self.__func_output_args_sql_names, 
                self.__func_output_args, 
                engine="ENGINE_ML")
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = self.__aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
        # Set the algorithm name for Model Cataloging.
        self._algorithm_name = self.__aqg_obj._get_alias_name_for_function(function_name)
        
    def __execute(self):
        """
        Function to execute SQL-MR queries. 
        Create DataFrames for the required SQL-MR outputs.
        """
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix="td_sqlmr_out_", use_default_database=True, gc_on_quit=True, quote=False)
        try:
            # Generate the output.
            UtilFuncs._create_view(sqlmr_stdout_temp_tablename, self.sqlmr_query)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.TDMLDF_EXEC_SQL_FAILED, str(emsg)), MessageCodes.TDMLDF_EXEC_SQL_FAILED)
        
        # Update output table data frames.
        self._mlresults = []
        self.result = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(sqlmr_stdout_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(sqlmr_stdout_temp_tablename))
        self._mlresults.append(self.result)
        
    def show_query(self):
        """
        Function to return the underlying SQL query.
        When model object is created using retrieve_model(), then None is returned.
        """
        return self.sqlmr_query
        
    def get_prediction_type(self):
        """
        Function to return the Prediction type of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._prediction_type
        
    def get_target_column(self):
        """
        Function to return the Target Column of the algorithm.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._target_column
        
    def get_build_time(self):
        """
        Function to return the build time of the algorithm in seconds.
        When model object is created using retrieve_model(), then the value returned is 
        as saved in the Model Catalog.
        """
        return self._build_time
        
    def _get_algorithm_name(self):
        """
        Function to return the name of the algorithm.
        """
        return self._algorithm_name
        
    def _get_sql_specific_attributes(self):
        """
        Function to return the dictionary containing the SQL specific attributes of the algorithm.
        """
        return self._sql_specific_attributes
        
    @classmethod
    def _from_model_catalog(cls,
        result = None,
        **kwargs):
        """
        Classmethod is used by Model Cataloging, to instantiate this wrapper class.
        """
        kwargs.pop("result", None)
        
        # Model Cataloging related attributes.
        target_column = kwargs.pop("__target_column", None)
        prediction_type = kwargs.pop("__prediction_type", None)
        algorithm_name = kwargs.pop("__algorithm_name", None)
        build_time = kwargs.pop("__build_time", None)

        # Let's create an object of this class.
        obj = cls(**kwargs)
        obj.result  = result 
        
        # Initialize the sqlmr_query class attribute.
        obj.sqlmr_query = None
        
        # Initialize the SQL specific Model Cataloging attributes.
        obj._sql_specific_attributes = None
        obj._target_column = target_column
        obj._prediction_type = prediction_type
        obj._algorithm_name = algorithm_name
        obj._build_time = build_time
        
        # Update output table data frames.
        obj._mlresults = []
        obj.result = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.result), source_type="table", database_name=UtilFuncs._extract_db_name(obj.result))
        obj._mlresults.append(obj.result)
        return obj
        
    def __repr__(self):
        """
        Returns the string representation for a NamedEntityFinder class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.result)
        return repr_string
        
