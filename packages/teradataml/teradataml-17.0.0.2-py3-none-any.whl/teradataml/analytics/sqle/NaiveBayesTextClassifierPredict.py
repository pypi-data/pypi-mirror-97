#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# Secondary Owner: Mounika Kotha (mounika.kotha@teradata.com)
# 
# Version: 1.2
# Function Version: 1.0
# 
# ################################################################## 

import inspect
import time
from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display
from teradataml.analytics.mle.NaiveBayesTextClassifier import NaiveBayesTextClassifier

class NaiveBayesTextClassifierPredict:
    
    def __init__(self,
        object = None,
        newdata = None,
        input_token_column = None,
        doc_id_columns = None,
        model_type = "MULTINOMIAL",
        top_k = None,
        model_token_column = None,
        model_category_column = None,
        model_prob_column = None,
        newdata_partition_column = None,
        newdata_order_column = None,
        object_order_column = None):
        """
        DESCRIPTION:
            The NaiveBayesTextClassifierPredict function uses the model generated by the
            NaiveBayesTextClassifier function to predict the outcomes for a test set
            of data.
         
         
        PARAMETERS:
            object:
                Required Argument.
                Specifies the teradataml DataFrame containing the model data
                or instance of NaiveBayesTextClassifier.
         
            object_order_column:
                Optional Argument.
                Specifies Order By columns for object.
                Values to this argument can be provided as a list, if multiple
                columns are used for ordering.
                Types: str OR list of Strings (str)
         
            newdata:
                Required Argument.
                Specifies the teradataml DataFrame containing the input test
                data.
         
            newdata_partition_column:
                Required Argument.
                Specifies Partition By columns for newdata.
                Values to this argument can be provided as a list, if multiple
                columns are used for partition.
                Types: str OR list of Strings (str)
         
            newdata_order_column:
                Optional Argument.
                Specifies Order By columns for newdata.
                Values to this argument can be provided as a list, if multiple
                columns are used for ordering.
                Types: str OR list of Strings (str)
         
            input_token_column:
                Required Argument.
                Specifies the name of the newdata column that contains the tokens.
                Types: str
         
            doc_id_columns:
                Required Argument.
                Specifies the names of the newdata columns that contain the
                document identifier.
                Types: str OR list of Strings (str)
         
            model_type:
                Optional Argument.
                Specifies the model type of the text classifier.
                Default Value: 'MULTINOMIAL'
                Permitted Values: 'MULTINOMIAL', 'BERNOULLI'
                Types: str
         
            top_k:
                Optional Argument.
                Specifies the number of most likely prediction categories to output
                with their log-likelihood values (for example, the top 10 most likely
                prediction categories). The default is all prediction categories.
                Types: int
         
            model_token_column:
                Optional Argument.
                Specifies the name of the object column that contains the
                tokens. The default value is the first column of object.
                Types: str
         
            model_category_column:
                Optional Argument.
                Specifies the name of the object column that contains the
                prediction categories. The default value is the second column of
                object.
                Types: str
         
            model_prob_column:
                Optional Argument.
                Specifies the name of the object column that contains the token
                counts. The default value is the third column of object.
                Types: str
         
        RETURNS:
            Instance of NaiveBayesTextClassifierPredict.
            Output teradataml DataFrames can be accessed using attribute
            references, such as
            NaiveBayesTextClassifierPredictObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result
         
         
        RAISES:
            TeradataMlException
         
         
        EXAMPLES:
            # Load the data to run the example
            load_example_data("NaiveBayesTextClassifierPredict",["complaints_tokens_test","token_table"])
         
            # Create teradataml DataFrame.
            token_table = DataFrame("token_table")
            complaints_tokens_test = DataFrame("complaints_tokens_test")
         
            # Create a model which is output of  NaiveBayesTextClassifier
            nbt_out = NaiveBayesTextClassifier(data = token_table,
                                               token_column = 'token',
                                               doc_id_columns = 'doc_id',
                                               doc_category_column = 'category',
                                               model_type = "Bernoulli",
                                               data_partition_column = 'category')
         
            # Example 1 -
            nbt_predict_out = NaiveBayesTextClassifierPredict(object = nbt_out,
                                                              newdata = complaints_tokens_test,
                                                              input_token_column = 'token',
                                                              doc_id_columns = 'doc_id',
                                                              model_type = "Bernoulli",
                                                              model_token_column = 'token',
                                                              model_category_column = 'category',
                                                              model_prob_column = 'prob',
                                                              newdata_partition_column = 'doc_id')
         
            # Print the result DataFrame
            print(nbt_predict_out.result)
        
        """
        
        # Start the timer to get the build time
        _start_time = time.time()
        
        self.object  = object 
        self.newdata  = newdata 
        self.input_token_column  = input_token_column 
        self.doc_id_columns  = doc_id_columns 
        self.model_type  = model_type 
        self.top_k  = top_k 
        self.model_token_column  = model_token_column 
        self.model_category_column  = model_category_column 
        self.model_prob_column  = model_prob_column 
        self.newdata_partition_column  = newdata_partition_column 
        self.newdata_order_column  = newdata_order_column 
        self.object_order_column  = object_order_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["object", self.object, False, (DataFrame)])
        self.__arg_info_matrix.append(["object_order_column", self.object_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["newdata", self.newdata, False, (DataFrame)])
        self.__arg_info_matrix.append(["newdata_partition_column", self.newdata_partition_column, False, (str,list)])
        self.__arg_info_matrix.append(["newdata_order_column", self.newdata_order_column, True, (str,list)])
        self.__arg_info_matrix.append(["input_token_column", self.input_token_column, False, (str)])
        self.__arg_info_matrix.append(["doc_id_columns", self.doc_id_columns, False, (str,list)])
        self.__arg_info_matrix.append(["model_type", self.model_type, True, (str)])
        self.__arg_info_matrix.append(["top_k", self.top_k, True, (int)])
        self.__arg_info_matrix.append(["model_token_column", self.model_token_column, True, (str)])
        self.__arg_info_matrix.append(["model_category_column", self.model_category_column, True, (str)])
        self.__arg_info_matrix.append(["model_prob_column", self.model_prob_column, True, (str)])
        
        if inspect.stack()[1][3] != '_from_model_catalog':
            # Perform the function validations
            self.__validate()
            # Generate the ML query
            self.__form_tdml_query()
            # Process output table schema
            self.__process_output_column_info()
            # Execute ML query
            self.__execute()
            # Get the prediction type
            self._prediction_type = self.__awu._get_function_prediction_type(self)
        
        # End the timer to get the build time
        _end_time = time.time()
        
        # Calculate the build time
        self._build_time = (int)(_end_time - _start_time)
        
    def __validate(self):
        """
        Function to validate sqlmr function arguments, which verifies missing
        arguments, input argument and table types. Also processes the
        argument values.
        """
        if isinstance(self.object, NaiveBayesTextClassifier):
            self.object = self.object._mlresults[0]
        
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.newdata, "newdata", None)
        self.__awu._validate_input_table_datatype(self.object, "object", NaiveBayesTextClassifier)
        
        # Check for permitted values
        model_type_permitted_values = ["MULTINOMIAL", "BERNOULLI"]
        self.__awu._validate_permitted_values(self.model_type, model_type_permitted_values, "model_type")
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.input_token_column, "input_token_column")
        self.__awu._validate_dataframe_has_argument_columns(self.input_token_column, "input_token_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.doc_id_columns, "doc_id_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.doc_id_columns, "doc_id_columns", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.model_token_column, "model_token_column")
        self.__awu._validate_dataframe_has_argument_columns(self.model_token_column, "model_token_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.model_category_column, "model_category_column")
        self.__awu._validate_dataframe_has_argument_columns(self.model_category_column, "model_category_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.model_prob_column, "model_prob_column")
        self.__awu._validate_dataframe_has_argument_columns(self.model_prob_column, "model_prob_column", self.object, "object", False)
        
        self.__awu._validate_input_columns_not_empty(self.newdata_partition_column, "newdata_partition_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_partition_column, "newdata_partition_column", self.newdata, "newdata", True)
        
        self.__awu._validate_input_columns_not_empty(self.newdata_order_column, "newdata_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_order_column, "newdata_order_column", self.newdata, "newdata", False)
        
        self.__awu._validate_input_columns_not_empty(self.object_order_column, "object_order_column")
        self.__awu._validate_dataframe_has_argument_columns(self.object_order_column, "object_order_column", self.object, "object", False)
        
        
    def __form_tdml_query(self):
        """
        Function to generate the analytical function queries. The function defines
        variables and list of arguments required to form the query.
        """
        
        # Output table arguments list
        self.__func_output_args_sql_names = []
        self.__func_output_args = []
        
        # Model Cataloging related attributes.
        self._sql_specific_attributes = {}
        self._sql_formula_attribute_mapper = {}
        self._target_column = None
        self._algorithm_name = None
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("InputTokenColumn")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.input_token_column, "'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        self.__func_other_arg_sql_names.append("DocIdColumns")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.doc_id_columns, "'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_token_column is not None:
            self.__func_other_arg_sql_names.append("ModelTokenColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model_token_column, "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_category_column is not None:
            self.__func_other_arg_sql_names.append("ModelCategoryColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model_category_column, "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_prob_column is not None:
            self.__func_other_arg_sql_names.append("ModelProbColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model_prob_column, "'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_type is not None and self.model_type != "MULTINOMIAL":
            self.__func_other_arg_sql_names.append("ModelType")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model_type, "'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.top_k is not None:
            self.__func_other_arg_sql_names.append("TopK")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.top_k, "'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process newdata
        self.newdata_partition_column = UtilFuncs._teradata_collapse_arglist(self.newdata_partition_column, "\"")
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.newdata)
        self.__func_input_distribution.append("FACT")
        self.__func_input_arg_sql_names.append("predicts")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append(self.newdata_partition_column)
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.newdata_order_column, "\""))
        
        # Process object
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.object)
        self.__func_input_distribution.append("DIMENSION")
        self.__func_input_arg_sql_names.append("Model")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("NA_character_")
        self.__func_input_order_by_cols.append(UtilFuncs._teradata_collapse_arglist(self.object_order_column, "\""))
        
        function_name = "NaiveBayesTextClassifierPredict"
        # Create instance to generate SQLMR.
        self.__aqg_obj = AnalyticQueryGenerator(function_name, 
                self.__func_input_arg_sql_names, 
                self.__func_input_table_view_query, 
                self.__func_input_dataframe_type, 
                self.__func_input_distribution, 
                self.__func_input_partition_by_cols, 
                self.__func_input_order_by_cols, 
                self.__func_other_arg_sql_names, 
                self.__func_other_args, 
                self.__func_other_arg_json_datatypes, 
                self.__func_output_args_sql_names, 
                self.__func_output_args, 
                engine="ENGINE_SQL")
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = self.__aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
        # Set the algorithm name for Model Cataloging.
        self._algorithm_name = self.__aqg_obj._get_alias_name_for_function(function_name)
        
    def __execute(self):
        """
        Function to generate AED nodes for output tables.
        This makes a call aed_ml_query() and then output table dataframes are created.
        """
        # Create a list of input node ids contributing to a query.
        self.__input_nodeids = []
        self.__input_nodeids.append(self.newdata._nodeid)
        self.__input_nodeids.append(self.object._nodeid)

        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix = "td_sqlmr_out_", use_default_database = True, gc_on_quit = True, quote=False)
        self.__func_output_args.insert(0, sqlmr_stdout_temp_tablename)
        try:
            # Call aed_ml_query and generate AED nodes.
            node_id_list = self.__aed_utils._aed_ml_query(self.__input_nodeids, self.sqlmr_query, self.__func_output_args, "NaiveBayesTextClassifierPredict", self.__aqg_obj._multi_query_input_nodes)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.AED_EXEC_FAILED, str(emsg)), MessageCodes.AED_EXEC_FAILED)


        # Update output table data frames.
        self._mlresults = []
        self.result = self.__awu._create_data_set_object(df_input=node_id_list[0], metaexpr=UtilFuncs._get_metaexpr_using_columns(node_id_list[0], self.__stdout_column_info))
        self._mlresults.append(self.result)

    def __process_output_column_info(self):
        """
        Function to process the output schema for all the ouptut tables.
        This function generates list of column names and column types
        for each generated output tables, which can be used to create metaexpr.
        """
        # Collecting STDOUT output column information.
        stdout_column_info_name = []
        stdout_column_info_type = []
        for column_name, column_type in self.__awu._retrieve_column_info(df_input=self.newdata, parameter=self.doc_id_columns, columns=None):
            stdout_column_info_name.append(column_name)
            stdout_column_info_type.append(column_type)

        stdout_column_info_name.append("prediction")
        stdout_column_info_type.append(self.__awu._get_json_to_sqlalchemy_mapping("varchar"))

        stdout_column_info_name.append("loglik")
        stdout_column_info_type.append(self.__awu._get_json_to_sqlalchemy_mapping("double precision"))

        self.__stdout_column_info = zip(stdout_column_info_name, stdout_column_info_type)
        
    def show_query(self):
        """
        Function to return the underlying SQL query.
        When model object is created using retrieve_model(), then None is returned.
        """
        return self.sqlmr_query
        
    def get_prediction_type(self):
        """
        Function to return the Prediction type of the algorithm.
        When model object is created using retrieve_model(), then the value returned is
        as saved in the Model Catalog.
        """
        return self._prediction_type
        
    def get_target_column(self):
        """
        Function to return the Target Column of the algorithm.
        When model object is created using retrieve_model(), then the value returned is
        as saved in the Model Catalog.
        """
        return self._target_column
        
    def get_build_time(self):
        """
        Function to return the build time of the algorithm in seconds.
        When model object is created using retrieve_model(), then the value returned is
        as saved in the Model Catalog.
        """
        return self._build_time
        
    def _get_algorithm_name(self):
        """
        Function to return the name of the algorithm.
        """
        return self._algorithm_name
        
    def _get_sql_specific_attributes(self):
        """
        Function to return the dictionary containing the SQL specific attributes of the algorithm.
        """
        return self._sql_specific_attributes
        
    @classmethod
    def _from_model_catalog(cls,
        result = None,
        **kwargs):
        """
        Classmethod is used by Model Cataloging, to instantiate this wrapper class.
        """
        kwargs.pop("result", None)
        
        # Model Cataloging related attributes.
        target_column = kwargs.pop("__target_column", None)
        prediction_type = kwargs.pop("__prediction_type", None)
        algorithm_name = kwargs.pop("__algorithm_name", None)
        build_time = kwargs.pop("__build_time", None)
        
        # Let's create an object of this class.
        obj = cls(**kwargs)
        obj.result  = result 
        
        # Initialize the sqlmr_query class attribute.
        obj.sqlmr_query = None
        
        # Initialize the SQL specific Model Cataloging attributes.
        obj._sql_specific_attributes = None
        obj._target_column = target_column
        obj._prediction_type = prediction_type
        obj._algorithm_name = algorithm_name
        obj._build_time = build_time
        
        # Update output table data frames.
        obj._mlresults = []
        obj.result = obj.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(obj.result), source_type="table", database_name=UtilFuncs._extract_db_name(obj.result))
        obj._mlresults.append(obj.result)
        return obj
        
    def __repr__(self):
        """
        Returns the string representation for a NaiveBayesTextClassifierPredict class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.result)
        return repr_string
        
