.ONESHELL:
SHELL := bash

.PHONY := all tf_init tf_workspace tf_options tf_confirm aws_account_info
.DEFAULT_GOAL := help

SUPPORTED_ENVS = dev tst acc prd
REQUIRED_BINS = terraform jq aws
env           ?= $(shell terraform workspace show)

WHITE := '\033[0;37m'
BLUE  := '\033[0;34m'
GREEN := '\033[0;32m'
RED   := '\033[0;31m'

all: check_prerequisites

help:
	@printf "\nThe AWS Edition\n\n"
	@printf "Usage: make <TARGET> (env=<ENVIRONMENT>) (<TERRAFORM ARGUMENTS>)\n\n"
	@printf "Where:\n"
	@printf " ENVIRONMENT is one of ['dev','tst','acc','prd']\n"
	@printf " TARGET is one:\n"
	@awk -F ':|##' '/^[^\t].+?:.*?##/ {printf "\033[36m    %-30s\033[0m %s\n", $$1, $$NF }' $(MAKEFILE_LIST)
	@printf "\nNote:\n\n"
	@printf " - parameter 'env' is only required when selecting an environment\n"
	@printf " - <TERRAFORM ARGUMENTS> can be used to pass arbitrary terraform parameters (without a prefix dash). Example: \"make apply input=false no-color auto-approve\"\n"

check_prerequisites:
K := $(foreach bin,$(REQUIRED_BINS), \
		$(if $(shell which $(bin)),,$(error Before you continue, please install '$(bin)')))

tf_validate:
ifeq ($(filter $(env),$(SUPPORTED_ENVS)),)
	$(error Environment '$(env)' is not supported! Valid options are '$(SUPPORTED_ENVS)')
endif

aws_account_info:
	$(eval AWS_ACCOUNT_ID=$(shell aws sts get-caller-identity --output text --query 'Account'))
	$(eval AWS_ACCOUNT_ALIAS=$(shell aws iam list-account-aliases --output text --query 'AccountAliases[*]'))
	
	@if [ ! -f terraform.tf ]; then echo "[ERROR] directory '$(PWD)' does not contain a valid terraform project."; exit 1; fi;
	$(eval CURRENT_TF_KEY=$(shell cat terraform.tf | grep key | sed 's/["[:space:]]//g' | cut -d "=" -f 2 | cut -d "#" -f 1))

tf_init: aws_account_info
	@if [ -e .terraform/environment ]; then rm .terraform/environment; fi;
	@if [ -e .terraform/terraform.tfstate ]; then rm .terraform/terraform.tfstate; fi;

ifdef TFMAKE_KEY_PREFIX
	$(eval TF_KEY_PREFIX=$(AWS_ACCOUNT_ALIAS)/$(TFMAKE_KEY_PREFIX))
else
	$(eval TF_KEY_PREFIX=$(AWS_ACCOUNT_ALIAS))
endif

	@terraform init -backend-config 'workspace_key_prefix=$(TF_KEY_PREFIX)'

tf_options:
	$(if $(wildcard vars/$(env).tfvars), $(eval TF_OPTIONS := $(TF_OPTIONS) -var-file "vars/$(env).tfvars"))

tf_workspace:
	@terraform workspace select $(env) 2> /dev/null || terraform workspace new $(env)

tf_confirm: aws_account_info
	$(eval TF_KEY=$(shell cat .terraform/terraform.tfstate | jq '.backend.config.workspace_key_prefix + "/${env}" + "/" + .backend.config.key'))

	@printf "\nUsing the following details:\n\n"
	@printf " - cloud: AWS\n"
	@printf " - workspace: $(env)\n"
	@printf " - account: $(AWS_ACCOUNT_ALIAS)\n"
	@printf " - key: `echo $(TF_KEY)`\n\n"

	@if [ -z $$TFMAKE_AGREE ]; then \
		echo "Press [ENTER] to continue or [CTRL-C] to stop." && read INPUT; \
	fi

update: ## Update terraform modules and providers
	@terraform init -upgrade=true -no-color
	@terraform get -update -no-color

select: tf_validate tf_init tf_workspace ## Select and initialize terraform workspace (aka 'stage')
	@printf $(GREEN)"\n\n>>> Now using Terraform workspace '$(env)' on AWS account '$(AWS_ACCOUNT_ALIAS)' ...\n"$(WHITE)

show: aws_account_info ## Show current terraform workspace
	$(eval CURRENT_WORKSPACE=$(shell terraform workspace show))
	@printf $(GREEN)"\nCurrently using Terraform workspace '$(CURRENT_WORKSPACE)' on AWS account '$(AWS_ACCOUNT_ALIAS)' ...\n"$(WHITE)

plan: tf_validate tf_options tf_confirm ## Generate and show an execution plan
	@terraform $@ $(TF_OPTIONS) $(args)

apply: tf_validate tf_options tf_confirm ## Builds or changes infrastructure
	@terraform $@ $(TF_OPTIONS) -no-color $(args) ; \
	retVal=$$?; \
	if [ $$retVal -ne 0 ]; then \
		echo "terraform failed with status $$retVal"; \
		exit 1; \
	fi
	@terraform output -no-color -json 2> /dev/null | jq 'with_entries(.value |= .value)' > tf.${env}.outputs.json

apply-plan: tf_validate tf_confirm ## Builds or changes infrastructure using a saved terraform plan
	@terraform $@ -no-color $(args) ; \
	retVal=$$?; \
	if [ $$retVal -ne 0 ]; then \
		echo "terraform failed with status $$retVal"; \
		exit 1; \
	fi
	@terraform output -no-color -json 2> /dev/null | jq 'with_entries(.value |= .value)' > tf.${env}.outputs.json

destroy: tf_validate tf_options tf_confirm ## Destroy Terraform-managed infrastructure
	@terraform $@ $(TF_OPTIONS) -no-color $(args)

refresh: tf_validate tf_options tf_confirm ## Refresh terraform state
	@terraform $@ $(TF_OPTIONS) -no-color $(args)

import: tf_validate tf_options tf_confirm ## Import existing infrastructure into your Terraform state
	@terraform $@ $(TF_OPTIONS) -no-color $(args)