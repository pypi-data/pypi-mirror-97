# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gamma_api

import flatbuffers

class RangeFilter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRangeFilter(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RangeFilter()
        x.Init(buf, n + offset)
        return x

    # RangeFilter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RangeFilter
    def Field(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RangeFilter
    def LowerValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # RangeFilter
    def LowerValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # RangeFilter
    def LowerValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RangeFilter
    def UpperValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # RangeFilter
    def UpperValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # RangeFilter
    def UpperValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RangeFilter
    def IncludeLower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # RangeFilter
    def IncludeUpper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def RangeFilterStart(builder): builder.StartObject(5)
def RangeFilterAddField(builder, field): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(field), 0)
def RangeFilterAddLowerValue(builder, lowerValue): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lowerValue), 0)
def RangeFilterStartLowerValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def RangeFilterAddUpperValue(builder, upperValue): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(upperValue), 0)
def RangeFilterStartUpperValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def RangeFilterAddIncludeLower(builder, includeLower): builder.PrependBoolSlot(3, includeLower, 0)
def RangeFilterAddIncludeUpper(builder, includeUpper): builder.PrependBoolSlot(4, includeUpper, 0)
def RangeFilterEnd(builder): return builder.EndObject()
