# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gamma_api

import flatbuffers

class Table(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTable(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Table()
        x.Init(buf, n + offset)
        return x

    # Table
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Table
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Table
    def Fields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FieldInfo import FieldInfo
            obj = FieldInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Table
    def FieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Table
    def VectorsInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .VectorInfo import VectorInfo
            obj = VectorInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Table
    def VectorsInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Table
    def IndexingSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Table
    def CompressMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Table
    def RetrievalType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Table
    def RetrievalParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Table
    def RetrievalTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Table
    def RetrievalTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Table
    def RetrievalParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Table
    def RetrievalParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def TableStart(builder): builder.StartObject(9)
def TableAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def TableAddFields(builder, fields): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fields), 0)
def TableStartFieldsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TableAddVectorsInfo(builder, vectorsInfo): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vectorsInfo), 0)
def TableStartVectorsInfoVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TableAddIndexingSize(builder, indexingSize): builder.PrependInt32Slot(3, indexingSize, 0)
def TableAddCompressMode(builder, compressMode): builder.PrependInt32Slot(4, compressMode, 0)
def TableAddRetrievalType(builder, retrievalType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(retrievalType), 0)
def TableAddRetrievalParam(builder, retrievalParam): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(retrievalParam), 0)
def TableAddRetrievalTypes(builder, retrievalTypes): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(retrievalTypes), 0)
def TableStartRetrievalTypesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TableAddRetrievalParams(builder, retrievalParams): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(retrievalParams), 0)
def TableStartRetrievalParamsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TableEnd(builder): return builder.EndObject()
