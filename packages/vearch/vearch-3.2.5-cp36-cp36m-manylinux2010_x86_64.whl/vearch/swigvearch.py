# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swigvearch
else:
    import _swigvearch

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


VEARCH_VERSION_MAJOR = _swigvearch.VEARCH_VERSION_MAJOR
VEARCH_VERSION_MINOR = _swigvearch.VEARCH_VERSION_MINOR
VEARCH_VERSION_PATCH = _swigvearch.VEARCH_VERSION_PATCH

def Init(config_str, len):
    return _swigvearch.Init(config_str, len)

def Close(engine):
    return _swigvearch.Close(engine)

def CreateTable(engine, table_str, len):
    return _swigvearch.CreateTable(engine, table_str, len)

def AddOrUpdateDoc(engine, doc_str, len):
    return _swigvearch.AddOrUpdateDoc(engine, doc_str, len)

def AddOrUpdateDocsNum(engine, i):
    return _swigvearch.AddOrUpdateDocsNum(engine, i)

def PrepareDocs(engine, doc_str, id):
    return _swigvearch.PrepareDocs(engine, doc_str, id)

def AddOrUpdateDocsFinish(engine, len, result_str, result_len):
    return _swigvearch.AddOrUpdateDocsFinish(engine, len, result_str, result_len)

def AddOrUpdateDocs(engine, doc_str, len, result_str, result_len):
    return _swigvearch.AddOrUpdateDocs(engine, doc_str, len, result_str, result_len)

def UpdateDoc(engine, doc_str, len):
    return _swigvearch.UpdateDoc(engine, doc_str, len)

def DeleteDoc(engine, docid, docid_len):
    return _swigvearch.DeleteDoc(engine, docid, docid_len)

def GetEngineStatus(engine, status, len):
    return _swigvearch.GetEngineStatus(engine, status, len)

def GetDocByID(engine, docid, docid_len, doc_str, len):
    return _swigvearch.GetDocByID(engine, docid, docid_len, doc_str, len)

def GetDocByDocID(engine, docid, doc_str, len):
    return _swigvearch.GetDocByDocID(engine, docid, doc_str, len)

def BuildIndex(engine):
    return _swigvearch.BuildIndex(engine)

def Dump(engine):
    return _swigvearch.Dump(engine)

def Load(engine):
    return _swigvearch.Load(engine)

def Search(engine, request_str, req_len, response_str, res_len):
    return _swigvearch.Search(engine, request_str, req_len, response_str, res_len)

def DelDocByQuery(engine, request_str, len):
    return _swigvearch.DelDocByQuery(engine, request_str, len)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swigvearch.delete_SwigPyIterator

    def value(self):
        return _swigvearch.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _swigvearch.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _swigvearch.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _swigvearch.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _swigvearch.SwigPyIterator_equal(self, x)

    def copy(self):
        return _swigvearch.SwigPyIterator_copy(self)

    def next(self):
        return _swigvearch.SwigPyIterator_next(self)

    def __next__(self):
        return _swigvearch.SwigPyIterator___next__(self)

    def previous(self):
        return _swigvearch.SwigPyIterator_previous(self)

    def advance(self, n):
        return _swigvearch.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _swigvearch.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _swigvearch.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _swigvearch.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _swigvearch.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _swigvearch.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _swigvearch.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _swigvearch:
_swigvearch.SwigPyIterator_swigregister(SwigPyIterator)


def swigInitEngine(pConfig, len):
    return _swigvearch.swigInitEngine(pConfig, len)

def swigClose(engine):
    return _swigvearch.swigClose(engine)

def swigCreateTable(engine, pTable, len):
    return _swigvearch.swigCreateTable(engine, pTable, len)

def swigAddOrUpdateDoc(engine, pDoc, len):
    return _swigvearch.swigAddOrUpdateDoc(engine, pDoc, len)

def swigUpdateDoc(engine, pDoc, len):
    return _swigvearch.swigUpdateDoc(engine, pDoc, len)

def swigDeleteDoc(engine, docid, len):
    return _swigvearch.swigDeleteDoc(engine, docid, len)

def swigGetEngineStatus(engine):
    return _swigvearch.swigGetEngineStatus(engine)

def swigGetDocByID(engine, docid, docid_len):
    return _swigvearch.swigGetDocByID(engine, docid, docid_len)

def swigGetDocByDocID(engine, docid):
    return _swigvearch.swigGetDocByDocID(engine, docid)

def swigBuildIndex(engine):
    return _swigvearch.swigBuildIndex(engine)

def swigDump(engine):
    return _swigvearch.swigDump(engine)

def swigLoad(engine):
    return _swigvearch.swigLoad(engine)

def swigSearch(engine, pRequest, req_len):
    return _swigvearch.swigSearch(engine, pRequest, req_len)

def swigDelDocByQuery(engine, pRequest, len):
    return _swigvearch.swigDelDocByQuery(engine, pRequest, len)

def swigGetVectorPtr(v):
    return _swigvearch.swigGetVectorPtr(v)

def memcpy(dest, src, n):
    return _swigvearch.memcpy(dest, src, n)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.IntVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.IntVector___bool__(self)

    def __len__(self):
        return _swigvearch.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.IntVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.IntVector_pop(self)

    def append(self, x):
        return _swigvearch.IntVector_append(self, x)

    def empty(self):
        return _swigvearch.IntVector_empty(self)

    def size(self):
        return _swigvearch.IntVector_size(self)

    def swap(self, v):
        return _swigvearch.IntVector_swap(self, v)

    def begin(self):
        return _swigvearch.IntVector_begin(self)

    def end(self):
        return _swigvearch.IntVector_end(self)

    def rbegin(self):
        return _swigvearch.IntVector_rbegin(self)

    def rend(self):
        return _swigvearch.IntVector_rend(self)

    def clear(self):
        return _swigvearch.IntVector_clear(self)

    def get_allocator(self):
        return _swigvearch.IntVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.IntVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.IntVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.IntVector_swiginit(self, _swigvearch.new_IntVector(*args))

    def push_back(self, x):
        return _swigvearch.IntVector_push_back(self, x)

    def front(self):
        return _swigvearch.IntVector_front(self)

    def back(self):
        return _swigvearch.IntVector_back(self)

    def assign(self, n, x):
        return _swigvearch.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.IntVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.IntVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.IntVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.IntVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_IntVector

# Register IntVector in _swigvearch:
_swigvearch.IntVector_swigregister(IntVector)

class LongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.LongVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.LongVector___bool__(self)

    def __len__(self):
        return _swigvearch.LongVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.LongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.LongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.LongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.LongVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.LongVector_pop(self)

    def append(self, x):
        return _swigvearch.LongVector_append(self, x)

    def empty(self):
        return _swigvearch.LongVector_empty(self)

    def size(self):
        return _swigvearch.LongVector_size(self)

    def swap(self, v):
        return _swigvearch.LongVector_swap(self, v)

    def begin(self):
        return _swigvearch.LongVector_begin(self)

    def end(self):
        return _swigvearch.LongVector_end(self)

    def rbegin(self):
        return _swigvearch.LongVector_rbegin(self)

    def rend(self):
        return _swigvearch.LongVector_rend(self)

    def clear(self):
        return _swigvearch.LongVector_clear(self)

    def get_allocator(self):
        return _swigvearch.LongVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.LongVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.LongVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.LongVector_swiginit(self, _swigvearch.new_LongVector(*args))

    def push_back(self, x):
        return _swigvearch.LongVector_push_back(self, x)

    def front(self):
        return _swigvearch.LongVector_front(self)

    def back(self):
        return _swigvearch.LongVector_back(self)

    def assign(self, n, x):
        return _swigvearch.LongVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.LongVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.LongVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.LongVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.LongVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_LongVector

# Register LongVector in _swigvearch:
_swigvearch.LongVector_swigregister(LongVector)

class ULongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.ULongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.ULongVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.ULongVector___bool__(self)

    def __len__(self):
        return _swigvearch.ULongVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.ULongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.ULongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.ULongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.ULongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.ULongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.ULongVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.ULongVector_pop(self)

    def append(self, x):
        return _swigvearch.ULongVector_append(self, x)

    def empty(self):
        return _swigvearch.ULongVector_empty(self)

    def size(self):
        return _swigvearch.ULongVector_size(self)

    def swap(self, v):
        return _swigvearch.ULongVector_swap(self, v)

    def begin(self):
        return _swigvearch.ULongVector_begin(self)

    def end(self):
        return _swigvearch.ULongVector_end(self)

    def rbegin(self):
        return _swigvearch.ULongVector_rbegin(self)

    def rend(self):
        return _swigvearch.ULongVector_rend(self)

    def clear(self):
        return _swigvearch.ULongVector_clear(self)

    def get_allocator(self):
        return _swigvearch.ULongVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.ULongVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.ULongVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.ULongVector_swiginit(self, _swigvearch.new_ULongVector(*args))

    def push_back(self, x):
        return _swigvearch.ULongVector_push_back(self, x)

    def front(self):
        return _swigvearch.ULongVector_front(self)

    def back(self):
        return _swigvearch.ULongVector_back(self)

    def assign(self, n, x):
        return _swigvearch.ULongVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.ULongVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.ULongVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.ULongVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.ULongVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_ULongVector

# Register ULongVector in _swigvearch:
_swigvearch.ULongVector_swigregister(ULongVector)

class CharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.CharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.CharVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.CharVector___bool__(self)

    def __len__(self):
        return _swigvearch.CharVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.CharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.CharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.CharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.CharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.CharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.CharVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.CharVector_pop(self)

    def append(self, x):
        return _swigvearch.CharVector_append(self, x)

    def empty(self):
        return _swigvearch.CharVector_empty(self)

    def size(self):
        return _swigvearch.CharVector_size(self)

    def swap(self, v):
        return _swigvearch.CharVector_swap(self, v)

    def begin(self):
        return _swigvearch.CharVector_begin(self)

    def end(self):
        return _swigvearch.CharVector_end(self)

    def rbegin(self):
        return _swigvearch.CharVector_rbegin(self)

    def rend(self):
        return _swigvearch.CharVector_rend(self)

    def clear(self):
        return _swigvearch.CharVector_clear(self)

    def get_allocator(self):
        return _swigvearch.CharVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.CharVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.CharVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.CharVector_swiginit(self, _swigvearch.new_CharVector(*args))

    def push_back(self, x):
        return _swigvearch.CharVector_push_back(self, x)

    def front(self):
        return _swigvearch.CharVector_front(self)

    def back(self):
        return _swigvearch.CharVector_back(self)

    def assign(self, n, x):
        return _swigvearch.CharVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.CharVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.CharVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.CharVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.CharVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_CharVector

# Register CharVector in _swigvearch:
_swigvearch.CharVector_swigregister(CharVector)

class UCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.UCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.UCharVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.UCharVector___bool__(self)

    def __len__(self):
        return _swigvearch.UCharVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.UCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.UCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.UCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.UCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.UCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.UCharVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.UCharVector_pop(self)

    def append(self, x):
        return _swigvearch.UCharVector_append(self, x)

    def empty(self):
        return _swigvearch.UCharVector_empty(self)

    def size(self):
        return _swigvearch.UCharVector_size(self)

    def swap(self, v):
        return _swigvearch.UCharVector_swap(self, v)

    def begin(self):
        return _swigvearch.UCharVector_begin(self)

    def end(self):
        return _swigvearch.UCharVector_end(self)

    def rbegin(self):
        return _swigvearch.UCharVector_rbegin(self)

    def rend(self):
        return _swigvearch.UCharVector_rend(self)

    def clear(self):
        return _swigvearch.UCharVector_clear(self)

    def get_allocator(self):
        return _swigvearch.UCharVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.UCharVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.UCharVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.UCharVector_swiginit(self, _swigvearch.new_UCharVector(*args))

    def push_back(self, x):
        return _swigvearch.UCharVector_push_back(self, x)

    def front(self):
        return _swigvearch.UCharVector_front(self)

    def back(self):
        return _swigvearch.UCharVector_back(self)

    def assign(self, n, x):
        return _swigvearch.UCharVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.UCharVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.UCharVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.UCharVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.UCharVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_UCharVector

# Register UCharVector in _swigvearch:
_swigvearch.UCharVector_swigregister(UCharVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.FloatVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.FloatVector___bool__(self)

    def __len__(self):
        return _swigvearch.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.FloatVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.FloatVector_pop(self)

    def append(self, x):
        return _swigvearch.FloatVector_append(self, x)

    def empty(self):
        return _swigvearch.FloatVector_empty(self)

    def size(self):
        return _swigvearch.FloatVector_size(self)

    def swap(self, v):
        return _swigvearch.FloatVector_swap(self, v)

    def begin(self):
        return _swigvearch.FloatVector_begin(self)

    def end(self):
        return _swigvearch.FloatVector_end(self)

    def rbegin(self):
        return _swigvearch.FloatVector_rbegin(self)

    def rend(self):
        return _swigvearch.FloatVector_rend(self)

    def clear(self):
        return _swigvearch.FloatVector_clear(self)

    def get_allocator(self):
        return _swigvearch.FloatVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.FloatVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.FloatVector_swiginit(self, _swigvearch.new_FloatVector(*args))

    def push_back(self, x):
        return _swigvearch.FloatVector_push_back(self, x)

    def front(self):
        return _swigvearch.FloatVector_front(self)

    def back(self):
        return _swigvearch.FloatVector_back(self)

    def assign(self, n, x):
        return _swigvearch.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.FloatVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.FloatVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_FloatVector

# Register FloatVector in _swigvearch:
_swigvearch.FloatVector_swigregister(FloatVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigvearch.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigvearch.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _swigvearch.DoubleVector___bool__(self)

    def __len__(self):
        return _swigvearch.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _swigvearch.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigvearch.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigvearch.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigvearch.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigvearch.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigvearch.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _swigvearch.DoubleVector_pop(self)

    def append(self, x):
        return _swigvearch.DoubleVector_append(self, x)

    def empty(self):
        return _swigvearch.DoubleVector_empty(self)

    def size(self):
        return _swigvearch.DoubleVector_size(self)

    def swap(self, v):
        return _swigvearch.DoubleVector_swap(self, v)

    def begin(self):
        return _swigvearch.DoubleVector_begin(self)

    def end(self):
        return _swigvearch.DoubleVector_end(self)

    def rbegin(self):
        return _swigvearch.DoubleVector_rbegin(self)

    def rend(self):
        return _swigvearch.DoubleVector_rend(self)

    def clear(self):
        return _swigvearch.DoubleVector_clear(self)

    def get_allocator(self):
        return _swigvearch.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _swigvearch.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _swigvearch.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _swigvearch.DoubleVector_swiginit(self, _swigvearch.new_DoubleVector(*args))

    def push_back(self, x):
        return _swigvearch.DoubleVector_push_back(self, x)

    def front(self):
        return _swigvearch.DoubleVector_front(self)

    def back(self):
        return _swigvearch.DoubleVector_back(self)

    def assign(self, n, x):
        return _swigvearch.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _swigvearch.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _swigvearch.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _swigvearch.DoubleVector_reserve(self, n)

    def capacity(self):
        return _swigvearch.DoubleVector_capacity(self)
    __swig_destroy__ = _swigvearch.delete_DoubleVector

# Register DoubleVector in _swigvearch:
_swigvearch.DoubleVector_swigregister(DoubleVector)


def swig_ptr(a):
    return _swigvearch.swig_ptr(a)

def rev_swig_ptr(*args):
    return _swigvearch.rev_swig_ptr(*args)


